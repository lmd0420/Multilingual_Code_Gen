{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOIc/7WcKngmk5d4nYaxfyk"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["from google.colab import drive\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WbQFusDf1Kl2","executionInfo":{"status":"ok","timestamp":1697552948728,"user_tz":300,"elapsed":16083,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"2f023320-720a-4113-bf0d-54414c9530b8"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","execution_count":3,"metadata":{"id":"VnVrpC8WxJ8m","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1697552955895,"user_tz":300,"elapsed":3804,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"5ed61655-5fe7-40e3-f82a-481c71d3b3c5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Processed and added cleaned_code_hi.csv to the zip file.\n","Processed and added cleaned_code_zh-cn.csv to the zip file.\n","Processed and added cleaned_code_en.csv to the zip file.\n","Processed and added cleaned_code_es.csv to the zip file.\n","Processed and added cleaned_code_ja.csv to the zip file.\n","Processed and added cleaned_code_ru.csv to the zip file.\n","File /content/drive/MyDrive/EACL/MultilingualLLMBias/results/results-GPT4/gpt_results.fr.sanitized.csv does not exist.\n","All cleaned files saved to /content/drive/MyDrive/EACL/MultilingualLLMBias/results/results-GPT4/cleaned_csv_files.zip\n"]}],"source":["# Import necessary libraries\n","import os\n","import re\n","import pandas as pd\n","import zipfile\n","\n","# The path to the directory containing the CSV files\n","folder_path = '/content/drive/MyDrive/EACL/MultilingualLLMBias/results/results-GPT4'  # Change this to the path of your folder with new CSV files\n","\n","# List of language codes or specific identifiers in your file names\n","languages = ['hi', 'zh-cn', 'en', 'es', 'ja', 'ru', 'fr']  # Modify as needed\n","\n","# Regular expression patterns\n","pattern = re.compile(r'```python(.*?)```', re.DOTALL)\n","assert_pattern = re.compile(r'^assert.*$', re.MULTILINE)\n","function_pattern = re.compile(r'(def .*?return [^\\n]+)', re.DOTALL)\n","\n","# Create a zip file to store all cleaned CSV files\n","zipfile_name = '/content/drive/MyDrive/EACL/MultilingualLLMBias/results/results-GPT4/cleaned_csv_files.zip'\n","zipf = zipfile.ZipFile(zipfile_name, 'w', zipfile.ZIP_DEFLATED)\n","\n","# Function to extract and clean Python code\n","def extract_and_clean_code(text):\n","    match = pattern.search(text)\n","    if match:\n","        code = match.group(1).strip()\n","        cleaned_code = assert_pattern.sub('', code).strip()  # Remove lines starting with 'assert'\n","        return cleaned_code\n","\n","    # If no match for the first pattern, try the second pattern\n","    match = function_pattern.search(text)\n","    if match:\n","        return match.group(1).strip()\n","\n","    # If still no match, return 'YES'\n","    return 'YES'\n","\n","# Process each CSV file according to the language codes/specific identifiers\n","for lang in languages:\n","    file_path = os.path.join(folder_path, f'gpt_results.{lang}.sanitized.csv')\n","\n","    if os.path.exists(file_path):\n","        # Read data from CSV file\n","        df = pd.read_csv(file_path)\n","\n","        # Apply the function to extract and clean Python code\n","        df['cleaned_code'] = df['gpt_result'].apply(extract_and_clean_code)\n","\n","        # Save the cleaned code to a new CSV file\n","        cleaned_file_name = f'cleaned_code_{lang}.csv'\n","        cleaned_file_path = os.path.join('/content', cleaned_file_name)\n","        df.to_csv(cleaned_file_path, index=False)\n","\n","        # Add the cleaned CSV file to the zip file\n","        zipf.write(cleaned_file_path, cleaned_file_name)\n","\n","        print(f\"Processed and added {cleaned_file_name} to the zip file.\")\n","    else:\n","        print(f\"File {file_path} does not exist.\")\n","\n","# Close the zip file\n","zipf.close()\n","print(f\"All cleaned files saved to {zipfile_name}\")"]}]}