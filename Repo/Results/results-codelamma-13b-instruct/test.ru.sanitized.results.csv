,source_file,task_id,prompt,code,test_imports,test_list,prompt_modified,results
0,Benchmark Questions Verification V2.ipynb,11,Напишите функцию Python для удаления первого и последнего вхождения данного символа из строки.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",[],"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для удаления первого и последнего вхождения данного символа из строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для удаления первого и последнего вхождения данного символа из строки.

Примеры:

```
>>> remove_first_last_occurence('abcabcabc', 'b')
'acabcabc'
>>> remove_first_last_occurence('abcabcabc', 'c')
'ababcab'
>>> remove_first_last_occurence('abcabcabc', 'd')
'abcabcabc'
```

<<SYS>>
def remove_first_last_occurence(string, char):
    if char not in string:
        return string"
1,Benchmark Questions Verification V2.ipynb,12,"Напишите функцию, сортирующую заданную матрицу в порядке возрастания суммы ее строк.","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",[],"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, сортирующую заданную матрицу в порядке возрастания суммы ее строк.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, сортирующую заданную матрицу в порядке возрастания суммы ее строк.

Пример:

| 1 2 3 |
| 4 5 6 |
| 7 8 9 |

Сортируется в порядке возрастания суммы строк:

| 1 2 3 |
| 7 8 9 |
| 4 5 6 |

Вход:

* Матрица

Выход:

* Сортированная матрица

Пример:

| 1 2 "
2,Benchmark Questions Verification V2.ipynb,14,"Напишите функцию Python, чтобы найти объем треугольной призмы.","def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",[],"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти объем треугольной призмы.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти объем треугольной призмы.

Входные данные:

* высота (h)
* основание (b)

Выходные данные:

* объем (V)

Примеры:

* h = 5, b = 6, V = 150
* h = 3, b = 4, V = 60

<<SYS>>
def find_volume(h, b):
    return h * b * (h + b) / 3

print(find_volume(5,"
3,Benchmark Questions Verification V2.ipynb,16,"Напишите функцию, которая возвращает true, если входная строка содержит последовательность строчных букв, соединенных подчеркиванием, и false в противном случае.","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_lowercase_underscore(""aab_cbbbc"")==(True)', 'assert text_lowercase_underscore(""aab_Abbbc"")==(False)', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(False)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая возвращает true, если входная строка содержит последовательность строчных букв, соединенных подчеркиванием, и false в противном случае.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая возвращает true, если входная строка содержит последовательность строчных букв, соединенных подчеркиванием, и false в противном случае.

Например, следующие строки должны возвращать true:

""hello_world""
""abcdefghijklmnopqrstuvwxyz""
""hello_world_abcdefghijklmnopqrstuvwxyz""

Следующие строки должны возвращать false:

""helloWorld""
""1234567890""
""hello_world_abcdefghijklmnopqrstuvwxyz12345678"
4,Benchmark Questions Verification V2.ipynb,17,"Напишите функцию, которая возвращает периметр квадрата, учитывая длину его стороны в качестве входных данных.","def square_perimeter(a):
  perimeter=4*a
  return perimeter",[],"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая возвращает периметр квадрата, учитывая длину его стороны в качестве входных данных.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая возвращает периметр квадрата, учитывая длину его стороны в качестве входных данных.

Примеры:

>>> square_perimeter(5)
20
>>> square_perimeter(10)
40
>>> square_perimeter(20)
80

Примеры:

>>> square_perimeter(5)
20
>>> square_perimeter(10)
40
>>> square_perimeter(20)
80

Примеры:

>>> square_perimeter(5)
20
>>> square_"
5,Benchmark Questions Verification V2.ipynb,18,"Напишите функцию для удаления символов из первой строки, присутствующих во второй строке.","NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",[],"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\'']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления символов из первой строки, присутствующих во второй строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления символов из первой строки, присутствующих во второй строке.

Примеры:

```python
remove_chars(""abcd"", ""bc"") == ""ad""
remove_chars(""abcd"", ""cd"") == ""ab""
remove_chars(""abcd"", ""ab"") == ""cd""
remove_chars(""abcd"", ""d"") == ""abc""
remove_chars(""abcd"", """") == ""abcd""
```

<<SYS>>
def remove_chars(s1, s2):
    return ''.join(c for c in s1"
6,Benchmark Questions Verification V2.ipynb,19,"Напишите функцию, определяющую, содержит ли данный массив целых чисел какой-либо повторяющийся элемент.","def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",[],"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, содержит ли данный массив целых чисел какой-либо повторяющийся элемент.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, содержит ли данный массив целых чисел какой-либо повторяющийся элемент.

Примеры:

check_duplicates([1, 2, 3, 4, 5]) -> False
check_duplicates([1, 2, 3, 4, 1]) -> True
check_duplicates([1, 2, 3, 4, 1, 2]) -> True

Примечание:

В данном задании вам не нужно использовать встроенную функцию any() или any().

Ваша функция должна быть реализована"
7,Benchmark Questions Verification V2.ipynb,20,"Напишите функцию, проверяющую, является ли данное число деревянным мячом или нет.","def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",[],"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, является ли данное число деревянным мячом или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, является ли данное число деревянным мячом или нет.

Примеры:

>>> is_wooden_ball(1)
False
>>> is_wooden_ball(2)
True
>>> is_wooden_ball(3)
False
>>> is_wooden_ball(4)
True
>>> is_wooden_ball(5)
False

Примеры использования:

>>> if is_wooden_ball(ball):
...     print(""Деревянный мяч"")
... else:
...     print(""Ка"
8,Mike's Copy of Benchmark Questions Verification V2.ipynb,56,"Напишите функцию Python, чтобы проверить, является ли заданное число на единицу меньше его обратного значения в два раза.","def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",[],"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, является ли заданное число на единицу меньше его обратного значения в два раза.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, является ли заданное число на единицу меньше его обратного значения в два раза.

Например, если заданное число равно 10, то функция должна вернуть True, так как 10 - 1/20 = 10.

Если заданное число равно 11, то функция должна вернуть False, так как 11 - 1/22 = 11.

Напишите функцию Python, чтобы проверить, является ли заданное число на единицу меньше его обратного значения в два раза."
9,Mike's Copy of Benchmark Questions Verification V2.ipynb,57,"Напишите функцию Python, чтобы найти наибольшее число, которое можно составить из заданного списка цифр.","def find_Max_Num(arr) : 
    n = len(arr)
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",[],"['assert find_Max_Num([1,2,3]) == 321', 'assert find_Max_Num([4,5,6,1]) == 6541', 'assert find_Max_Num([1,2,3,9]) == 9321']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наибольшее число, которое можно составить из заданного списка цифр.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наибольшее число, которое можно составить из заданного списка цифр.

Например, если задан список [1, 2, 3, 4, 5], то функция должна вернуть 54321.

Если задан список [1, 2, 3, 4, 5, 6], то функция должна вернуть 654321.

Если задан список [1, 2, 3, 4, 5, 6, 7], то функция должна вернуть 765432"
10,Mike's Copy of Benchmark Questions Verification V2.ipynb,58,"Напишите функцию Python, чтобы проверить, имеют ли данные два целых числа противоположный знак или нет.","def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",[],"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False', 'assert opposite_Signs(-2,2) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, имеют ли данные два целых числа противоположный знак или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, имеют ли данные два целых числа противоположный знак или нет.

Примеры:

1. 10 и 20 имеют противоположный знак.
2. 10 и -10 имеют противоположный знак.
3. 10 и 10 имеют одинаковый знак.
4. 10 и -11 имеют противоположный знак.

Ваша функция должна возвращать True, если знаки противоположны, и False, если знаки одинаковы."
11,Mike's Copy of Benchmark Questions Verification V2.ipynb,59,Напишите функцию для нахождения n-го восьмиугольного числа.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",[],"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го восьмиугольного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го восьмиугольного числа.

Пример:

>>> n_8_number(1)
1
>>> n_8_number(2)
8
>>> n_8_number(3)
21
>>> n_8_number(4)
55
>>> n_8_number(5)
91

>>> n_8_number(10)
171
>>> n_8_number(20)
4181
>>> n_8_number(30)
13"
12,Mike's Copy of Benchmark Questions Verification V2.ipynb,61,"Напишите функцию Python для подсчета количества подстрок, сумма цифр которых равна их длине.","from collections import defaultdict
def count_Substrings(s):
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",[],"[""assert count_Substrings('112112') == 6"", ""assert count_Substrings('111') == 6"", ""assert count_Substrings('1101112') == 12""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества подстрок, сумма цифр которых равна их длине.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества подстрок, сумма цифр которых равна их длине.

Пример:

>>> count_substrings('123456789')
1
>>> count_substrings('1234567890')
2
>>> count_substrings('12345678901234567890')
3

Пример решения:

def count_substrings(s):
    count = 0
    for i in range(len(s)):
        for j in range(i, len"
13,Mike's Copy of Benchmark Questions Verification V2.ipynb,62,"Напишите функцию Python, чтобы найти наименьшее число в списке.","def smallest_num(xs):
  return min(xs)
",[],"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наименьшее число в списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наименьшее число в списке.

Пример:

>>> min_number([1, 2, 3, 4, 5])
1

>>> min_number([10, 20, 30, 40, 50])
10

>>> min_number([100, 200, 300, 400, 500])
100

>>> min_number([-1, -2, -3, -4, -5])
-5

"
14,Mike's Copy of Benchmark Questions Verification V2.ipynb,63,Напишите функцию для поиска максимальной разницы между доступными парами в заданном списке кортежей.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",[],"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимальной разницы между доступными парами в заданном списке кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимальной разницы между доступными парами в заданном списке кортежей.

Параметры:

* `pairs` - список кортежей, каждый кортеж содержит два числа

Примеры:

```python
>>> max_diff([(1, 2), (3, 4), (5, 6)])
2
>>> max_diff([(1, 2), (3, 4), (5, 6), (7, 8)])
3
>>> max_diff([(1, 2), (3"
15,Mike's Copy of Benchmark Questions Verification V2.ipynb,64,"Напишите функцию для сортировки списка кортежей, используя второе значение каждого кортежа.","def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",[],"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки списка кортежей, используя второе значение каждого кортежа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки списка кортежей, используя второе значение каждого кортежа.

Пример:

>>> sort_by_second([(1, 3), (2, 2), (3, 1)])
[(3, 1), (2, 2), (1, 3)]

>>> sort_by_second([('a', 3), ('b', 2), ('c', 1)])
[('c', 1), ('b', 2), ('a', 3)]

>>> sort_by_second([(1, 'a'), (2, 'b"
16,Mike's Copy of Benchmark Questions Verification V2.ipynb,65,"Напишите функцию, которая сглаживает список и суммирует все его элементы.","def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",[],"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая сглаживает список и суммирует все его элементы.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая сглаживает список и суммирует все его элементы.

Пример:

>>> smooth([1, 2, 3, 4, 5])
15

>>> smooth([1, 2, 3, 4, 5, 6])
18

>>> smooth([1, 2, 3, 4, 5, 6, 7])
21

>>> smooth([1, 2, 3, 4, 5, 6, 7, 8])
24

>>> smooth([1, 2, 3, 4, 5, "
17,Mike's Copy of Benchmark Questions Verification V2.ipynb,66,Напишите функцию Python для подсчета количества положительных чисел в списке.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",[],"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества положительных чисел в списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества положительных чисел в списке.

def count_positive(numbers):
    return sum(1 for x in numbers if x > 0)

Вызовите эту функцию и передайте ей список чисел.

numbers = [-1, 0, 1, 2, 3, 4, 5]
print(count_positive(numbers))

Вывод:

3

Вызовите эту функцию и передайте ей пустой список.

numbers = []
print(count_positive(numbers))

Вывод:"
18,Mike's Copy of Benchmark Questions Verification V2.ipynb,67,"Напишите функцию, позволяющую найти количество способов разбить набор чисел Белла.","def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",[],"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти количество способов разбить набор чисел Белла.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти количество способов разбить набор чисел Белла.

Например, для набора чисел {1, 2, 3, 4, 5} количество способов разбить набор равно 15.

Напишите функцию, позволяющую найти количество способов разбить набор чисел Белла.

Например, для набора чисел {1, 2, 3, 4, 5} количество способов разбить набор равно 15.

Вход: набор чисел
Выход: количество способов разбить"
19,Mike's Copy of Benchmark Questions Verification V2.ipynb,68,"Напишите функцию Python, чтобы проверить, является ли данный массив монотонным или нет.","def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",[],"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, является ли данный массив монотонным или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, является ли данный массив монотонным или нет.

Примеры:

1. [1, 2, 3, 4, 5] - монотонный массив
2. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] - монотонный массив
3. [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1]"
20,Mike's Copy of Benchmark Questions Verification V2.ipynb,69,"Напишите функцию, проверяющую, содержит ли список заданный подсписок или нет.","def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",[],"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, содержит ли список заданный подсписок или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, содержит ли список заданный подсписок или нет.

Примеры:

>>> check_sublist([1, 2, 3], [1, 2])
True
>>> check_sublist([1, 2, 3], [4, 5])
False
>>> check_sublist([1, 2, 3], [1, 2, 3])
True
>>> check_sublist([1, 2, 3], [])
True
>>> check_sublist([], [1])
False

Примеры с использованием генераторов:

>>> check_"
21,Mike's Copy of Benchmark Questions Verification V2.ipynb,70,"Напишите функцию, определяющую, имеют ли все заданные кортежи одинаковую длину или нет.","def find_equal_tuple(Input):
  k = 0 if not Input else len(Input[0])
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input):
  return find_equal_tuple(Input) == 1",[],"['assert get_equal([(11, 22, 33), (44, 55, 66)]) == True', 'assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False', 'assert get_equal([(1, 2), (3, 4)]) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, имеют ли все заданные кортежи одинаковую длину или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, имеют ли все заданные кортежи одинаковую длину или нет.

Примеры:

>>> all_same_length([(1, 2, 3), (4, 5, 6)])
True
>>> all_same_length([(1, 2, 3), (4, 5)])
False
>>> all_same_length([])
True

>>> all_same_length([(1, 2, 3), (4, 5, 6), (7, 8, 9, 10)])
False

>>> all_same_length([(1, 2,"
22,Mike's Copy of Benchmark Questions Verification V2.ipynb,71,Напишите функцию для сортировки списка элементов.,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",[],"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки списка элементов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки списка элементов.

Примеры:

>>> sort([])
[]
>>> sort([1, 2, 3])
[1, 2, 3]
>>> sort([3, 2, 1])
[1, 2, 3]
>>> sort([1, 2, 3, 4, 5])
[1, 2, 3, 4, 5]
>>> sort([5, 4, 3, 2, 1])
[1, 2, 3, 4, 5]
>>> sort(["
23,Mike's Copy of Benchmark Questions Verification V2.ipynb,72,"Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как разность двух квадратов или нет.","def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",[],"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как разность двух квадратов или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как разность двух квадратов или нет.

Примеры:

1. 16 - да, 16 = 4^2 - 0^2
2. 15 - нет, 15 не может быть представлено как разность двух квадратов
3. 25 - да, 25 = 5^2 - 0^2

Примеры реализации:

def is_square_difference(n):
    for i in range(1, int(n**0.5) + 1):
        if i**2 + (n-i**2)**"
24,Mike's Copy of Benchmark Questions Verification V2.ipynb,74,"Напишите функцию, проверяющую, следует ли она последовательности, заданной в массиве шаблонов.","def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",[],"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, следует ли она последовательности, заданной в массиве шаблонов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, следует ли она последовательности, заданной в массиве шаблонов.

Примеры:

```
>>> check_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
True
>>> check_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])
False
>>> check_sequence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])"
25,Mike's Copy of Benchmark Questions Verification V2.ipynb,75,"Напишите функцию для поиска кортежей, все элементы которых делятся на k из заданного списка кортежей.","def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return res",[],"['assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]', 'assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]', 'assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска кортежей, все элементы которых делятся на k из заданного списка кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска кортежей, все элементы которых делятся на k из заданного списка кортежей.

Пример:

>>> find_divisible_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 3)
[(1, 2, 3), (4, 5, 6)]

>>> find_divisible_tuples([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 9)
[(1, 2, 3), (4, 5, 6), (7, 8"
26,Mike's Copy of Benchmark Questions Verification V2.ipynb,77,"Напишите функцию Python, чтобы определить, делится ли число на 11.","def is_Diff(n): 
    return (n % 11 == 0) ",[],"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы определить, делится ли число на 11.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы определить, делится ли число на 11.

Примеры:

>>> is_divisible_by_11(11)
True
>>> is_divisible_by_11(12)
False
>>> is_divisible_by_11(13)
False
>>> is_divisible_by_11(14)
False
>>> is_divisible_by_11(15)
False
>>> is_divisible_by_11(16)
False
>>> is_divisible_by_11(1"
27,Mike's Copy of Benchmark Questions Verification V2.ipynb,79,"Напишите функцию Python, чтобы проверить, является ли длина слова нечетной или нет.","def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",[],"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, является ли длина слова нечетной или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, является ли длина слова нечетной или нет.

Примеры:

>>> is_odd_length(""abc"")
True
>>> is_odd_length(""abcd"")
False
>>> is_odd_length(""a"")
True
>>> is_odd_length("""")
False

Примеры использования:

>>> if is_odd_length(word):
...     print(""The length of the word is odd."")
... else:
...     print(""The length of the word is even."")

>>> if is_odd_length(word):
...     print(""The length of the word is odd"
28,Mike's Copy of Benchmark Questions Verification V2.ipynb,80,Напишите функцию для нахождения n-го тетраэдрического числа.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",[],"['assert tetrahedral_number(5) == 35', 'assert tetrahedral_number(6) == 56', 'assert tetrahedral_number(7) == 84']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го тетраэдрического числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го тетраэдрического числа.

Тетраэдрическое число - это число, которое можно получить из 4-х тетраэдров, соединив их углы.

Например, 1 - это тетраэдрическое число, так как оно может быть получено из 1 тетраэдра.

2 - это тетраэдрическое число, так как оно может быть получено из 2 тетраэдров, соединив их углы.

3 - это тетраэдрическое число, так как оно может быть"
29,Mike's Copy of Benchmark Questions Verification V2.ipynb,82,Напишите функцию для определения объема шара.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",['import math'],"['assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)', 'assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)', 'assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения объема шара.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения объема шара.

Функция должна принимать радиус шара в качестве аргумента и возвращать объем шара.

Пример использования:

>>> volume_of_sphere(10)
3141592653589793238462643383279502884197169399375105820974944592307816406286208998628"
30,Mike's Copy of Benchmark Questions Verification V2.ipynb,83,"Напишите функцию Python, чтобы найти символ, полученный путем сложения значения ASCII всех символов заданной строки по модулю 26.","def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",[],"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти символ, полученный путем сложения значения ASCII всех символов заданной строки по модулю 26.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти символ, полученный путем сложения значения ASCII всех символов заданной строки по модулю 26.

Например, если ввести строку ""hello"", то функция должна вернуть значение ""world"".

Вы можете использовать следующий код для проверки вашей функции:

def test_function(test_case):
    test_answer = function(test_case)
    print(test_answer)

test_case = ""hello""
test_function(test_case)

Вы можете использовать следующий код для проверки вашей функции:

def test_function(test_case):
    test_answer = function"
31,Mike's Copy of Benchmark Questions Verification V2.ipynb,84,Напишите функцию для поиска n-го числа в последовательности Ньюмана-Конвея.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",[],"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска n-го числа в последовательности Ньюмана-Конвея.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска n-го числа в последовательности Ньюмана-Конвея.

Пример:

>>> newman_conway(5)
'5, 3, 2, 1, 1'

>>> newman_conway(100)
'100, 3, 2, 1, 1'

>>> newman_conway(1000)
'1000, 3, 2, 1, 1'

>>> newman_conway(10000)
'10000, 3, 2, 1, 1'
"
32,Mike's Copy of Benchmark Questions Verification V2.ipynb,85,Напишите функцию для нахождения площади поверхности сферы.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",['import math'],"['assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади поверхности сферы.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади поверхности сферы.

Параметры:

* радиус сферы

Выходные данные:

* площадь поверхности сферы

Примеры:

>>> find_surface_area(1)
3.141592653589793

>>> find_surface_area(2)
12.566370614359172

>>> find_surface_area(3)
28.2743338823081"
33,Mike's Copy of Benchmark Questions Verification V2.ipynb,86,Напишите функцию для поиска n-ного центрированного шестиугольного числа.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",[],"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска n-ного центрированного шестиугольного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска n-ного центрированного шестиугольного числа.

Пример:

>>> find_centered_hexagonal_number(1)
1
>>> find_centered_hexagonal_number(2)
8
>>> find_centered_hexagonal_number(3)
21
>>> find_centered_hexagonal_number(4)
58
>>> find_centered_hexagonal_number(5)
119
>>> find_centered_hexagonal_number(6)
206
>>> find_centered_hexagonal_number(7"
34,Mike's Copy of Benchmark Questions Verification V2.ipynb,87,Напишите функцию для объединения трех словарей в один.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",[],"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения трех словарей в один.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения трех словарей в один.

Пример:

>>> merge_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6})
{'a': 1, 'b': 3, 'c': 5, 'd': 6}

>>> merge_dicts({'a': 1, 'b': 2}, {'b': 3, 'c': 4}, {'c': 5, 'd': 6}, {'d': 7, 'e': 8})
{'a"
35,Mike's Copy of Benchmark Questions Verification V2.ipynb,88,"Напишите функцию, чтобы получить частоту всех элементов в списке, возвращаемую в виде словаря.","import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",[],"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, чтобы получить частоту всех элементов в списке, возвращаемую в виде словаря.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, чтобы получить частоту всех элементов в списке, возвращаемую в виде словаря.

Пример:

>>> get_frequency(['a', 'b', 'c', 'a', 'b', 'c', 'a', 'a'])
{'a': 4, 'b': 2, 'c': 3}

>>> get_frequency([])
{}

>>> get_frequency(None)
{}

>>> get_frequency([1])
{1: 1}

>>> get_frequency([1, 2, 3, 2, 3, 1])
{1: 2, 2:"
36,Mike's Copy of Benchmark Questions Verification V2.ipynb,89,"Напишите функцию для поиска ближайшего числа меньшего, чем n.","def closest_num(N):
  return (N - 1)",[],"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска ближайшего числа меньшего, чем n.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска ближайшего числа меньшего, чем n.

Например, если n = 10, то функция должна вернуть 9.

Если такого числа нет, то функция должна вернуть None.

Например, если n = 1, то функция должна вернуть None.

Напишите функцию для поиска ближайшего числа большего, чем n.

Например, если n = 10, то функция должна вернуть 11.

Если такого числа нет, то функция должна вернуть None.

Например"
37,Mike's Copy of Benchmark Questions Verification V2.ipynb,90,"Напишите функцию Python, чтобы найти длину самого длинного слова.","def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",[],"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти длину самого длинного слова.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти длину самого длинного слова.

Пример:

>>> longest_word(""The quick brown fox jumps over the lazy dog"")
""jumps""

>>> longest_word(""Google do a rollercoaster"")
""Google""

>>> longest_word(""May the force be with you"")
""force""

>>> longest_word("""")
""-1""

>>> longest_word(""a"")
""a""

>>> longest_word(""aa"")
""aa""

>>> longest_word(""aaa"")
""aaa""

>>> longest_word("""
38,Mike's Copy of Benchmark Questions Verification V2.ipynb,91,"Напишите функцию, проверяющую, присутствует ли строка в качестве подстроки в заданном списке строковых значений.","def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",[],"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, присутствует ли строка в качестве подстроки в заданном списке строковых значений.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, присутствует ли строка в качестве подстроки в заданном списке строковых значений.

Примеры:

check_substring(""abc"", [""abcd"", ""bcd"", ""cde""]) -> True
check_substring(""abc"", [""abcd"", ""bcd"", ""cde"", ""ab""]) -> True
check_substring(""abc"", [""abcd"", ""bcd"", ""cde"", ""ab"", ""a""]) -> True
check_substring(""abc"", [""abcd"", ""bcd"", ""cde"", ""ab"", ""a"", ""abcd""]) -> True
check_substring(""abc"", [""abcd"", ""bcd"", ""cde"", ""ab"", ""a"","
39,Mike's Copy of Benchmark Questions Verification V2.ipynb,92,"Напишите функцию, проверяющую, является ли данное число волнистым или нет.","def is_undulating(n): 
	n = str(n)
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",[],"['assert is_undulating(1212121) == True', 'assert is_undulating(1991) == False', 'assert is_undulating(121) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, является ли данное число волнистым или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, является ли данное число волнистым или нет.

Примеры:

>>> is_wavy(1)
False
>>> is_wavy(123456)
True
>>> is_wavy(123456789)
False

Подсказка: волнистое число - это число, которое можно разбить на два равных блока, каждый из которых содержит одинаковое количество цифр.

Например, число 123456 можно разбить на два равных блока"
40,Mike's Copy of Benchmark Questions Verification V2.ipynb,93,Напишите функцию для вычисления значения «а» в степени «b».,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",[],"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления значения «а» в степени «b».","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления значения «а» в степени «b».

Примеры:

```
>>> power(2, 3)
8
>>> power(3, 2)
9
>>> power(10, 0)
1
```

<<SYS>>
def power(a, b):
    return a ** b
<</SYS>>

Напишите функцию для вычисления значения функции f(x) = 3x^2 + 2x - 1.

Примеры:

```
>>> f(3)
15
>>> f(-2"
41,Mike's Copy of Benchmark Questions Verification V2.ipynb,94,"Учитывая список кортежей, напишите функцию, которая возвращает первое значение кортежа с наименьшим вторым значением.","from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",[],"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Учитывая список кортежей, напишите функцию, которая возвращает первое значение кортежа с наименьшим вторым значением.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Учитывая список кортежей, напишите функцию, которая возвращает первое значение кортежа с наименьшим вторым значением.

Например, если список кортежей равен:

[('a', 1), ('b', 2), ('c', 3)]

то функция должна вернуть значение 'a'.

Если таких кортежей несколько, то функция должна вернуть первое попавшееся.

Напишите функцию, которая реализует эту логику.

Пример вызова функции:

>>> get_min_value([('a', 1), ('b', 2), ('c', 3)"
42,Mike's Copy of Benchmark Questions Verification V2.ipynb,95,"Напишите функцию Python, чтобы найти длину наименьшего списка в списке списков.","def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",[],"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти длину наименьшего списка в списке списков.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти длину наименьшего списка в списке списков.

Например, если у нас есть список списков:

[[1, 2, 3], [4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15, 16]]

Тогда длина наименьшего списка в этом списке списков равна 2.

Вот решение:

def find_shortest_list(list_of_lists):
    return min(len(l) for l in"
43,Mike's Copy of Benchmark Questions Verification V2.ipynb,96,"Напишите функцию Python, чтобы найти количество делителей заданного целого числа.","def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",[],"['assert divisor(15) == 4', 'assert divisor(12) == 6', 'assert divisor(9) == 3']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти количество делителей заданного целого числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти количество делителей заданного целого числа.

Пример:

>>> get_divisors(12)
6

>>> get_divisors(15)
4

>>> get_divisors(24)
8

>>> get_divisors(30)
6

>>> get_divisors(36)
12

>>> get_divisors(40)
8

>>> get_divisors(48)
12

>>> get_divisors(54)
12

>>> get_div"
44,Mike's Copy of Benchmark Questions Verification V2.ipynb,97,"Напишите функцию для поиска частоты каждого элемента в плоском списке списков, возвращаемом в словаре.","def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",[],"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска частоты каждого элемента в плоском списке списков, возвращаемом в словаре.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска частоты каждого элемента в плоском списке списков, возвращаемом в словаре.

Пример:

>>> find_frequency([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6]])
{1: 2, 2: 2, 3: 2, 4: 2, 5: 2, 6: 2}

>>> find_frequency([[1, 2, 3], [4, 5, 6], [1, 2, 3], [4, 5, 6], [1,"
45,Mike's Copy of Benchmark Questions Verification V2.ipynb,98,Напишите функцию для умножения всех чисел в списке и деления на длину списка.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",['import math'],"['assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)', 'assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)', 'assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для умножения всех чисел в списке и деления на длину списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для умножения всех чисел в списке и деления на длину списка.

Пример:

>>> multiply_list([1, 2, 3])
6

>>> multiply_list([1, 2, 3, 4])
24

>>> multiply_list([1, 2, 3, 4, 5])
120

>>> multiply_list([1, 2, 3, 4, 5, 6])
720

>>> multiply_list([1, 2, 3, 4, 5, 6, 7])
5040

"
46,Mike's Copy of Benchmark Questions Verification V2.ipynb,99,"Напишите функцию для преобразования данного десятичного числа в его двоичный эквивалент, представленный в виде строки без ведущих нулей.","def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",[],"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования данного десятичного числа в его двоичный эквивалент, представленный в виде строки без ведущих нулей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования данного десятичного числа в его двоичный эквивалент, представленный в виде строки без ведущих нулей.

Примеры:

>>> decimal_to_binary(1)
'1'
>>> decimal_to_binary(2)
'10'
>>> decimal_to_binary(3)
'11'
>>> decimal_to_binary(4)
'100'
>>> decimal_to_binary(5)
'101'
>>> decimal_to_binary(6)
'110'
>>> decimal_to_binary(7)
'111'
>>> decimal_to_binary(8)
'"
47,Mike's Copy of Benchmark Questions Verification V2.ipynb,100,"Напишите функцию для поиска следующего наименьшего палиндрома указанного целого числа, возвращаемого в виде целого числа.","import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",[],"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска следующего наименьшего палиндрома указанного целого числа, возвращаемого в виде целого числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска следующего наименьшего палиндрома указанного целого числа, возвращаемого в виде целого числа.

Примеры:

next_palindrome(121) -> 133
next_palindrome(133) -> 144
next_palindrome(144) -> 155
next_palindrome(155) -> 166
next_palindrome(166) -> 177
next_palindrome(177) -> 188
next_palindrome(188) -> 199
next_palindrome(199) -> 200"
48,Mike's Copy of Benchmark Questions Verification V2.ipynb,101,"Напишите функцию для поиска k-го элемента в заданном массиве, используя индексацию с отсчетом от 1.","def kth_element(arr, k):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",[],"['assert kth_element([12,3,5,7,19], 2) == 3', 'assert kth_element([17,24,8,23], 3) == 8', 'assert kth_element([16,21,25,36,4], 4) == 36']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска k-го элемента в заданном массиве, используя индексацию с отсчетом от 1.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска k-го элемента в заданном массиве, используя индексацию с отсчетом от 1.

Примеры:

```
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

print(find_kth_element(arr, 1))  # 1
print(find_kth_element(arr, 10))  # 10
print(find_kth_element(arr, 5))  # 5
```

Ваша функция должна работать за O(n) и использовать только O(1) памяти.

Важно"
49,Mike's Copy of Benchmark Questions Verification V2.ipynb,102,Напишите функцию для преобразования строки регистра змеи в строку регистра верблюда.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования строки регистра змеи в строку регистра верблюда.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования строки регистра змеи в строку регистра верблюда.

Примеры:

>>> snake_to_camel(""hello_world"")
""helloWorld""
>>> snake_to_camel(""hello_world_test"")
""helloWorldTest""
>>> snake_to_camel(""hello_world_test_case"")
""helloWorldTestCase""

Примеры использования:

>>> snake_to_camel(""hello_world"")
""helloWorld""
>>> snake_to_camel(""hello_world_test"")
""helloWorldTest""
>>> snake_to_"
50,Mike's Copy of Benchmark Questions Verification V2.ipynb,103,"Напишите функцию для нахождения эйлерова числа a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",[],"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения эйлерова числа a(n, m).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения эйлерова числа a(n, m).

Функция должна принимать на вход два целых числа n и m и возвращать целое число.

Если n и m равны 0, то функция должна возвращать 1.

Если n равно 0, а m больше 0, то функция должна возвращать 0.

Если n больше 0, а m равно 0, то функция должна возвращать 1.

Если n и m больше 0, то функция должна возвраща"
51,Mike's Copy of Benchmark Questions Verification V2.ipynb,104,Напишите функцию для сортировки каждого подсписка строк в заданном списке списков.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
",[],"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки каждого подсписка строк в заданном списке списков.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки каждого подсписка строк в заданном списке списков.

Пример:

>>> sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']])
[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]

>>> sort_sublists([['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']], key=len)
[['a', 'b', 'c'], ['g', 'h', 'i'], ['d', '"
52,Mike's Copy of Benchmark Questions Verification V2.ipynb,105,Напишите функцию Python для подсчета истинных логических значений в данном списке.,"def count(lst):   
    return sum(lst) ",[],"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета истинных логических значений в данном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета истинных логических значений в данном списке.

```
list = [True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False, True, False"
53,Mike's Copy of Benchmark Questions Verification V2.ipynb,106,Напишите функцию для добавления заданного списка к заданным кортежам.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",[],"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для добавления заданного списка к заданным кортежам.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для добавления заданного списка к заданным кортежам.

Пример:

>>> add_to_tuple((1, 2, 3), (4, 5, 6))
(1, 2, 3, 4, 5, 6)

>>> add_to_tuple((1, 2, 3), (4, 5, 6), (7, 8, 9))
(1, 2, 3, 4, 5, 6, 7, 8, 9)

>>> add_to_tuple((1, 2, 3), (4, "
54,Mike's Copy of Benchmark Questions Verification V2.ipynb,108,Напишите функцию для объединения трех списков в один отсортированный список.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",[],"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения трех списков в один отсортированный список.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения трех списков в один отсортированный список.

Примеры:

>>> merge_lists([1, 2, 3], [4, 5, 6], [7, 8, 9])
[1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> merge_lists([1, 2, 3], [4, 5, 6], [7, 8])
[1, 2, 3, 4, 5, 6, 7, 8]

>>> merge_lists([1, 2,"
55,Mike's Copy of Benchmark Questions Verification V2.ipynb,109,"Напишите функцию Python, чтобы найти количество чисел с нечетным значением при вращении двоичной строки заданное количество раз.","def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",[],"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти количество чисел с нечетным значением при вращении двоичной строки заданное количество раз.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти количество чисел с нечетным значением при вращении двоичной строки заданное количество раз.

Пример:

Входные данные:

10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010"
56,Mike's Copy of Benchmark Questions Verification V2.ipynb,111,Напишите функцию для поиска общих элементов в заданных вложенных списках.,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",[],"['assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])', 'assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])', 'assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска общих элементов в заданных вложенных списках.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска общих элементов в заданных вложенных списках.

Примеры:

>>> find_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[]

>>> find_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 2, 3]])
[1, 2, 3]

>>> find_common_elements([[1, 2, 3], [4, 5, 6], [7, 8, 9"
57,Mike's Copy of Benchmark Questions Verification V2.ipynb,113,"Напишите функцию, проверяющую, представляет ли строка целое число или нет.","def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",[],"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, представляет ли строка целое число или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, представляет ли строка целое число или нет.

Примеры:

```python
>>> is_integer('123')
True
>>> is_integer('123.45')
False
>>> is_integer('123a45')
False
```

<<SYS>>
def is_integer(s):
    try:
        int(s)
        return True
    except ValueError:
        return False
<</SYS>>

Напишите функцию, которая принимает на вход список чисел и возвращает список,
содержащий только уника"
58,Mike's Copy of Benchmark Questions Verification V2.ipynb,115,"Напишите функцию, проверяющую, все ли словари в списке пусты или нет.","def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",[],"['assert empty_dit([{},{},{}])==True', 'assert empty_dit([{1,2},{},{}])==False', 'assert empty_dit({})==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, все ли словари в списке пусты или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, все ли словари в списке пусты или нет.

Примеры:

>>> check_empty_dicts([{'a': 1}, {'b': 2}])
False
>>> check_empty_dicts([{}, {}])
True
>>> check_empty_dicts([])
True

Примеры использования:

>>> if check_empty_dicts(my_list):
...     print('Все словари пусты')

>>> if not check_empty_dicts(my_list):
...     print('Не все словари пусты')

>>> if check_empty_"
59,Mike's Copy of Benchmark Questions Verification V2.ipynb,116,Напишите функцию для преобразования заданного кортежа положительных целых чисел в одно целое число.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",[],"['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования заданного кортежа положительных целых чисел в одно целое число.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования заданного кортежа положительных целых чисел в одно целое число.

Например, если задан кортеж (1, 2, 3), то функция должна вернуть 123.

Примеры:

>>> tuple_to_int((1, 2, 3))
123
>>> tuple_to_int((1, 2, 3, 4))
1234
>>> tuple_to_int((1, 2, 3, 4, 5))
12345
>>> tuple_to_int((1, 2, 3, 4, 5"
60,Mike's Copy of Benchmark Questions Verification V2.ipynb,117,Напишите функцию для преобразования всех возможных конвертируемых элементов в списке списков в числа с плавающей запятой.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return res",[],"['assert list_to_float( [(""3"", ""4""), (""1"", ""26.45""), (""7.32"", ""8""), (""4"", ""8"")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]', 'assert list_to_float( [(""4"", ""4""), (""2"", ""27""), (""4.12"", ""9""), (""7"", ""11"")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]', 'assert list_to_float( [(""6"", ""78""), (""5"", ""26.45""), (""1.33"", ""4""), (""82"", ""13"")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования всех возможных конвертируемых элементов в списке списков в числа с плавающей запятой.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования всех возможных конвертируемых элементов в списке списков в числа с плавающей запятой.

Примеры:

>>> convert_to_float([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]

>>> convert_to_float([['1', '2', '3'], ['4', '5', '6'], ['7', '8', '9']])
[[1.0, 2.0"
61,Mike's Copy of Benchmark Questions Verification V2.ipynb,118,"Напишите функцию для преобразования строки в список строк, разделенных на пробел.","def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",[],"['assert string_to_list(""python programming"")==[\'python\',\'programming\']', 'assert string_to_list(""lists tuples strings"")==[\'lists\',\'tuples\',\'strings\']', 'assert string_to_list(""write a program"")==[\'write\',\'a\',\'program\']']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования строки в список строк, разделенных на пробел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования строки в список строк, разделенных на пробел.

Примеры:

>>> split_string("""")
[]
>>> split_string(""a b c"")
[""a"", ""b"", ""c""]
>>> split_string(""a b c d"")
[""a"", ""b"", ""c"", ""d""]
>>> split_string(""a b c d e"")
[""a"", ""b"", ""c"", ""d"", ""e""]

<<SYS>>
def split_string(string):
    return string.split()
<</SYS>>

Напишите функцию для преобразования строки в с"
62,Mike's Copy of Benchmark Questions Verification V2.ipynb,119,"Напишите функцию Python, чтобы найти элемент, который появляется в отсортированном массиве только один раз.","def search(arr):
    n = len(arr)
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",[],"['assert search([1,1,2,2,3]) == 3', 'assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8', 'assert search([1,2,2,3,3,4,4]) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти элемент, который появляется в отсортированном массиве только один раз.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти элемент, который появляется в отсортированном массиве только один раз.

Например, если массив содержит элементы [1, 2, 3, 4, 5, 5, 6, 6], то функция должна вернуть 4.

Если массив содержит элементы [1, 1, 2, 2, 3, 3, 4, 4, 5, 5], то функция должна вернуть 6.

Если массив содержит элементы [1, 2, 3, 4, 5, 6], то"
63,Mike's Copy of Benchmark Questions Verification V2.ipynb,120,Напишите функцию для поиска максимального абсолютного произведения чисел в парах кортежей в заданном списке.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",[],"['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимального абсолютного произведения чисел в парах кортежей в заданном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимального абсолютного произведения чисел в парах кортежей в заданном списке.

Примеры:

>>> max_abs_product([(1, 2), (3, 4), (5, 6)])
12
>>> max_abs_product([(1, 2), (3, 4), (5, 6), (7, 8)])
24
>>> max_abs_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)])
48

>>> max_abs_product([(1, 2), (3"
64,Mike's Copy of Benchmark Questions Verification V2.ipynb,123,Напишите функцию для суммирования всех дружественных чисел от 1 до заданного числа.,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",[],"['assert amicable_numbers_sum(999)==504', 'assert amicable_numbers_sum(9999)==31626', 'assert amicable_numbers_sum(99)==0']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для суммирования всех дружественных чисел от 1 до заданного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для суммирования всех дружественных чисел от 1 до заданного числа.

Пример:

>>> sum_of_friendly_numbers(10)
18

>>> sum_of_friendly_numbers(100)
1000

>>> sum_of_friendly_numbers(1000)
10000

>>> sum_of_friendly_numbers(10000)
100000

>>> sum_of_friendly_numbers(100000)
1000000

>>> sum_of_friendly_numbers(1"
65,Mike's Copy of Benchmark Questions Verification V2.ipynb,124,Напишите функцию для получения угла комплексного числа.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",['import math'],"['assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)', 'assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)', 'assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для получения угла комплексного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для получения угла комплексного числа.

>>> get_angle(1+2j)
0.9272952180016122

>>> get_angle(1-2j)
2.292473750272108

>>> get_angle(1+0j)
0.0

>>> get_angle(1-0j)
0.0

>>> get_angle(0+0j)
0.0

>>> get_angle(0+1j)
1.570796326"
66,Mike's Copy of Benchmark Questions Verification V2.ipynb,125,"Напишите функцию, которая находит максимальную разницу между количеством нулей и единиц в любой подстроке данной двоичной строки.","def find_length(string): 
	n = len(string)
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",[],"['assert find_length(""11000010001"") == 6', 'assert find_length(""10111"") == 1', 'assert find_length(""11011101100101"") == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит максимальную разницу между количеством нулей и единиц в любой подстроке данной двоичной строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит максимальную разницу между количеством нулей и единиц в любой подстроке данной двоичной строки.

Например, для строки 010010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101"
67,Mike's Copy of Benchmark Questions Verification V2.ipynb,126,"Напишите функцию Python, чтобы найти сумму общих делителей двух заданных чисел.","def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",[],"['assert sum(10,15) == 6', 'assert sum(100,150) == 93', 'assert sum(4,6) == 3']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму общих делителей двух заданных чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму общих делителей двух заданных чисел.

Примеры:

1. 12 и 18: 6 + 3 = 9
2. 25 и 100: 5 + 2 + 1 = 8

Ваша функция должна принимать два параметра: a и b, и возвращать сумму общих делителей.

Примеры использования:

>>> sum_common_divisors(12, 18)
9
>>> sum_common_divisors(25, 100)
8

>>"
68,Mike's Copy of Benchmark Questions Verification V2.ipynb,127,Напишите функцию умножения двух целых чисел.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",[],"['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию умножения двух целых чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию умножения двух целых чисел.

>>> multiply(2, 3)
6

>>> multiply(10, 5)
50

>>> multiply(100, 100)
10000

>>> multiply(1000, 1000)
1000000

>>> multiply(10000, 10000)
100000000

>>> multiply(100000, 100000)
10000000000

>>"
69,Mike's Copy of Benchmark Questions Verification V2.ipynb,128,Напишите функцию для поиска слов длиной более n символов из заданного списка слов.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",[],"['assert long_words(3,""python is a programming language"")==[\'python\',\'programming\',\'language\']', 'assert long_words(2,""writing a program"")==[\'writing\',\'program\']', 'assert long_words(5,""sorting list"")==[\'sorting\']']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска слов длиной более n символов из заданного списка слов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска слов длиной более n символов из заданного списка слов.

Примеры:

find_words([""hello"", ""world"", ""python"", ""java"", ""kotlin""], 3) == [""hello"", ""world"", ""python""]
find_words([""hello"", ""world"", ""python"", ""java"", ""kotlin""], 4) == [""hello"", ""world"", ""python"", ""java""]
find_words([""hello"", ""world"", ""python"", ""java"", ""kotlin""], 5) == [""hello"", ""world"", ""python"", ""java"", ""kotlin""]

Примеры:

def find_words(words, n):
    return [word"
70,Mike's Copy of Benchmark Questions Verification V2.ipynb,129,"Напишите функцию, определяющую, является ли матрица магическим квадратом.","def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",[],"['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, является ли матрица магическим квадратом.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, является ли матрица магическим квадратом.

Примеры:

* [[4, 8, 2], [4, 5, 7], [6, 1, 6]] - магический квадрат
* [[4, 8, 2], [4, 5, 7], [6, 1, 1]] - не магический квадрат

Функция должна принимать на вход список списков, где каждый список - это строка матрицы.

Вы можете использовать функцию `sum`, чтобы посчитать сумму элемен"
71,Mike's Copy of Benchmark Questions Verification V2.ipynb,130,Напишите функцию для поиска элемента с максимальной частотой в заданном списке.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]",[],"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска элемента с максимальной частотой в заданном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска элемента с максимальной частотой в заданном списке.

Примеры:

```python
max_frequency([1, 2, 3, 1, 2, 3]) == 3
max_frequency([1, 2, 2, 3, 1]) == 2
max_frequency([1, 1, 1, 1, 1]) == 1
```

Ваша функция должна работать за линейное время.

Ваша функция должна быть реализована с использованием только следующих конструкций:

* `for`
* `if`
*"
72,Mike's Copy of Benchmark Questions Verification V2.ipynb,131,"Напишите функцию Python, которая переворачивает только гласные в заданной строке (где y не является гласной).","def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",[],"['assert reverse_vowels(""Python"") == ""Python""', 'assert reverse_vowels(""USA"") == ""ASU""', 'assert reverse_vowels(""ab"") == ""ab""']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая переворачивает только гласные в заданной строке (где y не является гласной).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая переворачивает только гласные в заданной строке (где y не является гласной).

Примеры:

reverse_vowels(""hello"") -> ""hlllo""
reverse_vowels(""aeiou"") -> ""aeiou""
reverse_vowels(""hello world"") -> ""hlllo wrld""

Примечание:

В этой задаче нет необходимости использовать регулярные выражения.

В этой задаче нет необходимости использовать регулярные выражения.

В этой задаче нет необходимости использовать регулярные выражения.

В этой задаче нет необходи"
73,Mike's Copy of Benchmark Questions Verification V2.ipynb,132,Напишите функцию для преобразования кортежа в строку.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",[],"['assert tup_string((\'e\', \'x\', \'e\', \'r\', \'c\', \'i\', \'s\', \'e\', \'s\'))==(""exercises"")', 'assert tup_string((\'p\',\'y\',\'t\',\'h\',\'o\',\'n\'))==(""python"")', 'assert tup_string((\'p\',\'r\',\'o\',\'g\',\'r\',\'a\',\'m\'))==(""program"")']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования кортежа в строку.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования кортежа в строку.

>>> tuple_to_string((1, 2, 3))
'1, 2, 3'

>>> tuple_to_string(())
''

>>> tuple_to_string((1,))
'1'

>>> tuple_to_string((1, 2, 3, 4, 5, 6, 7, 8, 9, 10))
'1, 2, 3, 4, 5, 6, 7, 8, 9, 10'

>>> tuple_to_string"
74,Mike's Copy of Benchmark Questions Verification V2.ipynb,133,Напишите функцию для вычисления суммы отрицательных чисел заданного списка чисел.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",[],"['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы отрицательных чисел заданного списка чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы отрицательных чисел заданного списка чисел.

Примеры:

>>> sum_negative([1, 2, 3, 4, 5])
0
>>> sum_negative([-1, 2, -3, 4, -5])
-9
>>> sum_negative([-1, -2, -3, -4, -5])
-15

>>> sum_negative([])
0

>>> sum_negative([1, -2, 3, -4, 5, -6])
-9

>>> sum_negative([-1, -2, -3, -"
75,Mike's Copy of Benchmark Questions Verification V2.ipynb,135,Напишите функцию для нахождения n-го шестиугольного числа.,"def hexagonal_num(n): 
	return n*(2*n - 1) ",[],"['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го шестиугольного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го шестиугольного числа.

Примеры:

>>> n_sixth_triangle_number(1)
1
>>> n_sixth_triangle_number(2)
3
>>> n_sixth_triangle_number(3)
6
>>> n_sixth_triangle_number(4)
10
>>> n_sixth_triangle_number(5)
15
>>> n_sixth_triangle_number(6)
21
>>> n_sixth_triangle_number(7)
28
>>> n_sixth_triangle_number(8)
"
76,Mike's Copy of Benchmark Questions Verification V2.ipynb,137,"Напишите функцию, которая находит отношение нулей к ненулевым числам в массиве целых чисел.","from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return n1/(n-n1)",['import math'],"['assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит отношение нулей к ненулевым числам в массиве целых чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит отношение нулей к ненулевым числам в массиве целых чисел.

Пример:

```python
arr = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
print(find_ratio(arr))
# Output: 0.1
```

Вот решение:

```python
def find_ratio(arr):
    count_zeros = 0
    count_non_zeros = 0
    for num in arr:
        if num == 0:
            count_zeros += 1
        else:
            count_non_zer"
77,Mike's Copy of Benchmark Questions Verification V2.ipynb,138,"Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как сумма ненулевых степеней 2 или нет.","def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",[],"['assert is_Sum_Of_Powers_Of_Two(10) == True', 'assert is_Sum_Of_Powers_Of_Two(7) == False', 'assert is_Sum_Of_Powers_Of_Two(14) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как сумма ненулевых степеней 2 или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как сумма ненулевых степеней 2 или нет.

Например, 10 = 2^3 + 2^1, так что функция должна вернуть True для 10.

Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как сумма ненулевых степеней 2 или нет.

Например, 10 = 2^3 + 2^1, так что функция должна вернуть True для 10.

Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как сумма нен"
78,Mike's Copy of Benchmark Questions Verification V2.ipynb,139,Напишите функцию для нахождения длины окружности.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",['import math'],"['assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)', 'assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)', 'assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения длины окружности.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения длины окружности.

Функция должна принимать один параметр - радиус окружности.

Выведите результат в консоль.

Пример вызова функции:

>>> get_circle_length(5)
31.41592653589793

>>> get_circle_length(10)
62.83185307179586

>>> get_circle_length(15)
93.92340392414207

"
79,Mike's Copy of Benchmark Questions Verification V2.ipynb,140,"Напишите функцию, которая объединит список списков в один набор чисел.","def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",[],"['assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])', 'assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])', 'assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая объединит список списков в один набор чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая объединит список списков в один набор чисел.

Пример:

>>> merge_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[1, 2, 3, 4, 5, 6, 7, 8, 9]

>>> merge_lists([])
[]

>>> merge_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
[1, 2, 3, 4"
80,Mike's Copy of Benchmark Questions Verification V2.ipynb,141,Напишите функцию для сортировки списка элементов.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",[],"['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки списка элементов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки списка элементов.

Примеры:

>>> sort([1, 2, 3, 4, 5])
[1, 2, 3, 4, 5]

>>> sort([5, 4, 3, 2, 1])
[1, 2, 3, 4, 5]

>>> sort([3, 2, 1, 5, 4])
[1, 2, 3, 4, 5]

>>> sort"
81,Mike's Copy of Benchmark Questions Verification V2.ipynb,142,"Напишите функцию для подсчета количества элементов, одинаковых в одной и той же позиции в трех заданных списках.","def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",[],"['assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3', 'assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4', 'assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества элементов, одинаковых в одной и той же позиции в трех заданных списках.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества элементов, одинаковых в одной и той же позиции в трех заданных списках.

Например, если заданы списки:

a = [1, 2, 3]
b = [2, 3, 4]
c = [3, 4, 5]

то функция должна вернуть 2, потому что в первом и третьем списке элементы идут в одинаковой последовательности.

Ваша функция должна быть реализована в виде функции с именем count_equal_elements, которая при"
82,Mike's Copy of Benchmark Questions Verification V2.ipynb,143,"Напишите функцию для определения количества списков, присутствующих в данном кортеже.","def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",[],"['assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2', 'assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3', 'assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения количества списков, присутствующих в данном кортеже.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения количества списков, присутствующих в данном кортеже.

>>> count_lists((1, 2, 3), (4, 5, 6), (7, 8, 9))
3

>>> count_lists((1, 2, 3), (4, 5, 6), (7, 8, 9), (10, 11, 12))
4

>>> count_lists((1, 2, 3), (4, 5, 6), (7, 8, 9), (1"
83,Mike's Copy of Benchmark Questions Verification V2.ipynb,145,"Напишите функцию Python, чтобы найти максимальную разницу между любыми двумя элементами в заданном массиве.","def max_Abs_Diff(arr): 
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",[],"['assert max_Abs_Diff((2,1,5,3)) == 4', 'assert max_Abs_Diff((9,3,2,5,1)) == 8', 'assert max_Abs_Diff((3,2,1)) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти максимальную разницу между любыми двумя элементами в заданном массиве.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти максимальную разницу между любыми двумя элементами в заданном массиве.

Пример:

Вход: [1, 2, 3, 4, 5]

Выход: 4

Вход: [1, 2, 3, 4, 5, 6]

Выход: 5

Вход: [1, 2, 3, 4, 5, 6, 7]

Выход: 6

Вход: [1, 2, 3, 4, 5, "
84,Benchmark Questions Verification V2.ipynb,160,"Напишите функцию, которая возвращает целые числа x и y, удовлетворяющие условиям ax + by = n, в виде кортежа, или возвращает None, если решения не существует.","def find_solution(a, b, n):
	i = 0
	while i * a <= n:
		if (n - (i * a)) % b == 0: 
			return (i, (n - (i * a)) // b)
		i = i + 1
	return None",[],"['assert find_solution(2, 3, 7) == (2, 1)', 'assert find_solution(4, 2, 7) == None', 'assert find_solution(1, 13, 17) == (4, 1)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая возвращает целые числа x и y, удовлетворяющие условиям ax + by = n, в виде кортежа, или возвращает None, если решения не существует.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая возвращает целые числа x и y, удовлетворяющие условиям ax + by = n, в виде кортежа, или возвращает None, если решения не существует.

Примеры:

>>> solve(2, 3, 6)
(1, 2)
>>> solve(2, 3, 7)
None
>>> solve(2, 3, 8)
(2, 3)
>>> solve(2, 3, 9)
None

>>> solve(2, 3, 10)
(3, 4)
>>> solve(2, 3, 11)
None
>>> solve"
85,Benchmark Questions Verification V2.ipynb,161,"Напишите функцию для удаления всех элементов из данного списка, присутствующих в другом списке.","def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",[],"['assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления всех элементов из данного списка, присутствующих в другом списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления всех элементов из данного списка, присутствующих в другом списке.

Например, если список состоит из элементов 1, 2, 3, 4, а второй список содержит элементы 3 и 4, то после удаления функция должна вернуть список, содержащий элементы 1, 2.

При решении этой задачи нельзя использовать функции filter(), map(), reduce() и т.д.

Ваша функция должна быть реализована в виде обычной функции, а"
86,Benchmark Questions Verification V2.ipynb,162,"Напишите функцию для вычисления суммы (n - 2*i) от i=0 до n // 2, например n + (n-2) + (n-4)... (пока nx =&lt; 0).","def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",[],"['assert sum_series(6) == 12', 'assert sum_series(10) == 30', 'assert sum_series(9) == 25']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы (n - 2*i) от i=0 до n // 2, например n + (n-2) + (n-4)... (пока nx =&lt; 0).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы (n - 2*i) от i=0 до n // 2, например n + (n-2) + (n-4)... (пока nx =&lt; 0).

Вызовите функцию с параметром n = 10 и выведите результат.

Вызовите функцию с параметром n = 100 и выведите результат.

Вызовите функцию с параметром n = 1000 и выведите результат.

Вызовите функцию с параметром n = 10000 и выведите результат.

Вызовите функцию с"
87,Benchmark Questions Verification V2.ipynb,163,"Напишите функцию, вычисляющую площадь правильного многоугольника по длине и числу его сторон.","from math import tan, pi
def area_polygon(s, l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",['import math'],"['assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)', 'assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)', 'assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, вычисляющую площадь правильного многоугольника по длине и числу его сторон.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, вычисляющую площадь правильного многоугольника по длине и числу его сторон.

Примеры:

>>> polygon_area(3, 2)
6.0
>>> polygon_area(5, 4)
20.0

>>> polygon_area(1, 1)
1.0
>>> polygon_area(1, 2)
1.0
>>> polygon_area(1, 3)
1.0

>>> polygon_area(1, 1000000)
1.0

>>> polygon_area"
88,Benchmark Questions Verification V2.ipynb,164,"Напишите функцию, определяющую, равна ли сумма делителей двух целых чисел.","import math 
def div_sum(n): 
  total = 1
  i = 2

  while i * i <= n:
    if (n % i == 0):
      total = (total + i + math.floor(n / i))
    i += 1

  return total

def are_equivalent(num1, num2): 
    return div_sum(num1) == div_sum(num2); ",[],"['assert are_equivalent(36, 57) == False', 'assert are_equivalent(2, 4) == False', 'assert are_equivalent(23, 47) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, равна ли сумма делителей двух целых чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую, равна ли сумма делителей двух целых чисел.

Примеры:

>>> sum_of_divisors(12, 12)
True
>>> sum_of_divisors(12, 13)
False
>>> sum_of_divisors(12, 24)
True
>>> sum_of_divisors(12, 25)
False

Примечание:

* В примерах используются целые числа, но функция должна работать с лю"
89,Benchmark Questions Verification V2.ipynb,165,"Напишите функцию для подсчета количества символов в строке, которые встречаются в той же позиции в строке, что и в английском алфавите (регистронезависимо).","def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",[],"['assert count_char_position(""xbcefg"") == 2', 'assert count_char_position(""ABcED"") == 3', 'assert count_char_position(""AbgdeF"") == 5']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества символов в строке, которые встречаются в той же позиции в строке, что и в английском алфавите (регистронезависимо).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества символов в строке, которые встречаются в той же позиции в строке, что и в английском алфавите (регистронезависимо).

Например, для строки ""abAB"" функция должна вернуть 2, потому что символы ""A"" и ""B"" встречаются в строке в том же регистре, что и в алфавите.

Ваша функция должна быть реализована в виде модуля, который можно будет импортировать в другие скрипты.

Ваша функция должна иметь следующий интерфейс:

def count_english_letters"
90,Benchmark Questions Verification V2.ipynb,166,"Напишите функцию, которая подсчитывает количество пар целых чисел в списке, которые выполняют xor до четного числа.","def find_even_pair(A): 
  count = 0
  for i in range(0, len(A)): 
    for j in range(i+1, len(A)): 
        if ((A[i] ^ A[j]) % 2 == 0): 
          count += 1

  return count",[],"['assert find_even_pair([5, 4, 7, 2, 1]) == 4', 'assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9', 'assert find_even_pair([1, 2, 3]) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая подсчитывает количество пар целых чисел в списке, которые выполняют xor до четного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая подсчитывает количество пар целых чисел в списке, которые выполняют xor до четного числа.

Пример:

>>> count_xor_even([1, 2, 3, 4, 5, 6])
2

>>> count_xor_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
3

>>> count_xor_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10,"
91,Benchmark Questions Verification V2.ipynb,167,"Напишите функцию Python, чтобы найти наименьшую степень 2, большую или равную n.","def next_power_of_2(n): 
  if n and not n & (n - 1):
    return n

  count = 0
  while n != 0: 
    n >>= 1
    count += 1

  return 1 << count; ",[],"['assert next_power_of_2(0) == 1', 'assert next_power_of_2(5) == 8', 'assert next_power_of_2(17) == 32']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наименьшую степень 2, большую или равную n.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наименьшую степень 2, большую или равную n.

Например, если n равен 10, то функция должна вернуть 8.

Если n равен 15, то функция должна вернуть 16.

Если n равен 17, то функция должна вернуть 32.

Если n равен 100, то функция должна вернуть 64.

Если n равен 1000, то функция должна вернуть 1024.

Е"
92,Benchmark Questions Verification V2.ipynb,168,Напишите функцию для подсчета количества вхождений числа в заданный список.,"def frequency(a,x): 
    count = 0  
    for i in a: 
      if i == x: 
        count += 1

    return count ",[],"['assert frequency([1,2,3], 4) == 0', 'assert frequency([1,2,2,3,3,3,4], 3) == 3', 'assert frequency([0,1,2,3,1,2], 1) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества вхождений числа в заданный список.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества вхождений числа в заданный список.

Примеры:

>>> count_numbers([1, 2, 3, 4, 5], 3)
1
>>> count_numbers([1, 2, 3, 4, 5], 6)
0
>>> count_numbers([1, 2, 3, 4, 5], 1)
1
>>> count_numbers([1, 2, 3, 4, 5], 2)
1
>>> count_numbers([1"
93,Benchmark Questions Verification V2.ipynb,170,"Напишите функцию для поиска суммы чисел в списке в диапазоне, заданном двумя индексами.","def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",[],"['assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска суммы чисел в списке в диапазоне, заданном двумя индексами.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска суммы чисел в списке в диапазоне, заданном двумя индексами.

Примеры:

```python
>>> find_sum([1, 2, 3, 4, 5], 0, 4)
15
>>> find_sum([1, 2, 3, 4, 5], 1, 3)
9
>>> find_sum([1, 2, 3, 4, 5], 2, 2)
5
>>> find_sum([1, 2, 3, 4, 5],"
94,Benchmark Questions Verification V2.ipynb,171,"Напишите функцию, позволяющую найти периметр правильного пятиугольника по длинам его сторон.","import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",[],"['assert perimeter_pentagon(5) == 25', 'assert perimeter_pentagon(10) == 50', 'assert perimeter_pentagon(15) == 75']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти периметр правильного пятиугольника по длинам его сторон.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти периметр правильного пятиугольника по длинам его сторон.

Функция должна принимать на вход длины сторон и выдавать на выходе периметр.

Примеры использования:

>>> find_perimeter(3, 4, 5, 4, 3)
18
>>> find_perimeter(1, 1, 1, 1, 1)
5
>>> find_perimeter(2, 2, 2, 2, 2)
10

Подсказ"
95,Benchmark Questions Verification V2.ipynb,172,Напишите функцию для подсчета количества вхождений строки «std» в заданную строку.,"def count_occurance(s):
  count = 0
  for i in range(len(s) - 2):
    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):
      count = count + 1
  return count",[],"['assert count_occurance(""letstdlenstdporstd"") == 3', 'assert count_occurance(""truststdsolensporsd"") == 1', 'assert count_occurance(""makestdsostdworthit"") == 2', 'assert count_occurance(""stds"") == 1', 'assert count_occurance("""") == 0']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества вхождений строки «std» в заданную строку.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества вхождений строки «std» в заданную строку.

Примеры:

```
>>> count_std(""std"")
1
>>> count_std(""std std"")
2
>>> count_std(""std std std"")
3
>>> count_std(""std std std std"")
4
```

<<SYS>>
def count_std(s):
    return s.count(""std"")
<</SYS>>

Напишите функцию для подсчета количества вхождений строки «std» в задан"
96,Benchmark Questions Verification V2.ipynb,222,"Напишите функцию, проверяющую, имеют ли все элементы в кортеже одинаковый тип данных или нет.","def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",[],"['assert check_type((5, 6, 7, 3, 5, 6) ) == True', 'assert check_type((1, 2, ""4"") ) == False', 'assert check_type((3, 2, 1, 4, 5) ) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, имеют ли все элементы в кортеже одинаковый тип данных или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, имеют ли все элементы в кортеже одинаковый тип данных или нет.

Примеры:

check_type((1, 2, 3)) -> True
check_type((1, 2, 3, 'a')) -> False
check_type((1, 2, 3, 4.5)) -> False
check_type((1, 2, 3, 4.5, 'a')) -> False

Вариан"
97,Benchmark Questions Verification V2.ipynb,223,"Напишите функцию, которая принимает отсортированный массив, его длину (n) и элемент и возвращает, является ли этот элемент основным элементом в данном отсортированном массиве. (Элемент большинства — это элемент, который встречается более n/2 раз.)","def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",[],"['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True', 'assert is_majority([1, 1, 2, 2], 5, 1) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает отсортированный массив, его длину (n) и элемент и возвращает, является ли этот элемент основным элементом в данном отсортированном массиве. (Элемент большинства — это элемент, который встречается более n/2 раз.)","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает отсортированный массив, его длину (n) и элемент и возвращает, является ли этот элемент основным элементом в данном отсортированном массиве. (Элемент большинства — это элемент, который встречается более n/2 раз.)

Примеры:

```
[1, 2, 3, 3, 3, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, "
98,Benchmark Questions Verification V2.ipynb,224,Напишите функцию Python для подсчета количества установленных битов (двоичных цифр со значением 1) в заданном числе.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",[],"['assert count_Set_Bits(2) == 1', 'assert count_Set_Bits(4) == 1', 'assert count_Set_Bits(6) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества установленных битов (двоичных цифр со значением 1) в заданном числе.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества установленных битов (двоичных цифр со значением 1) в заданном числе.

Примеры:

count_bits(0) == 0
count_bits(1) == 1
count_bits(2) == 1
count_bits(3) == 2
count_bits(4) == 1
count_bits(5) == 2
count_bits(6) == 2
count_bits(7) == 3
count"
99,Benchmark Questions Verification V2.ipynb,226,"Напишите функцию Python для удаления символов, которые имеют нечетные значения индекса данной строки.","def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",[],"[""assert odd_values_string('abcdef') == 'ace'"", ""assert odd_values_string('python') == 'pto'"", ""assert odd_values_string('data') == 'dt'"", ""assert odd_values_string('lambs') == 'lms'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для удаления символов, которые имеют нечетные значения индекса данной строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для удаления символов, которые имеют нечетные значения индекса данной строки.

Пример:

>>> remove_odd_indexed_chars('abcdefghijklmnopqrstuvwxyz')
'bdfhjlnprtvwxyz'

>>> remove_odd_indexed_chars('')
''

>>> remove_odd_indexed_chars('a')
''

>>> remove_odd_index"
100,Benchmark Questions Verification V2.ipynb,227,"Напишите функцию, позволяющую найти минимум три числа.","def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",[],"['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти минимум три числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти минимум три числа.

>>> min3(1, 2, 3)
1
>>> min3(1, 2, 3, 4)
1
>>> min3(1, 2, 3, 4, 5)
1
>>> min3(1, 2, 3, 4, 5, 6)
1

>>> min3("
101,Benchmark Questions Verification V2.ipynb,228,"Напишите функцию Python, чтобы проверить, все ли биты в заданном диапазоне не установлены или нет.","def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",[],"['assert all_Bits_Set_In_The_Given_Range(4,1,2) == True', 'assert all_Bits_Set_In_The_Given_Range(17,2,4) == True', 'assert all_Bits_Set_In_The_Given_Range(39,4,6) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, все ли биты в заданном диапазоне не установлены или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, все ли биты в заданном диапазоне не установлены или нет.

Примеры:

>>> check_bits(0, 0)
True
>>> check_bits(0, 1)
False
>>> check_bits(0, 2)
False
>>> check_bits(0, 3)
False
>>> check_bits(0, 4)
False
>>> check_bits(0, 5)"
102,Benchmark Questions Verification V2.ipynb,229,"Напишите функцию, которая принимает массив и целое число n и переупорядочивает первые n элементов данного массива так, чтобы все отрицательные элементы появлялись перед положительными и где относительный порядок среди отрицательных и положительных элементов сохранялся.","def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",[],"['assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]', 'assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]', 'assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает массив и целое число n и переупорядочивает первые n элементов данного массива так, чтобы все отрицательные элементы появлялись перед положительными и где относительный порядок среди отрицательных и положительных элементов сохранялся.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает массив и целое число n и переупорядочивает первые n элементов данного массива так, чтобы все отрицательные элементы появлялись перед положительными и где относительный порядок среди отрицательных и положительных элементов сохранялся.

Например, для массива [-1, 2, -2, 3, 4, -5] и n = 3 результат будет [-1, -2, -5, 2, 3, 4].

Ваша функция должна работать за линейное время.

Примеры:

```
>>> rearrange([-1,"
103,Benchmark Questions Verification V2.ipynb,230,"Напишите функцию, которая принимает строку и символ, заменяет пробелы в строке символом и возвращает строку.","def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",[],"['assert replace_blank(""hello people"",\'@\')==(""hello@people"")', 'assert replace_blank(""python program language"",\'$\')==(""python$program$language"")', 'assert replace_blank(""blank space"",""-"")==(""blank-space"")']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает строку и символ, заменяет пробелы в строке символом и возвращает строку.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает строку и символ, заменяет пробелы в строке символом и возвращает строку.

Примеры:

>>> replace_spaces('hello world', '-')
'hello-world'

>>> replace_spaces('hello world', '+')
'hello+world'

>>> replace_spaces('hello world', '*')
'hello*world'

>>> replace_spaces('hello world', '?')
'hello?world'

>>>"
104,Benchmark Questions Verification V2.ipynb,232,"Напишите функцию, которая принимает список и целое число n и возвращает список, содержащий n крупнейших элементов из списка.","import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",[],"['assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и целое число n и возвращает список, содержащий n крупнейших элементов из списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и целое число n и возвращает список, содержащий n крупнейших элементов из списка.

Например, если список равен [1, 2, 3, 4, 5] и n равно 3, то функция должна вернуть [4, 3, 2].

Если в списке меньше n элементов, то функция должна вернуть весь список.

Если n меньше 1, то"
105,Benchmark Questions Verification V2.ipynb,233,Напишите функцию для нахождения площади боковой поверхности цилиндра.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",['import math'],"['assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади боковой поверхности цилиндра.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади боковой поверхности цилиндра.

Параметры функции:

* высота цилиндра (float)
* радиус цилиндра (float)

Функция должна возвращать значение площади боковой поверхности цилиндра (float).

Примеры использования:

>>> find_cylinder_side_area(10, 5)
31"
106,Benchmark Questions Verification V2.ipynb,234,"Напишите функцию, позволяющую найти объём куба по длине его стороны.","def volume_cube(l):
  volume = l * l * l
  return volume",[],"['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти объём куба по длине его стороны.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти объём куба по длине его стороны.

>>>cube_volume(3)
27

>>>cube_volume(4)
64

>>>cube_volume(5)
125

>>>cube_volume(6)
216

>>>cube_volume(7)
343

>>>cube_volume(8)
512

"
107,Benchmark Questions Verification V2.ipynb,235,Напишите функцию Python для установки всех четных бит заданного числа.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",[],"['assert even_bit_set_number(10) == 10', 'assert even_bit_set_number(20) == 30', 'assert even_bit_set_number(30) == 30']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для установки всех четных бит заданного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для установки всех четных бит заданного числа.

Пример:

>>> set_even_bits(0b1011)
0b1010

>>> set_even_bits(0b1010)
0b1010

>>> set_even_bits(0b10111010)
0b10111010

>>>"
108,Benchmark Questions Verification V2.ipynb,237,"Напишите функцию, которая принимает список кортежей и возвращает словарь, сопоставляющий каждый уникальный кортеж с количеством раз, когда он встречается в списке.","from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",[],"['assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}', 'assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}', 'assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список кортежей и возвращает словарь, сопоставляющий каждый уникальный кортеж с количеством раз, когда он встречается в списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список кортежей и возвращает словарь, сопоставляющий каждый уникальный кортеж с количеством раз, когда он встречается в списке.

Например, если входной список выглядит так:

[('a', 'b'), ('a', 'b'), ('a', 'c'), ('b', 'c')]

то функция должна вернуть словарь:

{'a': 3, 'b': 2, 'c': 2}

Ваша функция должна работать за"
109,Benchmark Questions Verification V2.ipynb,238,Напишите функцию Python для подсчета количества непустых подстрок данной строки.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",[],"['assert number_of_substrings(""abc"") == 6', 'assert number_of_substrings(""abcd"") == 10', 'assert number_of_substrings(""abcde"") == 15']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества непустых подстрок данной строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета количества непустых подстрок данной строки.

Пример:

>>> count_substrings('')
0
>>> count_substrings('a')
1
>>> count_substrings('ab')
2
>>> count_substrings('abc')
3
>>> count_substrings('abcd')
4
>>> count_substrings('abcde')
5

Пример решения:

"
110,Benchmark Questions Verification V2.ipynb,239,"Напишите функцию, которая принимает целые положительные числа m и n и находит количество возможных последовательностей длины n, таких, что каждый элемент является положительным целым числом и больше или равен удвоенному предыдущему элементу, но меньше или равен m.","def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",[],"['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает целые положительные числа m и n и находит количество возможных последовательностей длины n, таких, что каждый элемент является положительным целым числом и больше или равен удвоенному предыдущему элементу, но меньше или равен m.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает целые положительные числа m и n и находит количество возможных последовательностей длины n, таких, что каждый элемент является положительным целым числом и больше или равен удвоенному предыдущему элементу, но меньше или равен m.

Например, для m = 10 и n = 3, функция должна вернуть 4, так как существует 4 таких последовательности: (2, 4, 6), (2, 4, 8), (2, 6, 8), (4, 6, 8).

Напишите функцию, которая реализует э"
111,Benchmark Questions Verification V2.ipynb,240,"Напишите функцию, которая принимает два списка и заменяет последний элемент первого списка элементами второго списка.","def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",[],"['assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]', 'assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]', 'assert replace_list([""red"",""blue"",""green""],[""yellow""])==[""red"",""blue"",""yellow""]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два списка и заменяет последний элемент первого списка элементами второго списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два списка и заменяет последний элемент первого списка элементами второго списка.

Например, если у нас есть список:

```python
list1 = [1, 2, 3, 4, 5]
```

и список:

```python
list2 = [6, 7, 8]
```

то после выполнения функции `list1` будет равен `[1, 2, 3, "
112,Benchmark Questions Verification V2.ipynb,242,Напишите функцию для подсчета общего количества символов в строке.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",[],"['assert count_charac(""python programming"")==18', 'assert count_charac(""language"")==8', 'assert count_charac(""words"")==5']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета общего количества символов в строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета общего количества символов в строке.

>>> count_chars(""hello"")
5

>>> count_chars(""hello world"")
11

>>> count_chars("""")
0

>>> count_chars(""   "")
3

>>> count_chars(""   a   b   c   "")
9

>>> count_chars(""a  b  c"")
5

>>> count_chars(""a  b  c  "")
6

>>> count_ch"
113,Benchmark Questions Verification V2.ipynb,244,"Напишите функцию Python, чтобы найти следующий идеальный квадрат, больший заданного числа.","import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",[],"['assert next_Perfect_Square(35) == 36', 'assert next_Perfect_Square(6) == 9', 'assert next_Perfect_Square(9) == 16']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти следующий идеальный квадрат, больший заданного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти следующий идеальный квадрат, больший заданного числа.

Например, если ввести число 16, то функция должна вернуть 36.

Если ввести число 100, то функция должна вернуть 121.

Если ввести число 1000, то функция должна вернуть 1024.

Если ввести число 10000, то функция должна вернуть 10000.

Е"
114,Benchmark Questions Verification V2.ipynb,245,"Напишите функцию, которая принимает массив и находит максимальную сумму битонной подпоследовательности для данного массива, где последовательность является битонной, если она сначала увеличивается, а затем убывает.","def max_sum(arr): 
	MSIBS = arr[:] 
	for i in range(len(arr)): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, len(arr) + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",[],"['assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194', 'assert max_sum([80, 60, 30, 40, 20, 10]) == 210', 'assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает массив и находит максимальную сумму битонной подпоследовательности для данного массива, где последовательность является битонной, если она сначала увеличивается, а затем убывает.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает массив и находит максимальную сумму битонной подпоследовательности для данного массива, где последовательность является битонной, если она сначала увеличивается, а затем убывает.

Например, для массива [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] функция должна вернуть 40, так как максимальная сумма битонной подпоследовательности равна 40 (1+2+3+4+5+6+7+8+9+10).

Напишите функцию, которая принимает массив и находит"
115,Benchmark Questions Verification V2.ipynb,246,Напишите функцию для вычисления квадратных корней вавилонским методом.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",['import math'],"['assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления квадратных корней вавилонским методом.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления квадратных корней вавилонским методом.

Вавилонский метод - это метод решения квадратных уравнений, основанный на использовании квадратных корней.

Вавилонский метод состоит из следующих шагов:

1. Найти квадратный корень из числа, которое находится справа от знака ""="" в уравнении.
2. Умножить найденный корень на 2.
3. Вычесть из"
116,Benchmark Questions Verification V2.ipynb,247,"Напишите функцию, позволяющую найти длину самой длинной палиндромной подпоследовательности в заданной строке.","def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",[],"['assert lps(""TENS FOR TENS"") == 5', 'assert lps(""CARDIO FOR CARDS"") == 7', 'assert lps(""PART OF THE JOURNEY IS PART"") == 9']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти длину самой длинной палиндромной подпоследовательности в заданной строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти длину самой длинной палиндромной подпоследовательности в заданной строке.

Примеры:

```python
>>> longest_palindromic_subsequence(""racecar"")
""racecar""
>>> longest_palindromic_subsequence(""banana"")
""anana""
>>> longest_palindromic_subsequence(""level"")
""level""
```

Подсказка: решение можно реализовать за линейное время.

<<SYS>>
def longest_palindromic_subsequence(s"
117,Benchmark Questions Verification V2.ipynb,248,"Напишите функцию, которая принимает целое число n и вычисляет гармоническую сумму n-1.","def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",['import math'],"['assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает целое число n и вычисляет гармоническую сумму n-1.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает целое число n и вычисляет гармоническую сумму n-1.

Примеры:

harmonic_sum(1) == 1
harmonic_sum(2) == 3
harmonic_sum(3) == 6
harmonic_sum(4) == 10
harmonic_sum(5) == 15
harmonic_sum(6) == 21
harmonic_sum(7) == 28
harmonic_sum(8) == 36
harmonic_sum(9) == 45
"
118,Benchmark Questions Verification V2.ipynb,249,Напишите функцию для поиска пересечения двух массивов.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",[],"['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска пересечения двух массивов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска пересечения двух массивов.

Примеры:

```python
find_intersection([1, 2, 3], [4, 5, 6]) == []
find_intersection([1, 2, 3], [2, 3, 4]) == [2, 3]
find_intersection([1, 2, 3], [3, 4, 5]) == [3]
```

<<SYS>>
def find_intersection(arr1, arr2):"
119,Benchmark Questions Verification V2.ipynb,250,"Напишите функцию Python, которая принимает кортеж и элемент и подсчитывает появление элемента в кортеже.","def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",[],"['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает кортеж и элемент и подсчитывает появление элемента в кортеже.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает кортеж и элемент и подсчитывает появление элемента в кортеже.

Например:

```python
>>> count_element((1, 2, 3, 4, 5), 3)
1
>>> count_element((1, 2, 3, 4, 5), 6)
0
```

<<SYS>>
def count_element(tuple, element):
    return tuple.count(element)
<</SYS>>

Напишите функцию Python, которая принимает кортеж и эле"
120,Benchmark Questions Verification V2.ipynb,251,"Напишите функцию, которая принимает список и элемент, вставляет элемент перед каждым элементом в списке и возвращает результирующий список.","def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",[],"[""assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"", ""assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']"", ""assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и элемент, вставляет элемент перед каждым элементом в списке и возвращает результирующий список.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и элемент, вставляет элемент перед каждым элементом в списке и возвращает результирующий список.

Пример:

>>> insert_before([1, 2, 3], 0)
[0, 1, 0, 2, 0, 3]

>>> insert_before([], 0)
[]

>>> insert_before([1, 2, 3], 4)
[4, 1, 4, 2, 4, 3]

>>> insert_before([1, 2, 3], [4"
121,Benchmark Questions Verification V2.ipynb,252,Напишите функцию Python для преобразования комплексных чисел в полярные координаты.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",[],"['assert convert(1) == (1.0, 0.0)', 'assert convert(4) == (4.0,0.0)', 'assert convert(5) == (5.0,0.0)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для преобразования комплексных чисел в полярные координаты.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для преобразования комплексных чисел в полярные координаты.

Пример:

>>> complex_to_polar(1+2j)
(2.23606797749979, 1.1071487177940904)

>>> complex_to_polar(1-2j)
(2.23606797749979, -1.107148717794090"
122,Benchmark Questions Verification V2.ipynb,253,"Напишите функцию Python, которая возвращает количество целочисленных элементов в заданном списке.","def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",[],"[""assert count_integer([1,2,'abc',1.2]) == 2"", 'assert count_integer([1,2,3]) == 3', 'assert count_integer([1,1.2,4,5.1]) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая возвращает количество целочисленных элементов в заданном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая возвращает количество целочисленных элементов в заданном списке.

Примеры:

>>> count_integers([1, 2, 3, 4, 5])
5
>>> count_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
10
>>> count_integers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11"
123,Benchmark Questions Verification V2.ipynb,255,"Напишите функцию, которая принимает список длиной n, генерирует все комбинации (с повторением) элементов списка и возвращает список с кортежем для каждой комбинации.","from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
",[],"['assert combinations_colors( [""Red"",""Green"",""Blue""],1)==[(\'Red\',), (\'Green\',), (\'Blue\',)]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],2)==[(\'Red\', \'Red\'), (\'Red\', \'Green\'), (\'Red\', \'Blue\'), (\'Green\', \'Green\'), (\'Green\', \'Blue\'), (\'Blue\', \'Blue\')]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],3)==[(\'Red\', \'Red\', \'Red\'), (\'Red\', \'Red\', \'Green\'), (\'Red\', \'Red\', \'Blue\'), (\'Red\', \'Green\', \'Green\'), (\'Red\', \'Green\', \'Blue\'), (\'Red\', \'Blue\', \'Blue\'), (\'Green\', \'Green\', \'Green\'), (\'Green\', \'Green\', \'Blue\'), (\'Green\', \'Blue\', \'Blue\'), (\'Blue\', \'Blue\', \'Blue\')]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список длиной n, генерирует все комбинации (с повторением) элементов списка и возвращает список с кортежем для каждой комбинации.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список длиной n, генерирует все комбинации (с повторением) элементов списка и возвращает список с кортежем для каждой комбинации.

Например, если список содержит элементы [1, 2, 3], то функция должна вернуть список из 3^n кортежей:

[(1, 1, 1), (1, 1, 2), (1, 1, 3), (1, 2, 1), (1, 2, 2), (1, 2, 3), (1, 3, 1), (1, 3"
124,Benchmark Questions Verification V2.ipynb,256,"Напишите функцию Python, которая принимает неотрицательное число и возвращает количество простых чисел, меньше заданного неотрицательного числа.","def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",[],"['assert count_Primes_nums(5) == 2', 'assert count_Primes_nums(10) == 4', 'assert count_Primes_nums(100) == 25']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает неотрицательное число и возвращает количество простых чисел, меньше заданного неотрицательного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает неотрицательное число и возвращает количество простых чисел, меньше заданного неотрицательного числа.

Например, если заданное число равно 10, то функция должна вернуть 4, потому что 4 простых числа меньше 10: 2, 3, 5, 7.

Ваша функция должна быть реализована с использованием генераторов и функции is_prime.

Пример использования:

>>> count_primes(10)
4
>>> count_pr"
125,Benchmark Questions Verification V2.ipynb,257,"Напишите функцию, которая принимает два числа и возвращает кортеж со вторым числом, а затем с первым числом.","def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",[],"['assert swap_numbers(10,20)==(20,10)', 'assert swap_numbers(15,17)==(17,15)', 'assert swap_numbers(100,200)==(200,100)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два числа и возвращает кортеж со вторым числом, а затем с первым числом.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два числа и возвращает кортеж со вторым числом, а затем с первым числом.

def f(a, b):
    return (b, a)

print(f(1, 2))

>>>(2, 1)

Напишите функцию, которая принимает список чисел и возвращает список, содержащий только уникальные элементы.

def f(my_list):
    return list(set(my_list))

print(f([1, 2, 3, 2, 1"
126,Benchmark Questions Verification V2.ipynb,259,"Напишите функцию, максимизирующую данные два кортежа.","def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))', 'assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))', 'assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, максимизирующую данные два кортежа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, максимизирующую данные два кортежа.

Примеры:

>>> maximize([1, 2, 3], [4, 5, 6])
(1, 4)
>>> maximize([1, 2, 3], [4, 5, 6], [7, 8, 9])
(1, 4, 7)
>>> maximize([1, 2, 3], [4, 5, 6], [7, 8, 9], [1"
127,Benchmark Questions Verification V2.ipynb,260,Напишите функцию для нахождения n-го простого числа Ньюмана–Шенкса–Уильямса.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",[],"['assert newman_prime(3) == 7', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го простого числа Ньюмана–Шенкса–Уильямса.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го простого числа Ньюмана–Шенкса–Уильямса.

Примеры:

>>> newman_williams_prime(1)
2
>>> newman_williams_prime(2)
3
>>> newman_williams_prime(3)
5
>>> newman_williams_prime(4)
11
>>> newman_williams_prime(5)
13
>>> newman_williams_prime(6)
17
>>> newman_williams_prime(7)"
128,Benchmark Questions Verification V2.ipynb,261,"Напишите функцию, которая принимает два кортежа и выполняет математическую операцию деления поэлементно для данных кортежей.","def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)', 'assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)', 'assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два кортежа и выполняет математическую операцию деления поэлементно для данных кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два кортежа и выполняет математическую операцию деления поэлементно для данных кортежей.

Примеры:

>>> divide_elementwise((1, 2, 3), (4, 5, 6))
(0.25, 0.4, 0.5)
>>> divide_elementwise((1, 2, 3), (4, 5, 6))
(0.25, 0.4, 0.5)

>>> divide_elementwise((1, 2, 3), (4, 5, 6))"
129,Benchmark Questions Verification V2.ipynb,262,"Напишите функцию, которая принимает список и целое число L и разбивает данный список на две части, где длина первой части списка равна L, и возвращает результирующие списки в кортеже.","def split_two_parts(list1, L):
    return list1[:L], list1[L:]",[],"['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', ""assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])"", ""assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и целое число L и разбивает данный список на две части, где длина первой части списка равна L, и возвращает результирующие списки в кортеже.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и целое число L и разбивает данный список на две части, где длина первой части списка равна L, и возвращает результирующие списки в кортеже.

Например, если список равен [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] и L равен 3, то функция должна вернуть кортеж ([1, 2, 3, 4, 5], [6, 7, 8, 9, 10]).

Если L равен 0, то функция должна вернуть кортеж ([], список).

Е"
130,Benchmark Questions Verification V2.ipynb,264,Напишите функцию для расчета возраста собаки в собачьих годах.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",[],"['assert dog_age(12)==61', 'assert dog_age(15)==73', 'assert dog_age(24)==109']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для расчета возраста собаки в собачьих годах.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для расчета возраста собаки в собачьих годах.

Примеры:

age_dog(1) -> 15
age_dog(2) -> 24
age_dog(3) -> 36
age_dog(4) -> 48
age_dog(5) -> 60
age_dog(6) -> 72
age_dog(7) -> 84
age_dog(8) -> 96
age_dog(9) -> 108
age_dog(10) -> "
131,Benchmark Questions Verification V2.ipynb,265,"Напишите функцию, которая принимает список и целое число n и разбивает список для каждого n-го элемента, возвращая список полученных списков.","def list_split(S, step):
    return [S[i::step] for i in range(step)]",[],"[""assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]', ""assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и целое число n и разбивает список для каждого n-го элемента, возвращая список полученных списков.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и целое число n и разбивает список для каждого n-го элемента, возвращая список полученных списков.

Например, если список равен [1, 2, 3, 4, 5, 6, 7, 8] и n равен 3, то функция должна вернуть [[1, 2, 3], [4, 5, 6], [7, 8]].

Если список равен [1, 2, 3, 4, 5, 6, 7, 8] и n равен 4, то функция должна"
132,Benchmark Questions Verification V2.ipynb,266,"Напишите функцию, позволяющую найти площадь боковой поверхности куба по длине его стороны.","def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",[],"['assert lateralsurface_cube(5)==100', 'assert lateralsurface_cube(9)==324', 'assert lateralsurface_cube(10)==400']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти площадь боковой поверхности куба по длине его стороны.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти площадь боковой поверхности куба по длине его стороны.

>>>cube_side_length = 5
>>>cube_side_area(cube_side_length)
75.0

>>>cube_side_length = 3
>>>cube_side_area(cube_side_length)
27.0

>>>cube_side_length = 10
>>>cube_side_area(cube_side_length)
1000.0

>>>cube_side_length"
133,Benchmark Questions Verification V2.ipynb,267,"Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n нечетных натуральных чисел.","def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",[],"['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n нечетных натуральных чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n нечетных натуральных чисел.

Например, если n = 3, то функция должна вернуть 1 + 9 + 25 = 35.

Ваша функция должна работать за полиномиальное время.

Ваша функция должна быть реализована с использованием цикла for.

Ваша функция должна быть реализована с использованием оператора if.

Ваша функция должна быть реализована с использованием оператора return.

В"
134,Benchmark Questions Verification V2.ipynb,268,Напишите функцию для поиска n-го номера звезды.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",[],"['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска n-го номера звезды.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска n-го номера звезды.

Вход:

* n - номер звезды

Выход:

* имя звезды

Примеры:

* n = 1, имя звезды = ""Солнце""
* n = 2, имя звезды = ""Первый спутник""
* n = 3, имя звезды = ""Вторая звезда""

<<SYS>>
def find_star(n):
    return ""З"
135,Benchmark Questions Verification V2.ipynb,269,Напишите функцию для поиска значения ascii символа.,"def ascii_value(k):
  ch=k
  return ord(ch)",[],"[""assert ascii_value('A')==65"", ""assert ascii_value('R')==82"", ""assert ascii_value('S')==83""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска значения ascii символа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска значения ascii символа.

>>> ascii_value('a')
97
>>> ascii_value('A')
65
>>> ascii_value(' ')
32
>>> ascii_value('!')
33

>>> ascii_value('z')
122
>>> ascii_value('Z')
90
>>> ascii_value('0')
48
>>> ascii_value('9')
57

>>> ascii_value('_')
"
136,Benchmark Questions Verification V2.ipynb,270,"Напишите функцию Python, чтобы найти сумму четных чисел в четных позициях списка.","def sum_even_and_even_index(arr):  
    i = 0
    sum = 0
    for i in range(0, len(arr),2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",[],"['assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30', 'assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26', 'assert sum_even_and_even_index([5, 6, 12, 1]) == 12']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму четных чисел в четных позициях списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму четных чисел в четных позициях списка.

Пример:

>>> sum_even_positions([1, 2, 3, 4, 5, 6, 7, 8, 9])
12

>>> sum_even_positions([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
18

>>> sum_even_positions([1, 2, 3, 4, 5, 6,"
137,Benchmark Questions Verification V2.ipynb,271,"Напишите функцию Python, которая принимает целое число n и находит сумму первых n четных натуральных чисел, возведенных в пятую степень.","def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",[],"['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число n и находит сумму первых n четных натуральных чисел, возведенных в пятую степень.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число n и находит сумму первых n четных натуральных чисел, возведенных в пятую степень.

Пример:

>>> sum_of_even_fifth_powers(10)
14290

>>> sum_of_even_fifth_powers(100)
28684031250

>>> sum_of_even_fifth_powers(1000)
28684031250000

>>> sum_of_even_fifth_powers(100"
138,Benchmark Questions Verification V2.ipynb,272,"Напишите функцию, которая принимает список кортежей и возвращает список, содержащий задний элемент каждого кортежа.","def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",[],"[""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"", ""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"", ""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список кортежей и возвращает список, содержащий задний элемент каждого кортежа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список кортежей и возвращает список, содержащий задний элемент каждого кортежа.

Например, если функция получает список [(1, 2), (3, 4), (5, 6)], то она должна вернуть список [2, 4, 6].

Ваша функция должна быть реализована с использованием генераторов.

Ваша функция должна быть реализована с использованием генераторов.

Ваша функция должна быть реализована с использованием генераторов.

"
139,Benchmark Questions Verification V2.ipynb,273,"Напишите функцию, которая принимает два кортежа и вычитает элементы первого кортежа из элементов второго кортежа с тем же индексом.","def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",[],"['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два кортежа и вычитает элементы первого кортежа из элементов второго кортежа с тем же индексом.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два кортежа и вычитает элементы первого кортежа из элементов второго кортежа с тем же индексом.

Например, если вы передадите функции кортежи (1, 2, 3) и (4, 5, 6), то она вернет кортеж (-3, -3, -3).

Ваша функция должна быть реализована с использованием генераторов.

Ваша функция должна быть реализована с использованием генераторов.

Ваша функция должна быть реализована с использованием генераторов.
"
140,Benchmark Questions Verification V2.ipynb,274,"Напишите функцию Python, которая принимает положительное целое число n и находит сумму четных биномиальных коэффициентов индекса.","import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",[],"['assert even_binomial_Coeff_Sum(4) == 8', 'assert even_binomial_Coeff_Sum(6) == 32', 'assert even_binomial_Coeff_Sum(2) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает положительное целое число n и находит сумму четных биномиальных коэффициентов индекса.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает положительное целое число n и находит сумму четных биномиальных коэффициентов индекса.

Например, если n = 5, то функция должна вернуть 10.

Примеры:

n = 1, result = 1
n = 2, result = 2
n = 3, result = 3
n = 4, result = 5
n = 5, result = 10
n = 6, result = 15
n = 7, result = 21
n = 8, result = 28
n ="
141,Benchmark Questions Verification V2.ipynb,276,"Напишите функцию, которая принимает радиус и высоту цилиндра и возвращает объем.","def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",['import math'],"['assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает радиус и высоту цилиндра и возвращает объем.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает радиус и высоту цилиндра и возвращает объем.

Примеры:

>>> volume_of_cylinder(3, 4)
52.35987755982989

>>> volume_of_cylinder(1, 2)
3.141592653589793

>>> volume_of_cylinder(2, 1)
12.566370614359172

>>> volume"
142,Benchmark Questions Verification V2.ipynb,277,"Напишите функцию, которая принимает словарь и целое число n и фильтрует словарь, чтобы включать только записи со значениями, большими или равными n.","def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",[],"[""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает словарь и целое число n и фильтрует словарь, чтобы включать только записи со значениями, большими или равными n.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает словарь и целое число n и фильтрует словарь, чтобы включать только записи со значениями, большими или равными n.

Пример:

>>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 3)
{'c': 3, 'd': 4, 'e': 5}

>>> filter_dict({'a': 1, 'b': 2, 'c': 3, 'd': 4, 'e': 5}, 6)
{'e': 5}

>>>"
143,Benchmark Questions Verification V2.ipynb,278,"Напишите функцию, чтобы найти количество элементов, которые встречаются перед элементом кортежа в данном кортеже.","def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",[],"['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, чтобы найти количество элементов, которые встречаются перед элементом кортежа в данном кортеже.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, чтобы найти количество элементов, которые встречаются перед элементом кортежа в данном кортеже.

Например, если кортеж равен (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), то функция должна вернуть количество элементов, которые встречаются перед 5-м элементом в данном кортеже.

В данном случае количество элементов равно 4.

Вы можете использовать функцию index() для поиска индекса элемента в кор"
144,Benchmark Questions Verification V2.ipynb,279,Напишите функцию для нахождения n-го десятиугольного числа.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",[],"['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го десятиугольного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го десятиугольного числа.

Примеры:

* 1-е десятиугольное число равно 1
* 2-е десятиугольное число равно 3
* 3-е десятиугольное число равно 6
* 4-е десятиугольное число равно 10
* 5-е десятиугольное число равно"
145,Benchmark Questions Verification V2.ipynb,280,"Напишите функцию, которая принимает массив и элемент и возвращает кортеж, содержащий логическое значение, указывающее, находится ли элемент в массиве, и позицию индекса элемента (или -1, если элемент не найден).","def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",[],"['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает массив и элемент и возвращает кортеж, содержащий логическое значение, указывающее, находится ли элемент в массиве, и позицию индекса элемента (или -1, если элемент не найден).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает массив и элемент и возвращает кортеж, содержащий логическое значение, указывающее, находится ли элемент в массиве, и позицию индекса элемента (или -1, если элемент не найден).

Например, для массива [1, 2, 3, 4, 5] и элемента 3, функция должна вернуть кортеж (True, 2).

Ваша функция должна работать для любого массива и любого элемента.

Ваша функция должна быть реализована с использованием цикла for.

Ваша функция должна"
146,Benchmark Questions Verification V2.ipynb,281,"Напишите функцию Python, чтобы проверить, уникальны или нет элементы данного списка.","def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",[],"['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, уникальны или нет элементы данного списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, уникальны или нет элементы данного списка.

Пример:

>>> check_uniqueness([1, 2, 3, 4, 5])
True
>>> check_uniqueness([1, 2, 3, 4, 5, 5])
False

Пример 2:

>>> check_uniqueness([1, 2, 3, 4, 5, 6, 7, 8, "
147,Benchmark Questions Verification V2.ipynb,282,Напишите функцию для поэлементного вычитания двух списков.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",[],"['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поэлементного вычитания двух списков.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поэлементного вычитания двух списков.

Примеры:

>>> list1 = [1, 2, 3, 4, 5]
>>> list2 = [1, 2, 3, 4, 5]
>>> list_subtract(list1, list2)
[0, 0, 0, 0, 0]

>>> list1 = [1, 2, 3, 4, 5"
148,Benchmark Questions Verification V2.ipynb,283,"Напишите функцию Python, которая принимает целое число и проверяет, меньше ли частота каждой цифры в целом числе самой цифры или равна ей.","def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",[],"['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число и проверяет, меньше ли частота каждой цифры в целом числе самой цифры или равна ей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число и проверяет, меньше ли частота каждой цифры в целом числе самой цифры или равна ей.

Например, если введено число 123456, то функция должна вернуть True, так как каждая цифра в числе меньше следующей.

Если же введено число 1234567, то функция должна вернуть False, так как в числе есть цифра 7, которая больше, чем предыдущая.

Ваша функция долж"
149,Benchmark Questions Verification V2.ipynb,284,"Напишите функцию, которая принимает список и элемент и проверяет, равны ли все элементы в списке заданному элементу.","def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",[],"['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и элемент и проверяет, равны ли все элементы в списке заданному элементу.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает список и элемент и проверяет, равны ли все элементы в списке заданному элементу.

Примеры:

check_all_equal([1, 1, 1], 1) -> True
check_all_equal([1, 2, 3], 1) -> False
check_all_equal([], 1) -> True

Примечание:

Вы можете использовать любые методы и функции, которые вы знаете.

Важно помнить,"
150,Benchmark Questions Verification V2.ipynb,285,"Напишите функцию, которая проверяет, содержит ли строка символ «а», за которым следуют два или три символа «b».","import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_two_three(""ac"")==(False)', 'assert text_match_two_three(""dc"")==(False)', 'assert text_match_two_three(""abbbba"")==(True)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая проверяет, содержит ли строка символ «а», за которым следуют два или три символа «b».","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая проверяет, содержит ли строка символ «а», за которым следуют два или три символа «b».

Примеры:

check_string(""abbb"") -> True
check_string(""baba"") -> False
check_string(""abbbb"") -> True
check_string(""babbb"") -> False

Примеры:

check_string(""abbb"") -> True
check_string(""baba"") -> False
check_string(""abbbb"") -> True
check_string(""babbb"") -> False

"
151,Benchmark Questions Verification V2.ipynb,286,"Напишите функцию, которая находит наибольшую сумму непрерывного массива в модифицированном массиве, который формируется путем повторения заданного массива k раз.","def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",[],"['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит наибольшую сумму непрерывного массива в модифицированном массиве, который формируется путем повторения заданного массива k раз.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит наибольшую сумму непрерывного массива в модифицированном массиве, который формируется путем повторения заданного массива k раз.

Например, если массив [1, 2, 3, 4, 5] повторяется 3 раза, то модифицированный массив будет выглядеть так: [1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5].

В этом масси"
152,Benchmark Questions Verification V2.ipynb,287,"Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n четных натуральных чисел.","def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",[],"['assert square_Sum(2) == 20', 'assert square_Sum(3) == 56', 'assert square_Sum(4) == 120']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n четных натуральных чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n четных натуральных чисел.

Например, если n равно 4, то функция должна вернуть 2 + 4 + 16 + 256 = 284.

Ваша функция должна работать для всех n, которые могут быть представлены в виде целых чисел.

Ваша функция должна быть реализована с использованием цикла while.

Ваша функция должна быть"
153,Ellen's Copy of Benchmark Questions Verification V2.ipynb,290,Напишите функцию для поиска списка максимальной длины в списке списков.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",[],"['assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])', 'assert max_length([[5], [15,20,25]])==(3, [15,20,25])']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска списка максимальной длины в списке списков.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска списка максимальной длины в списке списков.

Например, для списка [[1, 2, 3], [4, 5], [6, 7, 8, 9], [10]] функция должна вернуть 4.

Напишите функцию для поиска списка максимальной длины в списке списков.

Например, для списка [[1, 2, 3], [4, 5], [6"
154,Ellen's Copy of Benchmark Questions Verification V2.ipynb,291,"Напишите функцию, определяющую количество способов покрасить забор так, чтобы не более двух соседних столбов имели один и тот же цвет для данного забора с n столбами и k цветами.","def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",[],"['assert count_no_of_ways(2, 4) == 16', 'assert count_no_of_ways(3, 2) == 6', 'assert count_no_of_ways(4, 4) == 228']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую количество способов покрасить забор так, чтобы не более двух соседних столбов имели один и тот же цвет для данного забора с n столбами и k цветами.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, определяющую количество способов покрасить забор так, чтобы не более двух соседних столбов имели один и тот же цвет для данного забора с n столбами и k цветами.

Например, для забора из 5 столбов и 3 цветов функция должна вернуть 6.

Входные данные:
n - количество столбов
k - количество цветов

Выходные данные:
количество способов покрасить забор

Примеры:
n = 5
k = 3
6

n = 10
k ="
155,Ellen's Copy of Benchmark Questions Verification V2.ipynb,292,Напишите функцию Python для нахождения частного двух чисел (округленного до ближайшего целого числа).,"def find(n,m):  
    q = n//m 
    return (q)",[],"['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для нахождения частного двух чисел (округленного до ближайшего целого числа).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для нахождения частного двух чисел (округленного до ближайшего целого числа).

Примеры:

>>> division(10, 3)
3
>>> division(10, 5)
2
>>> division(10, 2)
5
>>> division(10, 1)
10
>>> division(10, 0)
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin"
156,Ellen's Copy of Benchmark Questions Verification V2.ipynb,293,Напишите функцию для нахождения третьей стороны прямоугольного треугольника.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",[],"['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения третьей стороны прямоугольного треугольника.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения третьей стороны прямоугольного треугольника.

Функция должна принимать на вход длины двух сторон треугольника и возвращать длину третьей стороны.

Например, если у нас есть прямоугольный треугольник с сторонами 3 и 4, то функция должна вернуть 5 - длину третьей стороны.

Вы можете использовать формулу Герона для на"
157,Ellen's Copy of Benchmark Questions Verification V2.ipynb,294,Напишите функцию для поиска максимального значения в заданном неоднородном списке.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",[],"[""assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"", ""assert max_val(['Python', 15, 20, 25])==25"", ""assert max_val(['Python', 30, 20, 40, 50, 'version'])==50""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимального значения в заданном неоднородном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимального значения в заданном неоднородном списке.

Примеры:

>>> max_value([1, 2, 3, 4, 5])
5
>>> max_value([1, 2, 3, 4, 5, 6, 7, 8, 9])
9
>>> max_value([1, 2, 3, 4, 5, 6, 7, 8, 9, 10"
158,Ellen's Copy of Benchmark Questions Verification V2.ipynb,295,"Напишите функцию, возвращающую сумму всех делителей числа.","def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",[],"['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, возвращающую сумму всех делителей числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, возвращающую сумму всех делителей числа.

def sum_of_divisors(n):
    return sum(d for d in range(1, n + 1) if n % d == 0)

Напишите функцию, возвращающую список всех делителей числа.

def divisors(n):
    return [d for d in range(1, n + 1) if n % d == 0]

Напишите"
159,Ellen's Copy of Benchmark Questions Verification V2.ipynb,296,Напишите функцию Python для подсчета инверсий в массиве.,"def get_Inv_Count(arr): 
    inv_count = 0
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",[],"['assert get_Inv_Count([1,20,6,4,5]) == 5', 'assert get_Inv_Count([1,2,1]) == 1', 'assert get_Inv_Count([1,2,5,6,1]) == 3']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета инверсий в массиве.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета инверсий в массиве.

Пример:

```python
arr = [1, 2, 3, 4, 5]
print(inversion_count(arr))
```

Вывод:

```python
0
```

В массиве нет инверсий.

```python
arr = [1, 2, 3, 4, 5, 6]
print(inversion_count(arr))"
160,Ellen's Copy of Benchmark Questions Verification V2.ipynb,297,Напишите функцию для выравнивания заданной структуры вложенного списка.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",[],"['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для выравнивания заданной структуры вложенного списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для выравнивания заданной структуры вложенного списка.

Вход:

* список, содержащий вложенные списки
* целое число, определяющее максимальную длину каждого вложенного списка

Выход:

* список, содержащий вложенные списки, выровненные по максимальной длине

Пример:

```python
>>> align_list([[1, 2, 3], [4,"
161,Ellen's Copy of Benchmark Questions Verification V2.ipynb,299,Напишите функцию для вычисления максимального агрегата из списка кортежей.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",[],"[""assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"", ""assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)"", ""assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления максимального агрегата из списка кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления максимального агрегата из списка кортежей.

Примеры:

>>> max_aggregate([(1, 2), (3, 4), (5, 6)])
(5, 6)

>>> max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8)])
(7, 8)

>>> max_aggregate([(1, 2), (3, 4), (5, 6), (7"
162,Ellen's Copy of Benchmark Questions Verification V2.ipynb,300,"Напишите функцию, которая находит количество всех двоичных последовательностей длины 2n таких, что сумма первых n бит равна сумме последних n бит.","def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",['import math'],"['assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит количество всех двоичных последовательностей длины 2n таких, что сумма первых n бит равна сумме последних n бит.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит количество всех двоичных последовательностей длины 2n таких, что сумма первых n бит равна сумме последних n бит.

Пример:

n = 2

1010101010101010
1010101010101010
1010101010101010
1010101010101010
1010101010101010
1010101010101"
163,Ellen's Copy of Benchmark Questions Verification V2.ipynb,301,Напишите функцию для определения глубины словаря.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",[],"[""assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"", ""assert dict_depth({'a':1, 'b': {'c':'python'}})==2"", ""assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения глубины словаря.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения глубины словаря.

>>> get_depth({})
0
>>> get_depth({'a': 1})
1
>>> get_depth({'a': {'b': 2}})
2
>>> get_depth({'a': {'b': {'c': 3}}})
3

>>> get_depth({'a': {'b': {'c': {'d': 4}}}})
4

>>> get_depth({'a': {'b': {'c': {'d':"
164,Ellen's Copy of Benchmark Questions Verification V2.ipynb,304,Напишите функцию Python для поиска элемента по заданному индексу после количества вращений.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",[],"['assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3', 'assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3', 'assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для поиска элемента по заданному индексу после количества вращений.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для поиска элемента по заданному индексу после количества вращений.

Например, если у нас есть список [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], то функция должна возвращать элемент с индексом 3 после 2 вращений.

Вот пример использования функции:

>>> rotate_list([1, 2, 3, 4, 5, 6, 7, 8,"
165,Ellen's Copy of Benchmark Questions Verification V2.ipynb,305,"Напишите функцию, возвращающую два слова из списка слов, начинающихся с буквы «p».","import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",[],"['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, возвращающую два слова из списка слов, начинающихся с буквы «p».","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, возвращающую два слова из списка слов, начинающихся с буквы «p».

Примеры:

>>> get_words_starting_with_p(['python', 'java', 'php', 'perl', 'pascal'])
['python', 'php']

>>> get_words_starting_with_p(['javascript', 'c#', 'c++', 'c', 'go'])
['c++', 'go']

>>> get_words_starting_with_p(['ruby', 'rust','swift', 'kotlin','scala'])"
166,Ellen's Copy of Benchmark Questions Verification V2.ipynb,306,"Напишите функцию, которая находит максимальную сумму возрастающей подпоследовательности от префикса до i-го индекса, а также включает заданный k-й элемент, который находится после i, т. е. k &gt; i.","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",[],"['assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11', 'assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7', 'assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит максимальную сумму возрастающей подпоследовательности от префикса до i-го индекса, а также включает заданный k-й элемент, который находится после i, т. е. k &gt; i.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит максимальную сумму возрастающей подпоследовательности от префикса до i-го индекса, а также включает заданный k-й элемент, который находится после i, т. е. k &gt; i.

Например, для массива [1, 2, 3, 4, 5, 6, 7, 8, 9, 10] и k = 5, функция должна вернуть 20 (сумма возрастающей подпоследовательности [1, 2, 3, 4, 5, 6]).

Напишите функцию, которая находит максимальную сумму возрастающей подпоследовательности"
167,Ellen's Copy of Benchmark Questions Verification V2.ipynb,307,Напишите функцию для получения двоеточия кортежа.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",[],"['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True)', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для получения двоеточия кортежа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для получения двоеточия кортежа.

def get_colon(a, b):
    return a:b

print(get_colon(1, 2))

>>>
1:2

Напишите функцию для получения двоеточия кортежа.

def get_colon(a, b):
    return a:b

print(get_colon(1, 2))

>>>
1:2

Напишите функцию для получения двоеточия корте"
168,Ellen's Copy of Benchmark Questions Verification V2.ipynb,308,"Напишите функцию, позволяющую находить заданное количество крупнейших продуктов из двух заданных списков, выбирая по одному фактору из каждого списка.","def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",[],"['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую находить заданное количество крупнейших продуктов из двух заданных списков, выбирая по одному фактору из каждого списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую находить заданное количество крупнейших продуктов из двух заданных списков, выбирая по одному фактору из каждого списка.

Например, если заданы два списка:

[1, 2, 3, 4, 5]
[10, 20, 30, 40, 50]

то функция должна вернуть следующие пары:

(5, 50)
(4, 40)
(3, 30)
(2, 20)
(1, 10)

При этом"
169,Ellen's Copy of Benchmark Questions Verification V2.ipynb,309,"Напишите функцию Python, чтобы найти максимум два числа.","def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",[],"['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти максимум два числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти максимум два числа.

>>> max2(1, 2)
2
>>> max2(2, 1)
2
>>> max2(1, 1)
1
>>> max2(2, 2)
2

Напишите функцию Python, чтобы найти максимум три числа.

>>> max3(1, 2, 3)
3
>>> max3(1, 3, 2)
3
>>> max3"
170,Ellen's Copy of Benchmark Questions Verification V2.ipynb,310,Напишите функцию для преобразования заданной строки в кортеж символов.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",[],"['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования заданной строки в кортеж символов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования заданной строки в кортеж символов.

>>> string_to_tuple('hello')
('h', 'e', 'l', 'l', 'o')

>>> string_to_tuple('world')
('w', 'o', 'r', 'l', 'd')

>>> string_to_tuple('')
()

>>> string_to_tuple('12345')
('1', '2', '3', '4', '5')

>>> string_to_tuple('1"
171,Ellen's Copy of Benchmark Questions Verification V2.ipynb,311,Напишите функцию Python для установки самого левого неустановленного бита.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",[],"['assert set_left_most_unset_bit(10) == 14', 'assert set_left_most_unset_bit(12) == 14', 'assert set_left_most_unset_bit(15) == 15']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для установки самого левого неустановленного бита.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для установки самого левого неустановленного бита.

Пример:

Вход: 10101010101010101010101010101010
Выход: 10101010101010101010101010101011

Вход: 101010101010101010101010"
172,Ellen's Copy of Benchmark Questions Verification V2.ipynb,312,Напишите функцию для определения объема конуса.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",['import math'],"['assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)', 'assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)', 'assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения объема конуса.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для определения объема конуса.

Функция принимает на вход высоту и радиус основания конуса.

Выведите результат в формате ""Объем конуса равен: "".

Пример:

Вызов функции:

volume_cone(3, 2)

Результат:

Объем конуса равен: 12.566370614359172"
173,Benchmark Questions Verification V2.ipynb,388,"Напишите функцию Python, чтобы найти наибольшую степень 2, которая меньше или равна n.","def highest_Power_of_2(n): 
    res = 0 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i 
            break 
    return res ",[],"['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наибольшую степень 2, которая меньше или равна n.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наибольшую степень 2, которая меньше или равна n.

Например, если n равно 100, то функция должна вернуть 32, потому что 32 является наибольшей степенью 2, которая меньше или равна 100.

Вот пример кода:

def find_largest_power_of_2(n):
    # Напишите свой код здесь
    return largest_power_of_2

print(find_larg"
174,Benchmark Questions Verification V2.ipynb,389,Напишите функцию для нахождения n-го числа Лукаса.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",[],"['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го числа Лукаса.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения n-го числа Лукаса.

>>> Lucas(1)
1
>>> Lucas(2)
3
>>> Lucas(3)
4
>>> Lucas(4)
7
>>> Lucas(5)
11
>>> Lucas(6)
18
>>> Lucas(7)
29
>>> Lucas(8)
47
>>> Lucas(9)
76
>>> Lucas(10)
123

>>> Lucas(100)
10"
175,Benchmark Questions Verification V2.ipynb,390,"Напишите функцию, которая применяет заданную строку формата ко всем элементам списка.","def add_string(list_, string):
 add_string=[string.format(i) for i in  list_]
 return add_string",[],"[""assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"", ""assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']"", ""assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая применяет заданную строку формата ко всем элементам списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая применяет заданную строку формата ко всем элементам списка.

Пример:

>>> format_all('Hello, {}!', ['Alice', 'Bob', 'Charlie'])
['Hello, Alice!', 'Hello, Bob!', 'Hello, Charlie!']

>>> format_all('{0} + {1} = {2}', [(1, 2, 3), (2, 3, 5), (3, 4, 7)])
['1 + 2 = 3', '2 + 3"
176,Benchmark Questions Verification V2.ipynb,391,Напишите функцию для преобразования более одного списка во вложенный словарь.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",[],"['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]', 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]', 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования более одного списка во вложенный словарь.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования более одного списка во вложенный словарь.

Пример:

>>> list_to_dict([['a', 'b', 'c'], [1, 2, 3]])
{'a': 1, 'b': 2, 'c': 3}

>>> list_to_dict([['a', 'b', 'c'], [1, 2, 3], [4, 5, 6]])
{'a': [1, 4], 'b': [2, 5], 'c"
177,Benchmark Questions Verification V2.ipynb,392,"Напишите функцию, позволяющую найти максимально возможную сумму, используя данное уравнение f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) , н).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",[],"['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти максимально возможную сумму, используя данное уравнение f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) , н).","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти максимально возможную сумму, используя данное уравнение f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) , н).

Пример:

f(10) = max( (f(10/2) + f(10/3) + f(10/4) + f(10/5)), 10) = max( (f(5) + f(3) + f(2) + f(2)), 10) = max( (5 + 3 + 2 + 2), 10) = 10

Вход:
"
178,charlessutton@: Benchmark Questions Verification V2.ipynb,393,Напишите функцию для поиска списка максимальной длины.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",[],"['assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])', 'assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска списка максимальной длины.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска списка максимальной длины.

Примеры:

```python
list_max_len([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3
list_max_len([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == 4
```

<<SYS>>
def list_max_len(my_list):
    return max(len"
179,Benchmark Questions Verification V2.ipynb,394,"Напишите функцию, проверяющую, не содержит ли данный кортеж дубликатов.","def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return res ",[],"['assert check_distinct((1, 4, 5, 6, 1, 4)) == False', 'assert check_distinct((1, 4, 5, 6)) == True', 'assert check_distinct((2, 3, 4, 5, 6)) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, не содержит ли данный кортеж дубликатов.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, не содержит ли данный кортеж дубликатов.

Примеры:

>>> check_duplicates((1, 2, 3))
False
>>> check_duplicates((1, 2, 3, 3))
True
>>> check_duplicates((1, 2, 3, 3, 3))
True
>>> check_duplicates((1, 2, 3, 3, 3, 3))
True

Примеры с использованием генераторов"
180,Benchmark Questions Verification V2.ipynb,395,Напишите функцию Python для поиска первого неповторяющегося символа в заданной строке.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",[],"['assert first_non_repeating_character(""abcabc"") == None', 'assert first_non_repeating_character(""abc"") == ""a""', 'assert first_non_repeating_character(""ababc"") == ""c""']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для поиска первого неповторяющегося символа в заданной строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для поиска первого неповторяющегося символа в заданной строке.

Примеры

```
first_unique_char('abcdefg') -> 'a'
first_unique_char('abbcdefg') -> 'b'
first_unique_char('abbcdefg') -> 'b'
first_unique_char('') -> None
```

Примечание:

* Если в строке нет неповторяющихся символов, функция должна вернуть None.
* Если в ст"
181,charlessutton@: Benchmark Questions Verification V2.ipynb,396,"Напишите функцию, проверяющую, начинается и заканчивается данная строка одним и тем же символом или нет.","import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",[],"['assert check_char(""abba"") == ""Valid""', 'assert check_char(""a"") == ""Valid""', 'assert check_char(""abcd"") == ""Invalid""']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, начинается и заканчивается данная строка одним и тем же символом или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, начинается и заканчивается данная строка одним и тем же символом или нет.

Примеры:

check_first_last_letter(""abc"") -> False
check_first_last_letter(""abca"") -> True
check_first_last_letter(""a"") -> True

Примеры:

check_first_last_letter(""abc"") -> False
check_first_last_letter(""abca"") -> True
check_first_last_letter(""a"") -> True

Примеры:

check_first_last_"
182,Benchmark Questions Verification V2.ipynb,397,Напишите функцию для нахождения медианы трех чисел.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",[],"['assert median_numbers(25,55,65)==55.0', 'assert median_numbers(20,10,30)==20.0', 'assert median_numbers(15,45,75)==45.0']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения медианы трех чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения медианы трех чисел.

>>> median(1, 2, 3)
2

>>> median(3, 2, 1)
2

>>> median(1, 3, 2)
2

>>> median(2, 1, 3)
2

>>> median(2, 3, 1)
2

>>> median(3, 1, 2)
2

>>> median(1, 2, 3)
"
183,Benchmark Questions Verification V2.ipynb,398,Напишите функцию для вычисления суммы цифр каждого числа заданного списка.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",[],"['assert sum_of_digits([10,2,56])==14', ""assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19"", 'assert sum_of_digits([10,20,-4,5,-70])==19']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы цифр каждого числа заданного списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы цифр каждого числа заданного списка.

Пример:

>>> sum_of_digits([123, 456])
[6, 15]

>>> sum_of_digits([123, 456, 789])
[6, 15, 24]

>>> sum_of_digits([])
[]

>>> sum_of_digits([123, 456, 789, "
184,Benchmark Questions Verification V2.ipynb,399,Напишите функцию для выполнения математической побитовой операции xor над заданными кортежами.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)', 'assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)', 'assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для выполнения математической побитовой операции xor над заданными кортежами.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для выполнения математической побитовой операции xor над заданными кортежами.

Примеры:

>>> xor((1, 2, 3), (4, 5, 6))
(5, 7, 3)
>>> xor((1, 2, 3), (4, 5, 6), (7, 8, 9))
(12, 15, 6)

Примечание:

В Python кортежи можно конкатенировать, используя опера"
185,Benchmark Questions Verification V2.ipynb,400,Напишите функцию для извлечения количества уникальных кортежей в заданном списке.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",[],"['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения количества уникальных кортежей в заданном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения количества уникальных кортежей в заданном списке.

Примеры:

>>> get_unique_count([(1, 2), (3, 4), (5, 6), (5, 6)])
3
>>> get_unique_count([])
0
>>> get_unique_count([(1,), (2, 3), (2, 3)])
2

Примечание: в данном задании нельзя использовать функции set и len.

В"
186,Benchmark Questions Verification V2.ipynb,401,Напишите функцию для индексного сложения элементов кортежа в заданных двух вложенных кортежах.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для индексного сложения элементов кортежа в заданных двух вложенных кортежах.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для индексного сложения элементов кортежа в заданных двух вложенных кортежах.

Примеры:

>>> add_tuple_elements(((1, 2), (3, 4)), ((5, 6), (7, 8)))
((6, 8), (10, 12))

>>> add_tuple_elements(((1, 2), (3, 4)), ((5, 6), (7, 8)))
((6, 8), (10, 12))

>>> add_"
187,Benchmark Questions Verification V2.ipynb,404,"Напишите функцию Python, чтобы найти минимум два числа.","def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",[],"['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти минимум два числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти минимум два числа.

>>> min2(3, 4)
3
>>> min2(4, 3)
3
>>> min2(3, 3)
3

Напишите функцию Python, чтобы найти максимум два числа.

>>> max2(3, 4)
4
>>> max2(4, 3)
4
>>> max2(3, 3)
3

Напишите функцию Python,"
188,Benchmark Questions Verification V2.ipynb,405,"Напишите функцию, проверяющую, существует ли элемент внутри кортежа.","def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",[],"['assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'r\')==True', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'5\')==False', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"",""e""),3)==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, существует ли элемент внутри кортежа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, существует ли элемент внутри кортежа.

>>> is_in_tuple(1, (1, 2, 3))
True
>>> is_in_tuple(4, (1, 2, 3))
False

>>> is_in_tuple(1, (1, 2, 3, 1, 2, 3))
True

>>> is_in_tuple(1, ())
False

>>> is_in_tuple(1, (1, 2,"
189,Benchmark Questions Verification V2.ipynb,406,"Напишите функцию Python, чтобы определить, является ли четность данного числа нечетной.","def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False",[],"['assert find_Parity(12) == False', 'assert find_Parity(7) == True', 'assert find_Parity(10) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы определить, является ли четность данного числа нечетной.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы определить, является ли четность данного числа нечетной.

Примеры:

* 1 - нечетное
* 2 - четное
* 3 - нечетное
* 4 - четное
* 5 - нечетное

Примеры:

* 1 - нечетное
* 2 - четное
* 3 - нечетное
* 4 - четное
* 5 - нечетное

Примеры:

"
190,Benchmark Questions Verification V2.ipynb,407,Напишите функцию для создания следующего большего числа путем перестановки цифр заданного числа.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",[],"['assert rearrange_bigger(12)==21', 'assert rearrange_bigger(10)==False', 'assert rearrange_bigger(102)==120']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для создания следующего большего числа путем перестановки цифр заданного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для создания следующего большего числа путем перестановки цифр заданного числа.

Например, для числа 123456 следующим большим числом будет 123457.

Вход:

число - строка из цифр

Выход:

строка из цифр

Примеры:

create_next_bigger_number(""123456"") -> ""123457""
create_next_bigger_number(""12345"")"
191,Benchmark Questions Verification V2.ipynb,408,"Напишите функцию, позволяющую найти k наименьших пар, состоящих из одного элемента из первого массива и одного элемента из второго массива.","import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",[],"['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти k наименьших пар, состоящих из одного элемента из первого массива и одного элемента из второго массива.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, позволяющую найти k наименьших пар, состоящих из одного элемента из первого массива и одного элемента из второго массива.

Например, если массивы равны [1, 2, 3] и [4, 5, 6], то функция должна вернуть [1, 4], [1, 5], [1, 6], [2, 4], [2, 5], [2, 6], [3, 4], [3, 5], [3, 6].

Ваша функция должна работать за линейное время и использова"
192,Benchmark Questions Verification V2.ipynb,409,Напишите функцию для поиска минимального произведения пар кортежей в заданном списке.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",[],"['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска минимального произведения пар кортежей в заданном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска минимального произведения пар кортежей в заданном списке.

Примеры:

min_product([(1, 2), (3, 4), (5, 6)]) -> (1, 3)
min_product([(1, 2), (3, 4), (5, 6), (7, 8)]) -> (1, 3)
min_product([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) -> (1, 3)

Примеры:

min"
193,Benchmark Questions Verification V2.ipynb,410,Напишите функцию для поиска минимального значения в заданном неоднородном списке.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",[],"[""assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"", ""assert min_val(['Python', 15, 20, 25])==15"", ""assert min_val(['Python', 30, 20, 40, 50, 'version'])==20""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска минимального значения в заданном неоднородном списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска минимального значения в заданном неоднородном списке.

Примеры:

min_value([1, 2, 3, 4, 5]) == 1
min_value([1, 2, 3, 4, 5, 6]) == 1
min_value([1, 2, 3, 4, 5, 6, 7]) == 1
min_value([1, 2, 3, 4, 5, 6, 7, 8]) == 1
min_value([1, 2, 3, 4,"
194,charlessutton@: Benchmark Questions Verification V2.ipynb,411,Напишите функцию для преобразования данной строки регистра змеи в строку регистра верблюда.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('android_tv') == 'AndroidTv'"", ""assert snake_to_camel('google_pixel') == 'GooglePixel'"", ""assert snake_to_camel('apple_watch') == 'AppleWatch'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования данной строки регистра змеи в строку регистра верблюда.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования данной строки регистра змеи в строку регистра верблюда.

Пример:

>>> snake_to_camel(""hello_world"")
""helloWorld""

>>> snake_to_camel(""hello_world_test"")
""helloWorldTest""

>>> snake_to_camel(""hello_world_test_123"")
""helloWorldTest123""

>>> snake_to_camel(""hello_world_test_123_abc"")
""helloWorldTest123Abc""

>>> snake_to_camel(""hello"
195,charlessutton@: Benchmark Questions Verification V2.ipynb,412,Напишите функцию Python для удаления нечетных чисел из заданного списка.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",[],"['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для удаления нечетных чисел из заданного списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для удаления нечетных чисел из заданного списка.

Примеры:

>>> remove_odd([1, 2, 3, 4, 5])
[2, 4]
>>> remove_odd([1, 3, 5, 7, 9])
[]
>>> remove_odd([2, 4, 6, 8, 10])
[2, 4, 6, 8, 10]

>>> remove_odd([1, 2, 3, 4, 5])
[2, 4]
>>>"
196,charlessutton@: Benchmark Questions Verification V2.ipynb,413,Напишите функцию для извлечения n-го элемента из заданного списка кортежей.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",[],"[""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения n-го элемента из заданного списка кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения n-го элемента из заданного списка кортежей.

Примеры:

>>> get_item([(1, 2), (3, 4), (5, 6)], 1)
(3, 4)
>>> get_item([(1, 2), (3, 4), (5, 6)], 0)
(1, 2)
>>> get_item([(1, 2), (3, 4), (5, 6)], 2)
(5, 6)

>>> get_item([(1, 2),"
197,charlessutton@: Benchmark Questions Verification V2.ipynb,414,"Напишите функцию Python, чтобы проверить, существует ли какое-либо значение в последовательности или нет.","def overlapping(list1,list2):  
    for i in range(len(list1)): 
        for j in range(len(list2)): 
            if(list1[i]==list2[j]): 
                return True
    return False",[],"['assert overlapping([1,2,3,4,5],[6,7,8,9]) == False', 'assert overlapping([1,2,3],[4,5,6]) == False', 'assert overlapping([1,4,5],[1,4,5]) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, существует ли какое-либо значение в последовательности или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, существует ли какое-либо значение в последовательности или нет.

Примеры:

>>> check_value([1, 2, 3, 4, 5], 3)
True
>>> check_value([1, 2, 3, 4, 5], 6)
False
>>> check_value([1, 2, 3, 4, 5], 0)
False
>>> check_value([], 3)
False

Примеры использования:

>>> if check_value([1, 2, 3, 4, 5"
198,charlessutton@: Benchmark Questions Verification V2.ipynb,415,"Напишите функцию Python, чтобы найти пару с наибольшим произведением из заданного массива целых чисел.","def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",[],"['assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)', 'assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)', 'assert max_Product([1,2,3]) == (2,3)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти пару с наибольшим произведением из заданного массива целых чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти пару с наибольшим произведением из заданного массива целых чисел.

Пример:

Вход: [1, 2, 3, 4, 5]
Выход: 12 (1*12)

Вход: [1, 2, 3, 4, 5, 6]
Выход: 20 (2*10)

Вход: [1, 2, 3, 4, 5, 6, 7]
Выход: 21 (3*7)

Вход: [1, 2, 3,"
199,charlessutton@: Benchmark Questions Verification V2.ipynb,417,Напишите функцию для поиска общего первого элемента в заданном списке кортежей.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",[],"[""assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"", ""assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]"", ""assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска общего первого элемента в заданном списке кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска общего первого элемента в заданном списке кортежей.

Примеры:

>>> find_common_first_element([(1, 2, 3), (4, 5, 6)])
None
>>> find_common_first_element([(1, 2, 3), (1, 4, 5)])
1
>>> find_common_first_element([(1, 2, 3), (1, 2, 4)])
1
>>> find_common_first_element([(1, 2, 3), (1, 2,"
200,charlessutton@: Benchmark Questions Verification V2.ipynb,418,"Напишите функцию Python, чтобы найти элемент списка, имеющий максимальную длину.","def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",[],"[""assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти элемент списка, имеющий максимальную длину.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти элемент списка, имеющий максимальную длину.

Например, если у нас есть список:

['abc', 'de', 'fgh', 'ijkl','mn', 'o']

то функция должна вернуть 'ijkl'.

Если у нас есть список:

['abc', 'de', 'fgh', 'ijkl','mn', 'o', 'pqr']

то функция должна вернуть 'pqr'.

Если у нас есть пустой список, то функция должна вернуть None.

Ваша функ"
201,charlessutton@: Benchmark Questions Verification V2.ipynb,419,"Напишите функцию для округления каждого числа в заданном списке чисел и выведите общую сумму, умноженную на длину списка.","def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",[],"['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для округления каждого числа в заданном списке чисел и выведите общую сумму, умноженную на длину списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для округления каждого числа в заданном списке чисел и выведите общую сумму, умноженную на длину списка.

Пример:

>>> round_list([1.2, 2.3, 3.4, 4.5])
20.0

>>> round_list([1.2, 2.3, 3.4, 4.5, 5.6])
25.0

>>> round_list([1.2, 2.3, 3.4, 4.5, 5.6, 6.7])
30.0

>>> round_list([1.2, "
202,charlessutton@: Benchmark Questions Verification V2.ipynb,420,"Напишите функцию Python, чтобы найти кубическую сумму первых n четных натуральных чисел.","def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",[],"['assert cube_Sum(2) == 72', 'assert cube_Sum(3) == 288', 'assert cube_Sum(4) == 800']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти кубическую сумму первых n четных натуральных чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти кубическую сумму первых n четных натуральных чисел.

Пример:

>>> cubic_sum(1)
1
>>> cubic_sum(2)
9
>>> cubic_sum(3)
36
>>> cubic_sum(4)
100
>>> cubic_sum(5)
216
>>> cubic_sum(6)
400
>>> cubic_sum(7)
648
>>> cubic_sum(8)
900
>>> cubic_sum(9)
1289
"
203,charlessutton@: Benchmark Questions Verification V2.ipynb,421,Напишите функцию для объединения каждого элемента кортежа по разделителю.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",[],"['assert concatenate_tuple((""ID"", ""is"", 4, ""UTS"") ) == \'ID-is-4-UTS\'', 'assert concatenate_tuple((""QWE"", ""is"", 4, ""RTY"") ) == \'QWE-is-4-RTY\'', 'assert concatenate_tuple((""ZEN"", ""is"", 4, ""OP"") ) == \'ZEN-is-4-OP\'']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения каждого элемента кортежа по разделителю.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения каждого элемента кортежа по разделителю.

Пример:

>>> merge_tuple(('a', 'b', 'c'),'')
'a b c'

>>> merge_tuple(('a', 'b', 'c'), '-')
'a-b-c'

>>> merge_tuple(('a', 'b', 'c'), '')
'abc'

>>> merge_tuple(('a', 'b', 'c'),'')
'a b c'

>>> merge_tuple(('a', 'b', 'c'), '-')
'a-b-"
204,charlessutton@: Benchmark Questions Verification V2.ipynb,422,"Напишите функцию Python, чтобы найти среднее значение кубов первых n натуральных чисел.","def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",[],"['assert find_Average_Of_Cube(2) == 4.5', 'assert find_Average_Of_Cube(3) == 12', 'assert find_Average_Of_Cube(1) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти среднее значение кубов первых n натуральных чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти среднее значение кубов первых n натуральных чисел.

Пример:

>>> find_mean_of_cubes(5)
1.5

>>> find_mean_of_cubes(10)
3.375

>>> find_mean_of_cubes(15)
6.0625

>>> find_mean_of_cubes(20)
8.6875

>>> find_mean_of_cubes(25)
11.25

>>> find_mean_of_"
205,charlessutton@: Benchmark Questions Verification V2.ipynb,424,Напишите функцию для извлечения только заднего индексного элемента каждой строки в данном кортеже.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",[],"[""assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"", ""assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']"", ""assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения только заднего индексного элемента каждой строки в данном кортеже.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения только заднего индексного элемента каждой строки в данном кортеже.

>>> tuple = ('hello', 'world', 'python')
>>> get_last_index(tuple)
('o', 'd', 'n')

>>> tuple = ('hello', 'world', 'python', 'java')
>>> get_last_index(tuple)
('o', 'd', 'n', 'a')

>>> tuple = ('hello', 'world', 'python', 'java', 'c++')
>>> get_last_index(tuple)
('o', 'd', 'n', 'a', '+')

>>"
206,charlessutton@: Benchmark Questions Verification V2.ipynb,425,"Напишите функцию для подсчета количества подсписков, содержащих определенный элемент.","def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",[],"['assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3', ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3"", ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества подсписков, содержащих определенный элемент.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета количества подсписков, содержащих определенный элемент.

Например, если в списке [1, 2, 3, [4, 5, 6], 7, 8, 9] есть подсписок [4, 5, 6], то функция должна вернуть 1.

Если в списке [1, 2, 3, [4, 5, 6], 7, 8, 9] есть подсписок [4, 5, 6, 7], то функция должна вернуть 0.

Если в списке"
207,charlessutton@: Benchmark Questions Verification V2.ipynb,426,Напишите функцию для фильтрации нечетных чисел.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",[],"['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для фильтрации нечетных чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для фильтрации нечетных чисел.

def filter_odd(numbers):
    return [x for x in numbers if x % 2!= 0]

print(filter_odd([1, 2, 3, 4, 5]))

Выведите на экран все числа, которые делятся на 3 и 5.

def filter_divisible(numbers):
    return [x for x in numbers if x % 3 == 0 and x % 5 == 0]

print(filter_divisible([1, 2, 3, "
208,charlessutton@: Benchmark Questions Verification V2.ipynb,427,Напишите функцию для преобразования даты из формата гггг-мм-дд в формат дд-мм-гггг.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",[],"['assert change_date_format(""2026-01-02"") == \'02-01-2026\'', 'assert change_date_format(""2020-11-13"") == \'13-11-2020\'', 'assert change_date_format(""2021-04-26"") == \'26-04-2021\'']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования даты из формата гггг-мм-дд в формат дд-мм-гггг.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для преобразования даты из формата гггг-мм-дд в формат дд-мм-гггг.

Пример:

>>> convert_date('2022-01-01')
'01-01-2022'

>>> convert_date('2022-01-01')
'01-01-2022'

>>> convert_date('2022-01-01')
'01-01-2022'

>>> convert_date('2022-01-01')
'01-01-2022'

>>> convert_"
209,charlessutton@: Benchmark Questions Verification V2.ipynb,428,Напишите функцию для сортировки данного массива с помощью сортировки оболочки.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",[],"['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки данного массива с помощью сортировки оболочки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки данного массива с помощью сортировки оболочки.

```
[1, 5, 2, 4, 3]
```

<<SYS>>
def sort_shell(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = arr[i]
            j = i
            while j >= gap and arr[j - gap] > temp:
                arr[j] = arr[j - gap]
                j -= gap
            arr[j] = temp
        gap //= 2
    return arr

def"
210,charlessutton@: Benchmark Questions Verification V2.ipynb,429,Напишите функцию для извлечения поэлементных кортежей и кортежей из данных двух кортежей.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения поэлементных кортежей и кортежей из данных двух кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения поэлементных кортежей и кортежей из данных двух кортежей.

Примеры:

>>> a = (1, 2, 3)
>>> b = (4, 5, 6)
>>> get_element_wise_pairs(a, b)
[(1, 4), (2, 5), (3, 6)]
>>> get_element_wise_pairs(a, b, reverse=True)
[(4, 1), (5, 2), (6, 3)]

>>> a = (1, 2, 3)
>>> b = (4, 5, 6, "
211,charlessutton@: Benchmark Questions Verification V2.ipynb,430,Напишите функцию для нахождения директрисы параболы.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",[],"['assert parabola_directrix(5,3,2)==-198', 'assert parabola_directrix(9,8,4)==-2336', 'assert parabola_directrix(2,4,6)==-130']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения директрисы параболы.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения директрисы параболы.

Параметры:

* a - коэффициент уравнения параболы
* b - коэффициент уравнения параболы
* c - коэффициент уравнения параболы

Выход:

* x - директриса параболы

Примеры:

* find_directrix(1, 2, 1) -> 0
* find_directrix(1, 2, 3) -> 1
* find_directrix(1, 2, 5) -> 2

<</HINT"
212,charlessutton@: Benchmark Questions Verification V2.ipynb,431,"Напишите функцию, которая принимает два списка и возвращает true, если у них есть хотя бы один общий элемент.","def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",[],"['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', ""assert common_element(['a','b','c'], ['d','b','e'])==True""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два списка и возвращает true, если у них есть хотя бы один общий элемент.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая принимает два списка и возвращает true, если у них есть хотя бы один общий элемент.

Примеры:

common_element([1, 2, 3], [4, 5, 6]) == False
common_element([1, 2, 3], [3, 4, 5]) == True
common_element([1, 2, 3], [2, 4, 5]) == True

Ваша функция должна работать за O(n+m) времени, где n и m - длины списков.

Ваша функция должна быть реализована с использованием генераторов.

Ваша функ"
213,charlessutton@: Benchmark Questions Verification V2.ipynb,432,Напишите функцию для нахождения медианной длины трапеции.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",[],"['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения медианной длины трапеции.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения медианной длины трапеции.

Функция должна принимать на вход стороны трапеции и выдавать на выходе ее медианную длину.

Вы можете использовать формулу:

Медианная длина трапеции = (a + b + c) / 2

где a, b, c - стороны трапеции.

Примеры:

median_trapeze(3, 4, 5) -> 4
median_trapeze(1, 2, 3) -> 2
median_trapeze(1"
214,charlessutton@: Benchmark Questions Verification V2.ipynb,433,"Напишите функцию, проверяющую, больше ли введенное число элементов заданного массива.","def check_greater(arr, number):
  arr.sort()
  return number > arr[-1]",[],"['assert check_greater([1, 2, 3, 4, 5], 4) == False', 'assert check_greater([2, 3, 4, 5, 6], 8) == True', 'assert check_greater([9, 7, 4, 8, 6, 1], 11) == True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, больше ли введенное число элементов заданного массива.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, больше ли введенное число элементов заданного массива.

Примеры:

check_greater_than([1, 2, 3, 4, 5], 3) -> True
check_greater_than([1, 2, 3, 4, 5], 6) -> False

Входные параметры:

arr - массив
x - число

Выходные параметры:

True - если в массиве больше x элементов
False - если в массиве меньше x элементов

Примеры:

check_greater_than"
215,charlessutton@: Benchmark Questions Verification V2.ipynb,434,"Напишите функцию, которая соответствует строке, в которой за буквой «а» следует одна или несколько букв «б».","import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False
",[],"['assert text_match_one(""ac"")==False', 'assert text_match_one(""dc"")==False', 'assert text_match_one(""abba"")==True']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая соответствует строке, в которой за буквой «а» следует одна или несколько букв «б».","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая соответствует строке, в которой за буквой «а» следует одна или несколько букв «б».

Например, функция должна соответствовать строкам:

* «аб»
* «абб»
* «аббб»
* «абббб»
* и т.д.

Но не должна соответствовать строкам:

* «а»
* «аббббб»
* «абббббб»
* и т.д.

Ваша функция должна быть реализована с помощью регулярных выражений.

Пример использования функции:

>>"
216,charlessutton@: Benchmark Questions Verification V2.ipynb,435,Напишите функцию Python для поиска последней цифры заданного числа.,"def last_Digit(n) :
    return (n % 10) ",[],"['assert last_Digit(123) == 3', 'assert last_Digit(25) == 5', 'assert last_Digit(30) == 0']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для поиска последней цифры заданного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для поиска последней цифры заданного числа.

Примеры:

last_digit(12345) -> 5
last_digit(2345) -> 5
last_digit(345) -> 5
last_digit(45) -> 5
last_digit(5) -> 5
last_digit(123456789) -> 9

Примеры:

last_digit(12345) -> 5
last_digit(2345) -> 5
last_digit(345) -> 5
last_digit(45"
217,charlessutton@: Benchmark Questions Verification V2.ipynb,436,Напишите функцию Python для возврата отрицательных чисел в списке.,"def neg_nos(list1):
  out = []
  for num in list1: 
    if num < 0: 
      out.append(num)
  return out ",[],"['assert neg_nos([-1,4,5,-6]) == [-1,-6]', 'assert neg_nos([-1,-2,3,4]) == [-1,-2]', 'assert neg_nos([-7,-6,8,9]) == [-7,-6]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для возврата отрицательных чисел в списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для возврата отрицательных чисел в списке.

def get_negative_numbers(numbers):
    return [x for x in numbers if x < 0]

print(get_negative_numbers([1, -2, 3, -4, 5, -6]))

Вывод:
[-2, -4, -6]

Напишите функцию Python для возврата четных чисел в списке.

def get_even_numbers(numbers):
    return [x for x in numbers if x % 2 == 0]

print(get_even_numbers([1, 2, 3, "
218,charlessutton@: Benchmark Questions Verification V2.ipynb,437,Напишите функцию для удаления нечетных символов в строке.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",[],"['assert remove_odd(""python"")==(""yhn"")', 'assert remove_odd(""program"")==(""rga"")', 'assert remove_odd(""language"")==(""agae"")']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления нечетных символов в строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления нечетных символов в строке.

>>> remove_odd_symbols('abcdefgh')
'bdfh'

>>> remove_odd_symbols('')
''

>>> remove_odd_symbols('a')
''

>>> remove_odd_symbols('ab')
'b'

>>> remove_odd_symbols('abcd')
'bd'

>>> remove_odd_symbols('abcdefghijklmnopqrstuvwxyz')
'bdfhjlnprtvwyz'

>>> remove_odd_symbols('1234567"
219,charlessutton@: Benchmark Questions Verification V2.ipynb,438,Напишите функцию для подсчета двунаправленных пар кортежей.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return res",[],"['assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3', 'assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2', 'assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета двунаправленных пар кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для подсчета двунаправленных пар кортежей.

Пример:

>>> count_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6)])
2

>>> count_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7)])
3

>>> count_pairs([(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7"
220,charlessutton@: Benchmark Questions Verification V2.ipynb,439,Напишите функцию для объединения списка нескольких целых чисел в одно целое число.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",[],"['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения списка нескольких целых чисел в одно целое число.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для объединения списка нескольких целых чисел в одно целое число.

Например, если в список передать [1, 2, 3, 4, 5], то функция должна вернуть 12345.

Примеры:

>>> merge_numbers([1, 2, 3, 4, 5])
12345
>>> merge_numbers([1, 2, 3, 4])
1234
>>> merge_numbers([1, 2, 3])
123
>>> merge_numbers([1, 2])
12
>>> merge_numbers(["
221,charlessutton@: Benchmark Questions Verification V2.ipynb,440,Напишите функцию для поиска первого наречия и его позиции в предложении.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",[],"['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')', 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')', 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска первого наречия и его позиции в предложении.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска первого наречия и его позиции в предложении.

Примеры:

* ""Я бы хотел поехать в путешествие"" -> ""хотел""
* ""Я бы хотел поехать в путешествие, но не могу"" -> ""хотел""
* ""Я бы хотел поехать в путешествие, но не могу, потому что у меня нет денег"" -> ""хотел""

Примеры с наречием в начале предложения:

* ""Скоро я поеду в путешествие"" -> ""скоро""
* ""Скоро я"
222,charlessutton@: Benchmark Questions Verification V2.ipynb,441,Напишите функцию для нахождения площади поверхности куба заданного размера.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",[],"['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади поверхности куба заданного размера.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади поверхности куба заданного размера.

>>>cube_area(3)
27

>>>cube_area(5)
125

>>>cube_area(10)
1000

>>>cube_area(100)
1000000

>>>cube_area(1000)
1000000000

>>>cube_area(10000)
100000000000

>>>cube_area(100000)
100"
223,charlessutton@: Benchmark Questions Verification V2.ipynb,442,Напишите функцию для нахождения отношения положительных чисел в массиве целых чисел.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",[],"['assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54', 'assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69', 'assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения отношения положительных чисел в массиве целых чисел.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения отношения положительных чисел в массиве целых чисел.

Пример:

```python
>>> find_positive_ratio([-1, 2, 3, -2, 1])
0.4
```

Вот ваша функция:

```python
def find_positive_ratio(numbers):
    # ваш код здесь
    pass
```

Вызовите функцию и проверьте результат:

```python
numbers = [-1, 2, 3, -2, 1]
result = find_positive_ratio(numbers)
print(result)
"
224,charlessutton@: Benchmark Questions Verification V2.ipynb,443,"Напишите функцию Python, чтобы найти наибольшее отрицательное число из заданного списка.","def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",[],"['assert largest_neg([1,2,3,-4,-6]) == -6', 'assert largest_neg([1,2,3,-8,-9]) == -9', 'assert largest_neg([1,2,3,4,-1]) == -1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наибольшее отрицательное число из заданного списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти наибольшее отрицательное число из заданного списка.

Пример:

>>> max_negative([-1, -2, -3, -4, -5])
-1
>>> max_negative([-1, -2, -3, -4, -5, -6])
-1
>>> max_negative([-1, -2, -3, -4, -5, -6, -7])
-1
>>> max_negative([-1, -2, -3, -4, -5, -6, -7, -8])
-1
>>> max_negative([-1, -2"
225,charlessutton@: Benchmark Questions Verification V2.ipynb,444,"Напишите функцию, которая обрезает каждый кортеж по k в заданном списке кортежей.","def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",[],"[""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"", ""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'"", ""assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая обрезает каждый кортеж по k в заданном списке кортежей.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая обрезает каждый кортеж по k в заданном списке кортежей.

Например, если список кортежей:

[
(1, 2, 3, 4, 5),
(6, 7, 8, 9, 10),
(11, 12, 13, 14, 15),
(16, 17, 18, 19, 20)
]

и k равно 3, то функция должна вернуть:

[
(1, 2, 3),
(6, 7, 8),
("
226,charlessutton@: Benchmark Questions Verification V2.ipynb,445,"Напишите функцию, выполняющую индексное умножение элементов кортежа в данных двух кортежах.","def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, выполняющую индексное умножение элементов кортежа в данных двух кортежах.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, выполняющую индексное умножение элементов кортежа в данных двух кортежах.

Пример:

>>> multiply_elements((1, 2, 3), (4, 5, 6))
(4, 10, 18)

>>> multiply_elements((1, 2, 3), (4, 5))
Traceback (most recent call last):
  File ""<stdin>"", line 1, in <module>
  File ""<stdin>"", line 2, in multiply_elements
ValueError: The two tuples must have the same length

>>> multiply_elements((1, 2, 3), (4, "
227,charlessutton@: Benchmark Questions Verification V2.ipynb,446,Напишите функцию Python для подсчета появления всех элементов списка в кортеже.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",[],"[""assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"", 'assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6', 'assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета появления всех элементов списка в кортеже.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета появления всех элементов списка в кортеже.

Пример:

>>> count_elements([1, 2, 3, 4, 5], (1, 2, 3, 4, 5))
[1, 1, 1, 1, 1]
>>> count_elements([1, 2, 3, 4, 5], (1, 2, 3, 4, 5, 6))
[1, 1, 1, 1, 1, 0]
>>> count_elements([1, 2, 3, 4, 5"
228,charlessutton@: Benchmark Questions Verification V2.ipynb,447,Напишите функцию для поиска кубов отдельных элементов в списке.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",[],"['assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'assert cube_nums([10,20,30])==([1000, 8000, 27000])', 'assert cube_nums([12,15])==([1728, 3375])']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска кубов отдельных элементов в списке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска кубов отдельных элементов в списке.

Например, для списка [1, 2, 3, 4, 5, 6, 7, 8, 9] функция должна вернуть [1, 8, 27, 64, 125, 216, 343, 512, 729].

Ваша функция должна быть реализована с использованием генераторов и без использования встроенных функций.

Ваша функция должна быть реализована в виде генератора, который принимает с"
229,charlessutton@: Benchmark Questions Verification V2.ipynb,448,Напишите функцию для вычисления суммы чисел Перрина.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",[],"['assert cal_sum(9) == 49', 'assert cal_sum(10) == 66', 'assert cal_sum(11) == 88']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы чисел Перрина.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для вычисления суммы чисел Перрина.

Примеры:

perrin_sum(1) = 1
perrin_sum(2) = 2
perrin_sum(3) = 3
perrin_sum(4) = 4
perrin_sum(5) = 5
perrin_sum(6) = 6
perrin_sum(7) = 7
perrin_sum(8) = 8
perrin_sum(9) = 9
perrin_sum(10) = 10

Примеры:

perrin_sum(11)"
230,charlessutton@: Benchmark Questions Verification V2.ipynb,450,Напишите функцию для извлечения строк заданного размера из заданного списка строковых значений.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",[],"[""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения строк заданного размера из заданного списка строковых значений.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для извлечения строк заданного размера из заданного списка строковых значений.

Примеры:

>>> get_strings_from_list(['abc', 'def', 'ghi'], 2)
['abc', 'def']
>>> get_strings_from_list(['abc', 'def', 'ghi'], 1)
['abc']
>>> get_strings_from_list(['abc', 'def', 'ghi'], 0)
[]
>>> get_strings_from_list([], 2)
[]

Функция должна принимать на вход список строковых значений и целое число.
"
231,charlessutton@: Benchmark Questions Verification V2.ipynb,451,Напишите функцию для удаления всех пробелов из заданной строки.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",[],"[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления всех пробелов из заданной строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления всех пробелов из заданной строки.

>>> remove_spaces('Hello, World!')
'Hello,World!'
>>> remove_spaces('Hello, World!')
'Hello,World!'

>>> remove_spaces('Hello, World!')
'Hello,World!'

>>> remove_spaces('Hello, World!')
'Hello,World!'

>>> remove_spaces('Hello, World!')
'Hello,World!'

>>> remove_spaces('Hello, World!')
'Hello,World!'

>>> remove_spaces('Hello, World!')
'Hello,World!'

>>> remove"
232,charlessutton@: Benchmark Questions Verification V2.ipynb,452,"Напишите функцию, которая выдает сумму убытка при продаже, если данная сумма имеет убыток, иначе возвращает 0.","def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return 0",[],"['assert loss_amount(1500,1200)==0', 'assert loss_amount(100,200)==100', 'assert loss_amount(2000,5000)==3000']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая выдает сумму убытка при продаже, если данная сумма имеет убыток, иначе возвращает 0.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая выдает сумму убытка при продаже, если данная сумма имеет убыток, иначе возвращает 0.

Примеры:

```
>>> profit_loss(100, 100)
0
>>> profit_loss(100, 150)
50
>>> profit_loss(150, 100)
-50
```

<<SYS>>
def profit_loss(cost, price):
    return max(price - cost, 0)
<</SYS>>

Напишите функцию, которая выдает сумму прибыли при продаже, если данная сумма имеет прибыль"
233,charlessutton@: Benchmark Questions Verification V2.ipynb,453,"Напишите функцию Python, чтобы найти сумму четных множителей числа.","import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res",[],"['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму четных множителей числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму четных множителей числа.

Например, если ввести число 12, то функция должна вернуть 6, потому что 2+2+2+3=6.

Если ввести число 15, то функция должна вернуть 0, потому что 3 не является четным множителем.

Если ввести число 18, то функция должна вернуть 18, потому что 1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+1+"
234,charlessutton@: Benchmark Questions Verification V2.ipynb,454,"Напишите функцию, которая соответствует слову, содержащему букву «z».","import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_wordz(""pythonz."")==True', 'assert text_match_wordz(""xyz."")==True', 'assert text_match_wordz(""  lang  ."")==False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая соответствует слову, содержащему букву «z».","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая соответствует слову, содержащему букву «z».

Например:

>>> is_z('z')
True
>>> is_z('zz')
True
>>> is_z('zzz')
True
>>> is_z('')
False
>>> is_z('a')
False
>>> is_z('ab')
False
>>> is_z('abc')
False

Примеры использования:

>>> is_z('z')
True
>>> is_z('zz')
True
>>> is_z('zzz')
True
>>> is_z('')
False"
235,charlessutton@: Benchmark Questions Verification V2.ipynb,455,"Напишите функцию, проверяющую, содержит ли данный номер месяца 31 день или нет.","def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",[],"['assert check_monthnumb_number(5)==True', 'assert check_monthnumb_number(2)==False', 'assert check_monthnumb_number(6)==False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, содержит ли данный номер месяца 31 день или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, содержит ли данный номер месяца 31 день или нет.

Примеры:

>>> check_month(1)
False
>>> check_month(2)
True
>>> check_month(3)
False
>>> check_month(4)
True
>>> check_month(5)
False
>>> check_month(6)
True
>>> check_month(7)
False
>>> check_month(8)
True
>>> check_month(9)
False
>>> check_month(10)
True
>>> check_month(11)
False
>>> check_month"
236,charlessutton@: Benchmark Questions Verification V2.ipynb,456,"Напишите функцию, которая переворачивает каждую строку в заданном списке строковых значений.","def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",[],"[""assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"", ""assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']"", ""assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая переворачивает каждую строку в заданном списке строковых значений.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая переворачивает каждую строку в заданном списке строковых значений.

Пример:

>>> reverse_lines([""hello"", ""world"", ""!""])
[""!"", ""dlrow"", ""olleh""]

>>> reverse_lines([""hello"", ""world"", ""!""])
[""!"", ""dlrow"", ""olleh""]

>>> reverse_lines([""hello"", ""world"", ""!""])
[""!"", ""dlrow"", ""olleh""]

>>> reverse_lines([""hello"", ""world"", ""!""])
[""!"", ""dlrow"", ""olleh""]

>>> reverse_lines([""hello"","
237,charlessutton@: Benchmark Questions Verification V2.ipynb,457,"Напишите функцию Python, чтобы найти подсписок минимальной длины.","def Find_Min(lst): 
    return min(lst, key=len) ",[],"['assert Find_Min([[1],[1,2],[1,2,3]]) == [1]', 'assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]', ""assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти подсписок минимальной длины.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти подсписок минимальной длины.

Пример:

Входные данные:

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Выходные данные:

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

Входные данные:

[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12"
238,charlessutton@: Benchmark Questions Verification V2.ipynb,458,Напишите функцию для нахождения площади прямоугольника.,"def rectangle_area(l,b):
  area=l*b
  return area",[],"['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади прямоугольника.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения площади прямоугольника.

Примеры:

>>> rect_area(3, 4)
12
>>> rect_area(2)
4

Функция должна принимать 2 параметра. Если передать только один параметр, то он должен быть длиной стороны прямоугольника, а высота должна быть равна 1.

Примеры:

>>> rect_area(3)
3
>>> rect_area(2, 3)
6

Если передать более 2 параметров, то функ"
239,charlessutton@: Benchmark Questions Verification V2.ipynb,459,Напишите функцию для удаления подстрок в верхнем регистре из заданной строки.,"import re
def remove_uppercase(str1):
  return re.sub('[A-Z]', '', str1)",[],"[""assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"", ""assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'"", ""assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления подстрок в верхнем регистре из заданной строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления подстрок в верхнем регистре из заданной строки.

Примеры:

```python
>>> remove_upper_case_substrings('Hello World')
'Hello World'
>>> remove_upper_case_substrings('Hello WORLD')
'Hello '
>>> remove_upper_case_substrings('HELLO WORLD')
''
```

<<SYS>>
def remove_upper_case_substrings(s):
    return ''.join(c for c in s if c.islower())
<</SYS>>

Напишите функцию для удаления подстрок в нижнем реги"
240,charlessutton@: Benchmark Questions Verification V2.ipynb,460,"Напишите функцию Python, чтобы получить первый элемент каждого подсписка.","def Extract(lst): 
    return [item[0] for item in lst] ",[],"['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы получить первый элемент каждого подсписка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы получить первый элемент каждого подсписка.

Пример:

>>> first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
[1, 4, 7]

>>> first_element([])
[]

>>> first_element([[1], [2], [3]])
[1, 2, 3]

>>> first_element([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]])
[1, 4, 7,"
241,charlessutton@: Benchmark Questions Verification V2.ipynb,461,Напишите функцию Python для подсчета символов верхнего регистра в заданной строке.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",[],"[""assert upper_ctr('PYthon') == 1"", ""assert upper_ctr('BigData') == 1"", ""assert upper_ctr('program') == 0""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета символов верхнего регистра в заданной строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для подсчета символов верхнего регистра в заданной строке.

Примеры:

```
>>> count_uppercase_letters("""")
0
>>> count_uppercase_letters(""Hello"")
2
>>> count_uppercase_letters(""HELLO"")
5
>>> count_uppercase_letters(""Hello, World!"")
3
```

<<SYS>>
def count_uppercase_letters(s):
    return sum(1 for c in s if c.isupper())
<</SYS>>

Напишите функцию Python для подсчета символов нижнего регистра"
242,charlessutton@: Benchmark Questions Verification V2.ipynb,462,Напишите функцию для поиска всех возможных комбинаций элементов заданного списка.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",[],"[""assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"", ""assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]"", ""assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска всех возможных комбинаций элементов заданного списка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска всех возможных комбинаций элементов заданного списка.

Пример:

>>> all_combinations([1, 2, 3])
[[1, 2, 3], [1, 3, 2], [2, 1, 3], [2, 3, 1], [3, 1, 2], [3, 2, 1]]

>>> all_combinations([1, 2, 3, 4])
[[1, 2, 3, 4], [1, 2, 4, 3], [1, 3, 2, 4], ["
243,charlessutton@: Benchmark Questions Verification V2.ipynb,463,Напишите функцию для поиска максимального продукта подмассива данного массива.,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",[],"['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимального продукта подмассива данного массива.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска максимального продукта подмассива данного массива.

Пример:

max_product([1, 2, 3, 4]) == 24
max_product([-1, -2, -3, -4]) == -24
max_product([-1, -2, 3, -4]) == 12

Пример решения:

def max_product(arr):
    if len(arr) == 0:
        return 0
    max_product = arr[0]
    min_product = arr[0]
    for i in range(1, len(arr)):
        product"
244,charlessutton@: Benchmark Questions Verification V2.ipynb,464,"Напишите функцию, проверяющую, все ли значения в словаре одинаковы.","def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",[],"[""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, все ли значения в словаре одинаковы.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, проверяющую, все ли значения в словаре одинаковы.

Примеры:

check_all_equal({}) == True
check_all_equal({'a': 1}) == True
check_all_equal({'a': 1, 'b': 1}) == True
check_all_equal({'a': 1, 'b': 2}) == False
check_all_equal({'a': 1, 'b': 2, 'c': 2}) == False

Ваша функция должна работать для словарей произвольной вложенности.

Примеры:

check_all_equal"
245,charlessutton@: Benchmark Questions Verification V2.ipynb,465,Напишите функцию для удаления пустых элементов из заданного словаря.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",[],"[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"", ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"", ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления пустых элементов из заданного словаря.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления пустых элементов из заданного словаря.

Примеры:

>>> empty_keys({'a': 1, 'b': 2, 'c': 3})
{'a': 1, 'b': 2, 'c': 3}
>>> empty_keys({'a': 1, 'b': 2, 'c': 3, 'd': None})
{'a': 1, 'b': 2, 'c': 3}
>>> empty_keys({'a': 1, 'b': 2, 'c': 3, 'd': None, 'e': ''})
{'"
246,charlessutton@: Benchmark Questions Verification V2.ipynb,468,"Напишите функцию для нахождения максимального произведения, полученного путем умножения чисел возрастающей подпоследовательности этого массива.","def max_product(arr):   
  n = len(arr)
  mpis = arr[:]
  for i in range(n): 
    current_prod = arr[i]
    j = i + 1
    while j < n:
      if arr[j-1] > arr[j]: 
        break
      current_prod *= arr[j]
      if current_prod > mpis[j]:
        mpis[j] = current_prod 
      j = j + 1
  return max(mpis)",[],"['assert max_product([3, 100, 4, 5, 150, 6]) == 3000', 'assert max_product([4, 42, 55, 68, 80]) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения максимального произведения, полученного путем умножения чисел возрастающей подпоследовательности этого массива.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для нахождения максимального произведения, полученного путем умножения чисел возрастающей подпоследовательности этого массива.

Пример:

В массиве [1, 2, 3, 4, 5] максимальное произведение получается из чисел 2, 3, 4, то есть 24.

В массиве [1, 2, 3, 4, 5, 6] максимальное произведение получается из чисел 2, 3, 4, 5, то есть 120.

В массиве [1, 2, 3, 4, 5, 6, "
247,charlessutton@: Benchmark Questions Verification V2.ipynb,470,Напишите функцию для поиска попарного сложения соседних элементов данного кортежа.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",[],"['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска попарного сложения соседних элементов данного кортежа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для поиска попарного сложения соседних элементов данного кортежа.

Примеры:

>>> pair_sum((1, 2, 3, 4, 5))
(2, 4, 6, 8)
>>> pair_sum((1, 2, 3, 4, 5, 6))
(2, 4, 6, 8, 10)
>>> pair_sum((1, 2, 3, 4, 5, 6, 7))
(2, 4, 6, 8, 10, 12)

>>> pair_sum"
248,charlessutton@: Benchmark Questions Verification V2.ipynb,471,"Напишите функцию Python, чтобы найти продукт умножения массива по модулю n.","def find_remainder(arr, n): 
    mul = 1
    for i in range(len(arr)):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",[],"['assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9', 'assert find_remainder([1,1,1],1) == 0', 'assert find_remainder([1,2,1],2) == 0']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти продукт умножения массива по модулю n.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти продукт умножения массива по модулю n.

Пример:

Вход:

n = 3

arr = [1, 2, 3, 4, 5]

Выход:

12

Вход:

n = 4

arr = [1, 2, 3, 4, 5]

Выход:

12

Вход:

n = 5

arr = [1, 2, 3, 4, 5]

Выход:

12

Вход:

n = 6
"
249,charlessutton@: Benchmark Questions Verification V2.ipynb,472,"Напишите функцию Python, чтобы проверить, содержит ли данный список последовательные числа или нет.","def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",[],"['assert check_Consecutive([1,2,3,4,5]) == True', 'assert check_Consecutive([1,2,3,5,6]) == False', 'assert check_Consecutive([1,2,1]) == False']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, содержит ли данный список последовательные числа или нет.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы проверить, содержит ли данный список последовательные числа или нет.

Примеры:

check_sequence([1, 2, 3, 4, 5]) -> True
check_sequence([1, 2, 4, 5, 3]) -> False
check_sequence([1, 2, 3, 3, 4]) -> False
check_sequence([1, 2, 3, 4, 5, 6]) -> True
check_sequence([1, 2, 3, 4, 5, 6, 7]) -> True
check_sequence([1, 2, 3, 4,"
250,charlessutton@: Benchmark Questions Verification V2.ipynb,473,"Напишите функцию, которая находит пересечение кортежей элементов в заданном списке кортежей независимо от их порядка.","def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",[],"['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит пересечение кортежей элементов в заданном списке кортежей независимо от их порядка.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию, которая находит пересечение кортежей элементов в заданном списке кортежей независимо от их порядка.

Например, для кортежей:

[('a', 'b'), ('c', 'd'), ('e', 'f')]

функция должна вернуть:

['a', 'c', 'e']

Пример решения:

def get_intersection(tuple_list):
    result = []
    for i in range(len(tuple_list[0])):
        for j in range(len(tuple_list)):
            if tuple_list[j][i] not in result:
                result.append(tuple_list[j][i])
"
251,charlessutton@: Benchmark Questions Verification V2.ipynb,474,Напишите функцию для замены символов в строке.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",[],"['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")', 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")', 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для замены символов в строке.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для замены символов в строке.

Примеры:

```python
>>> replace_symbols('abc', 'a', 'b')
'bbc'
>>> replace_symbols('abc', 'a', 'c')
'ccb'
>>> replace_symbols('abc', 'a', 'd')
'dbc'
```

<<SYS>>
def replace_symbols(string, old_symbol, new_symbol):
    return string.replace(old_symbol, new_symbol)
<</SYS>>

Напишите функцию для проверки, является ли строка па"
252,charlessutton@: Benchmark Questions Verification V2.ipynb,475,Напишите функцию для сортировки словаря по значению.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",[],"[""assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"", ""assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"", ""assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]""]","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки словаря по значению.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для сортировки словаря по значению.

Пример:

>>> sort_dict_by_value({'a': 1, 'b': 2, 'c': 3})
{'b': 2, 'c': 3, 'a': 1}

>>> sort_dict_by_value({'a': 1, 'b': 2, 'c': 3}, reverse=True)
{'c': 3, 'b': 2, 'a': 1}

>>> sort_dict_by_value({'a': 1, 'b': 2, 'c': 3},"
253,charlessutton@: Benchmark Questions Verification V2.ipynb,476,"Напишите функцию Python, чтобы найти сумму наибольшего и наименьшего значений в заданном массиве.","def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",[],"['assert big_sum([1,2,3]) == 4', 'assert big_sum([-1,2,3,4]) == 3', 'assert big_sum([2,3,6]) == 8']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму наибольшего и наименьшего значений в заданном массиве.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти сумму наибольшего и наименьшего значений в заданном массиве.

Пример:

Вход: [1, 2, 3, 4, 5]
Выход: 10

Вход: [10, 20, 30, 40, 50]
Выход: 60

Вход: [100, 200, 300, 400, 500]
Выход: 1100

Вход: [1000, 2000, 3000, 4000, 5"
254,charlessutton@: Benchmark Questions Verification V2.ipynb,477,Напишите функцию Python для преобразования заданной строки в нижний регистр.,"def is_lower(string):
  return (string.lower())",[],"['assert is_lower(""InValid"") == ""invalid""', 'assert is_lower(""TruE"") == ""true""', 'assert is_lower(""SenTenCE"") == ""sentence""']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для преобразования заданной строки в нижний регистр.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python для преобразования заданной строки в нижний регистр.

Примеры:

>>> to_lower_case(""Hello World"")
""hello world""
>>> to_lower_case(""HELLO WORLD"")
""hello world""
>>> to_lower_case(""HeLlO WoRlD"")
""hello world""

>>> to_lower_case("""")
""""

>>> to_lower_case(""12345"")
""12345""

>>> to_lower_case(""$%^&*()_+-=[]{}|;':\""<>,./?"")
"""
255,charlessutton@: Benchmark Questions Verification V2.ipynb,478,Напишите функцию для удаления подстрок в нижнем регистре из заданной строки.,"import re
def remove_lowercase(str1):
 return re.sub('[a-z]', '', str1)",[],"['assert remove_lowercase(""PYTHon"")==(\'PYTH\')', 'assert remove_lowercase(""FInD"")==(\'FID\')', 'assert remove_lowercase(""STRinG"")==(\'STRG\')']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления подстрок в нижнем регистре из заданной строки.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию для удаления подстрок в нижнем регистре из заданной строки.

Например, если входная строка - ""Hello, World!"", то функция должна вернуть ""H, W!"".

Ваша функция должна быть реализована с использованием регулярных выражений.

Пример решения:
```python
import re

def remove_lowercase_substrings(string):
    return re.sub(r'[a-z]+', '', string)
```

Вызов функции:
```python
print(remove_lowercase_substrings('Hello, World!'))
```

Ре"
256,charlessutton@: Benchmark Questions Verification V2.ipynb,479,"Напишите функцию Python, чтобы найти первую цифру заданного числа.","def first_Digit(n) :  
    while n >= 10:  
        n = n / 10 
    return int(n) ",[],"['assert first_Digit(123) == 1', 'assert first_Digit(456) == 4', 'assert first_Digit(12) == 1']","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти первую цифру заданного числа.","<s><<SYS>>
Provide answers in Python
<</SYS>>

Напишите функцию Python, чтобы найти первую цифру заданного числа.

Примеры:

find_first_digit(12345) -> 1
find_first_digit(2345) -> 2
find_first_digit(345) -> 3
find_first_digit(45) -> 4
find_first_digit(5) -> 5

Примеры:

find_first_digit(12345) -> 1
find_first_digit(2345) -> 2
find_first_digit(345) -> 3
find_first_digit(45) -> 4
find_first_digit(5) -> 5
"
