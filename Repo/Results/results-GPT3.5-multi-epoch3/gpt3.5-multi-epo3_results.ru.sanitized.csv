source_file,task_id,prompt,code,test_imports,test_list,gpt_result
Benchmark Questions Verification V2.ipynb,11,Напишите функцию Python для удаления первого и последнего вхождения данного символа из строки.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",[],"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","def remove_first_last_char(string, char):
    # Check if the character exists in the string
    if char in string:
        # Remove the first occurrence of the character
        string = string.replace(char, '', 1)
        
        # Remove the last occurrence of the character
        string = string[::-1].replace(char, '', 1)[::-1]
    
    return string"
Benchmark Questions Verification V2.ipynb,12,"Напишите функцию, сортирующую заданную матрицу в порядке возрастания суммы ее строк.","def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",[],"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","def sort_matrix_by_row_sum(matrix):
    row_sums = [sum(row) for row in matrix]
    sorted_indices = sorted(range(len(row_sums)), key=lambda x: row_sums[x])
    sorted_matrix = [matrix[i] for i in sorted_indices]
    return sorted_matrix"
Benchmark Questions Verification V2.ipynb,14,"Напишите функцию Python, чтобы найти объем треугольной призмы.","def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",[],"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","def volume_of_triangular_prism(base_length, base_width, height):
    base_area = 0.5 * base_length * base_width
    volume = base_area * height
    return volume"
Benchmark Questions Verification V2.ipynb,16,"Напишите функцию, которая возвращает true, если входная строка содержит последовательность строчных букв, соединенных подчеркиванием, и false в противном случае.","import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_lowercase_underscore(""aab_cbbbc"")==(True)', 'assert text_lowercase_underscore(""aab_Abbbc"")==(False)', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(False)']","def is_snake_case(string):
    # Split the string by underscores
    parts = string.split(""_"")
    
    # Check if each part is lowercase
    for part in parts:
        if not part.islower():
            return False
    
    # Check if the string contains underscores
    return len(parts) > 1"
Benchmark Questions Verification V2.ipynb,17,"Напишите функцию, которая возвращает периметр квадрата, учитывая длину его стороны в качестве входных данных.","def square_perimeter(a):
  perimeter=4*a
  return perimeter",[],"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","def perimeter(length):
    return 4 * length"
Benchmark Questions Verification V2.ipynb,18,"Напишите функцию для удаления символов из первой строки, присутствующих во второй строке.","NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",[],"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\'']","def remove_characters(string1, string2):
    cleaned_string = """"
    for char in string1:
        if char not in string2:
            cleaned_string += char
    return cleaned_string"
Benchmark Questions Verification V2.ipynb,19,"Напишите функцию, определяющую, содержит ли данный массив целых чисел какой-либо повторяющийся элемент.","def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",[],"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","def contains_duplicate(nums):
    return len(nums) != len(set(nums))"
Benchmark Questions Verification V2.ipynb,20,"Напишите функцию, проверяющую, является ли данное число деревянным мячом или нет.","def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",[],"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","def is_wooden_ball(number):
    if number == 0:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,56,"Напишите функцию Python, чтобы проверить, является ли заданное число на единицу меньше его обратного значения в два раза.","def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",[],"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']","def is_number_valid(number):
    return number == -2 * (1/number)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,57,"Напишите функцию Python, чтобы найти наибольшее число, которое можно составить из заданного списка цифр.","def find_Max_Num(arr) : 
    n = len(arr)
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",[],"['assert find_Max_Num([1,2,3]) == 321', 'assert find_Max_Num([4,5,6,1]) == 6541', 'assert find_Max_Num([1,2,3,9]) == 9321']","def find_largest_number(digits):
    permutations = permutations(digits)
    largest_number = None
    for permutation in permutations:
        number = int(''.join(permutation))
        if largest_number is None or number > largest_number:
            largest_number = number
    return largest_number"
Mike's Copy of Benchmark Questions Verification V2.ipynb,58,"Напишите функцию Python, чтобы проверить, имеют ли данные два целых числа противоположный знак или нет.","def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",[],"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False', 'assert opposite_Signs(-2,2) == True']","def have_opposite_sign(a, b):
    if a < 0 and b > 0:
        return True
    elif a > 0 and b < 0:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,59,Напишите функцию для нахождения n-го восьмиугольного числа.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",[],"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']","def octagonal_number(n):
    return n * (3 * n - 2)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,61,"Напишите функцию Python для подсчета количества подстрок, сумма цифр которых равна их длине.","from collections import defaultdict
def count_Substrings(s):
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",[],"[""assert count_Substrings('112112') == 6"", ""assert count_Substrings('111') == 6"", ""assert count_Substrings('1101112') == 12""]","def count_substrings(string):
    count = 0
    length = len(string)
    for i in range(length):
        for j in range(i+1, length+1):
            substring = string[i:j]
            if sum(int(digit) for digit in substring) == len(substring):
                count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,62,"Напишите функцию Python, чтобы найти наименьшее число в списке.","def smallest_num(xs):
  return min(xs)
",[],"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']","def find_smallest_number(numbers):
    smallest = numbers[0]
    for num in numbers:
        if num < smallest:
            smallest = num
    return smallest"
Mike's Copy of Benchmark Questions Verification V2.ipynb,63,Напишите функцию для поиска максимальной разницы между доступными парами в заданном списке кортежей.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",[],"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']","def max_difference(pairs):
    if len(pairs) < 2:
        return None"
Mike's Copy of Benchmark Questions Verification V2.ipynb,64,"Напишите функцию для сортировки списка кортежей, используя второе значение каждого кортежа.","def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",[],"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]","def sort_tuples(lst):
    return sorted(lst, key=lambda tup: tup[1])"
Mike's Copy of Benchmark Questions Verification V2.ipynb,65,"Напишите функцию, которая сглаживает список и суммирует все его элементы.","def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",[],"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']","def smooth_and_sum(lst):
    smoothed_lst = [lst[0]]
    for i in range(1, len(lst)-1):
        smoothed_lst.append((lst[i-1] + lst[i] + lst[i+1]) / 3)
    smoothed_lst.append(lst[-1])
    return sum(smoothed_lst)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,66,Напишите функцию Python для подсчета количества положительных чисел в списке.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",[],"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']","def count_positive_numbers(numbers):
    count = 0
    for num in numbers:
        if num > 0:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,67,"Напишите функцию, позволяющую найти количество способов разбить набор чисел Белла.","def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",[],"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']","def count_partition_bell_numbers(n):
    # Base case
    if n == 0:
        return 1
    
    # Initialize the count
    count = 0
    
    # Iterate over all possible partitions of n
    for k in range(1, n+1):
        count += count_partition_bell_numbers(n-k) * stirling_number(n, k)
    
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,68,"Напишите функцию Python, чтобы проверить, является ли данный массив монотонным или нет.","def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",[],"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']","def is_monotonic(arr):
    is_increasing = all(arr[i] <= arr[i + 1] for i in range(len(arr) - 1))
    is_decreasing = all(arr[i] >= arr[i + 1] for i in range(len(arr) - 1))
    return is_increasing or is_decreasing"
Mike's Copy of Benchmark Questions Verification V2.ipynb,69,"Напишите функцию, проверяющую, содержит ли список заданный подсписок или нет.","def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",[],"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']","def contains_sublist(lst, sublist):
    for i in range(len(lst) - len(sublist) + 1):
        if lst[i:i+len(sublist)] == sublist:
            return True
    return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,70,"Напишите функцию, определяющую, имеют ли все заданные кортежи одинаковую длину или нет.","def find_equal_tuple(Input):
  k = 0 if not Input else len(Input[0])
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input):
  return find_equal_tuple(Input) == 1",[],"['assert get_equal([(11, 22, 33), (44, 55, 66)]) == True', 'assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False', 'assert get_equal([(1, 2), (3, 4)]) == True']","def have_same_length(*tuples):
    length = len(tuples[0])
    for tpl in tuples:
        if len(tpl) != length:
            return False
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,71,Напишите функцию для сортировки списка элементов.,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",[],"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']","def sort_list(lst):
    lst.sort()
    return lst"
Mike's Copy of Benchmark Questions Verification V2.ipynb,72,"Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как разность двух квадратов или нет.","def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",[],"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']","def is_difference_of_squares(n):
    for a in range(1, int(n**0.5) + 1):
        b_squared = a**2 - n
        if b_squared >= 0 and int(b_squared**0.5)**2 == b_squared:
            return True
    return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,74,"Напишите функцию, проверяющую, следует ли она последовательности, заданной в массиве шаблонов.","def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",[],"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False']","def follows_pattern(patterns):
    for i in range(1, len(patterns)):
        if patterns[i][:i] != patterns[0]:
            return False
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,75,"Напишите функцию для поиска кортежей, все элементы которых делятся на k из заданного списка кортежей.","def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return res",[],"['assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]', 'assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]', 'assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]']","def find_divisible_tuples(tuples, k):
    divisible_tuples = []
    for tpl in tuples:
        is_divisible = True
        for element in tpl:
            if element % k != 0:
                is_divisible = False
                break
        if is_divisible:
            divisible_tuples.append(tpl)
    return divisible_tuples"
Mike's Copy of Benchmark Questions Verification V2.ipynb,77,"Напишите функцию Python, чтобы определить, делится ли число на 11.","def is_Diff(n): 
    return (n % 11 == 0) ",[],"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']","def is_divisible_by_11(number):
    # Convert the number to a string
    number_str = str(number)
    
    # Calculate the alternating sum of the digits
    alternating_sum = 0
    for i in range(len(number_str)):
        digit = int(number_str[i])
        if i % 2 == 0:
            alternating_sum += digit
        else:
            alternating_sum -= digit
    
    # Check if the alternating sum is divisible by 11
    if alternating_sum % 11 == 0:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,79,"Напишите функцию Python, чтобы проверить, является ли длина слова нечетной или нет.","def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",[],"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']","def is_length_odd(word):
    if len(word) % 2 != 0:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,80,Напишите функцию для нахождения n-го тетраэдрического числа.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",[],"['assert tetrahedral_number(5) == 35', 'assert tetrahedral_number(6) == 56', 'assert tetrahedral_number(7) == 84']","def tetrahedral_number(n):
    return (n * (n + 1) * (n + 2)) // 6"
Mike's Copy of Benchmark Questions Verification V2.ipynb,82,Напишите функцию для определения объема шара.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",['import math'],"['assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)', 'assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)', 'assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)']","def calculate_volume(radius):
    volume = (4/3) * math.pi * radius**3
    return volume"
Mike's Copy of Benchmark Questions Verification V2.ipynb,83,"Напишите функцию Python, чтобы найти символ, полученный путем сложения значения ASCII всех символов заданной строки по модулю 26.","def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",[],"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']","def find_modulo26_sum(string):
    # Initialize the sum to 0
    modulo26_sum = 0
    
    # Iterate through each character in the string
    for char in string:
        # Get the ASCII value of the character
        ascii_value = ord(char)
        
        # Add the ASCII value to the sum
        modulo26_sum += ascii_value
    
    # Take the sum modulo 26
    modulo26_sum = modulo26_sum % 26
    
    # Convert the modulo 26 sum back to a character
    result_char = chr(modulo26_sum)
    
    return result_char"
Mike's Copy of Benchmark Questions Verification V2.ipynb,84,Напишите функцию для поиска n-го числа в последовательности Ньюмана-Конвея.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",[],"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']","def newman_conway(n):
    # Base cases
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    
    # Calculate the n-th number using the recursive formula
    return newman_conway(newman_conway(n-1)) + newman_conway(n - newman_conway(n-1))"
Mike's Copy of Benchmark Questions Verification V2.ipynb,85,Напишите функцию для нахождения площади поверхности сферы.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",['import math'],"['assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)']","def surface_area(radius):
    area = 4 * math.pi * radius**2
    return area"
Mike's Copy of Benchmark Questions Verification V2.ipynb,86,Напишите функцию для поиска n-ного центрированного шестиугольного числа.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",[],"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']","def centered_hexagonal_number(n):
    if n == 0:
        return 0
    else:
        return 3 * n * (n - 1) + 1"
Mike's Copy of Benchmark Questions Verification V2.ipynb,87,Напишите функцию для объединения трех словарей в один.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",[],"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']","def merge_dict(dict1, dict2, dict3):
    merged_dict = {}
    for dict in [dict1, dict2, dict3]:
        merged_dict.update(dict)
    return merged_dict"
Mike's Copy of Benchmark Questions Verification V2.ipynb,88,"Напишите функцию, чтобы получить частоту всех элементов в списке, возвращаемую в виде словаря.","import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",[],"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})']","def get_frequency(lst):
    frequency = {}
    for element in lst:
        if element in frequency:
            frequency[element] += 1
        else:
            frequency[element] = 1
    return frequency"
Mike's Copy of Benchmark Questions Verification V2.ipynb,89,"Напишите функцию для поиска ближайшего числа меньшего, чем n.","def closest_num(N):
  return (N - 1)",[],"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']","def find_nearest_smaller_number(n):
    for i in range(n-1, 0, -1):
        if i < n:
            return i
    return None"
Mike's Copy of Benchmark Questions Verification V2.ipynb,90,"Напишите функцию Python, чтобы найти длину самого длинного слова.","def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",[],"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']","def find_longest_word_length(sentence):
    words = sentence.split()
    longest_word_length = 0
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length"
Mike's Copy of Benchmark Questions Verification V2.ipynb,91,"Напишите функцию, проверяющую, присутствует ли строка в качестве подстроки в заданном списке строковых значений.","def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",[],"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']","def is_string_in_list(string, string_list):
    for str in string_list:
        if string in str:
            return True
    return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,92,"Напишите функцию, проверяющую, является ли данное число волнистым или нет.","def is_undulating(n): 
	n = str(n)
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",[],"['assert is_undulating(1212121) == True', 'assert is_undulating(1991) == False', 'assert is_undulating(121) == True']","def is_wavy_number(num):
    # Convert the number to a string
    num_str = str(num)
    
    # Check if the length of the number is less than 3
    if len(num_str) < 3:
        return False
    
    # Check if the number is wavy
    for i in range(2, len(num_str)):
        if (num_str[i] >= num_str[i-1] and num_str[i-1] <= num_str[i-2]) or \
            (num_str[i] <= num_str[i-1] and num_str[i-1] >= num_str[i-2]):
            return False
    
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,93,Напишите функцию для вычисления значения «а» в степени «b».,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",[],"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']","def calculate_power(a, b):
    return a ** b"
Mike's Copy of Benchmark Questions Verification V2.ipynb,94,"Учитывая список кортежей, напишите функцию, которая возвращает первое значение кортежа с наименьшим вторым значением.","from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",[],"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]","def get_tuple_with_min_second_value(tuples):
    if len(tuples) == 0:
        return None"
Mike's Copy of Benchmark Questions Verification V2.ipynb,95,"Напишите функцию Python, чтобы найти длину наименьшего списка в списке списков.","def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",[],"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']","def find_shortest_list_length(lists):
    shortest_length = float('inf')
    for lst in lists:
        length = len(lst)
        if length < shortest_length:
            shortest_length = length
    return shortest_length"
Mike's Copy of Benchmark Questions Verification V2.ipynb,96,"Напишите функцию Python, чтобы найти количество делителей заданного целого числа.","def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",[],"['assert divisor(15) == 4', 'assert divisor(12) == 6', 'assert divisor(9) == 3']","def count_divisors(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,97,"Напишите функцию для поиска частоты каждого элемента в плоском списке списков, возвращаемом в словаре.","def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",[],"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']","def find_frequency(lst):
    frequency = {}
    for sub_lst in lst:
        for element in sub_lst:
            if element in frequency:
                frequency[element] += 1
            else:
                frequency[element] = 1
    return frequency"
Mike's Copy of Benchmark Questions Verification V2.ipynb,98,Напишите функцию для умножения всех чисел в списке и деления на длину списка.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",['import math'],"['assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)', 'assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)', 'assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)']","def multiply_and_divide(numbers):
    result = 1
    for num in numbers:
        result *= num
    return result / len(numbers)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,99,"Напишите функцию для преобразования данного десятичного числа в его двоичный эквивалент, представленный в виде строки без ведущих нулей.","def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",[],"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111'""]","def decimal_to_binary(decimal):
    binary = """"
    while decimal > 0:
        binary = str(decimal % 2) + binary
        decimal = decimal // 2
    return binary"
Mike's Copy of Benchmark Questions Verification V2.ipynb,100,"Напишите функцию для поиска следующего наименьшего палиндрома указанного целого числа, возвращаемого в виде целого числа.","import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",[],"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']","def is_palindrome(n):
    # Convert the number to a string
    n_str = str(n)
    
    # Check if the string is equal to its reverse
    if n_str == n_str[::-1]:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,101,"Напишите функцию для поиска k-го элемента в заданном массиве, используя индексацию с отсчетом от 1.","def kth_element(arr, k):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",[],"['assert kth_element([12,3,5,7,19], 2) == 3', 'assert kth_element([17,24,8,23], 3) == 8', 'assert kth_element([16,21,25,36,4], 4) == 36']","def find_kth_element(array, k):
    return array[k-1]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,102,Напишите функцию для преобразования строки регистра змеи в строку регистра верблюда.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]","def snake_case_to_camel_case(snake_case):
    # Split the snake case string into words
    words = snake_case.split('_')
    
    # Capitalize the first letter of each word (except the first word)
    capitalized_words = [words[0]] + [word.capitalize() for word in words[1:]]
    
    # Join the capitalized words into a camel case string
    camel_case = ''.join(capitalized_words)
    
    return camel_case"
Mike's Copy of Benchmark Questions Verification V2.ipynb,103,"Напишите функцию для нахождения эйлерова числа a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",[],"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']","def eulerian_number(n, m):
    if m == 0:
        if n == 0:
            return 1
        else:
            return 0
    else:
        if n < m:
            return 0
        else:
            return (n-m) * eulerian_number(n-1, m-1) + (m+1) * eulerian_number(n-1, m)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,104,Напишите функцию для сортировки каждого подсписка строк в заданном списке списков.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
",[],"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']","def sort_sublists(strings):
    for sublist in strings:
        sublist.sort()
    return strings"
Mike's Copy of Benchmark Questions Verification V2.ipynb,105,Напишите функцию Python для подсчета истинных логических значений в данном списке.,"def count(lst):   
    return sum(lst) ",[],"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']","def count_true(bool_list):
    count = 0
    for value in bool_list:
        if value:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,106,Напишите функцию для добавления заданного списка к заданным кортежам.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",[],"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']","def add_list_to_tuples(tuples, lst):
    result = []
    for tpl in tuples:
        result.append(tpl + tuple(lst))
    return result"
Mike's Copy of Benchmark Questions Verification V2.ipynb,108,Напишите функцию для объединения трех списков в один отсортированный список.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",[],"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']","def merge_lists(list1, list2, list3):
    merged_list = list1 + list2 + list3
    merged_list.sort()
    return merged_list"
Mike's Copy of Benchmark Questions Verification V2.ipynb,109,"Напишите функцию Python, чтобы найти количество чисел с нечетным значением при вращении двоичной строки заданное количество раз.","def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",[],"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']","def count_numbers_with_odd_value(binary_string, rotations):
    # Convert the binary string to an integer
    decimal = int(binary_string, 2)
    
    # Initialize the count to 0
    count = 0
    
    # Rotate the decimal value the specified number of times
    for _ in range(rotations):
        decimal = decimal_rotation(decimal)
        
        # Check if the rotated decimal has an odd value
        if decimal % 2 != 0:
            count += 1
    
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,111,Напишите функцию для поиска общих элементов в заданных вложенных списках.,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",[],"['assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])', 'assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])', 'assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])']","def find_common_elements(lists):
    if len(lists) == 0:
        return set()
    
    common_elements = set(lists[0])
    for lst in lists:
        common_elements = common_elements.intersection(lst)
    
    return common_elements"
Mike's Copy of Benchmark Questions Verification V2.ipynb,113,"Напишите функцию, проверяющую, представляет ли строка целое число или нет.","def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",[],"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']","def is_integer(string):
    try:
        int(string)
        return True
    except ValueError:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,115,"Напишите функцию, проверяющую, все ли словари в списке пусты или нет.","def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",[],"['assert empty_dit([{},{},{}])==True', 'assert empty_dit([{1,2},{},{}])==False', 'assert empty_dit({})==True']","def are_all_dictionsries_empty(dictionaries):
    for d in dictionaries:
        if bool(d):
            return False
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,116,Напишите функцию для преобразования заданного кортежа положительных целых чисел в одно целое число.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",[],"['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']","def tuple_to_integer(tuple_of_integers):
    result = 0
    for num in tuple_of_integers:
        result = result * 10 + num
    return result"
Mike's Copy of Benchmark Questions Verification V2.ipynb,117,Напишите функцию для преобразования всех возможных конвертируемых элементов в списке списков в числа с плавающей запятой.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return res",[],"['assert list_to_float( [(""3"", ""4""), (""1"", ""26.45""), (""7.32"", ""8""), (""4"", ""8"")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]', 'assert list_to_float( [(""4"", ""4""), (""2"", ""27""), (""4.12"", ""9""), (""7"", ""11"")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]', 'assert list_to_float( [(""6"", ""78""), (""5"", ""26.45""), (""1.33"", ""4""), (""82"", ""13"")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]']","def convert_to_floats(matrix):
    for i in range(len(matrix)):
        for j in range(len(matrix[i])):
            try:
                matrix[i][j] = float(matrix[i][j])
            except ValueError:
                pass
    return matrix"
Mike's Copy of Benchmark Questions Verification V2.ipynb,118,"Напишите функцию для преобразования строки в список строк, разделенных на пробел.","def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",[],"['assert string_to_list(""python programming"")==[\'python\',\'programming\']', 'assert string_to_list(""lists tuples strings"")==[\'lists\',\'tuples\',\'strings\']', 'assert string_to_list(""write a program"")==[\'write\',\'a\',\'program\']']","def string_to_list(string):
    return string.split()"
Mike's Copy of Benchmark Questions Verification V2.ipynb,119,"Напишите функцию Python, чтобы найти элемент, который появляется в отсортированном массиве только один раз.","def search(arr):
    n = len(arr)
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",[],"['assert search([1,1,2,2,3]) == 3', 'assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8', 'assert search([1,2,2,3,3,4,4]) == 1']","def find_unique(arr):
    for i in range(0, len(arr), 2):
        if i == len(arr) - 1:
            return arr[i]
        if arr[i] != arr[i+1]:
            return arr[i]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,120,Напишите функцию для поиска максимального абсолютного произведения чисел в парах кортежей в заданном списке.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",[],"['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']","def max_absolute_product(pairs):
    max_product = float('-inf')
    for i in range(len(pairs)):
        for j in range(i+1, len(pairs)):
            product = abs(pairs[i][0] * pairs[j][0]) if abs(pairs[i][0] * pairs[j][0]) > abs(pairs[i][1] * pairs[j][1]) else abs(pairs[i][1] * pairs[j][1])
            if product > max_product:
                max_product = product
    return max_product"
Mike's Copy of Benchmark Questions Verification V2.ipynb,123,Напишите функцию для суммирования всех дружественных чисел от 1 до заданного числа.,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",[],"['assert amicable_numbers_sum(999)==504', 'assert amicable_numbers_sum(9999)==31626', 'assert amicable_numbers_sum(99)==0']","def sum_of_friendly_numbers(n):
    # Function to calculate the sum of proper divisors of a number
    def sum_of_divisors(m):
        divisors = []
        for i in range(1, m):
            if m % i == 0:
                divisors.append(i)
        return sum(divisors)
    
    # Function to check if two numbers are friendly numbers
    def are_friendly_numbers(a, b):
        return sum_of_divisors(a) == b and sum_of_divisors(b) == a
    
    friendly_numbers = []
    for i in range(1, n+1):
        for j in range(i+1, n+1):
            if are_friendly_numbers(i, j):
                friendly_numbers.append(i)
                friendly_numbers.append(j)
    
    return sum(set(friendly_numbers))"
Mike's Copy of Benchmark Questions Verification V2.ipynb,124,Напишите функцию для получения угла комплексного числа.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",['import math'],"['assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)', 'assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)', 'assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)']","def get_angle(z):
    angle = cm.phase(z)
    return angle"
Mike's Copy of Benchmark Questions Verification V2.ipynb,125,"Напишите функцию, которая находит максимальную разницу между количеством нулей и единиц в любой подстроке данной двоичной строки.","def find_length(string): 
	n = len(string)
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",[],"['assert find_length(""11000010001"") == 6', 'assert find_length(""10111"") == 1', 'assert find_length(""11011101100101"") == 2']","def max_difference(s):
    max_diff = 0
    current_diff = 0
    for char in s:
        if char == '0':
            current_diff += 1
        else:
            current_diff -= 1
        if current_diff > max_diff:
            max_diff = current_diff
        if current_diff < 0:
            current_diff = 0
    return max_diff"
Mike's Copy of Benchmark Questions Verification V2.ipynb,126,"Напишите функцию Python, чтобы найти сумму общих делителей двух заданных чисел.","def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",[],"['assert sum(10,15) == 6', 'assert sum(100,150) == 93', 'assert sum(4,6) == 3']","def sum_of_common_divisors(a, b):
    # Find the common divisors
    divisors = []
    for i in range(1, min(a, b) + 1):
        if a % i == 0 and b % i == 0:
            divisors.append(i)
    
    # Calculate the sum of the common divisors
    sum = 0
    for divisor in divisors:
        sum += divisor
    
    return sum"
Mike's Copy of Benchmark Questions Verification V2.ipynb,127,Напишите функцию умножения двух целых чисел.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",[],"['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']","def multiply(a, b):
    return a * b"
Mike's Copy of Benchmark Questions Verification V2.ipynb,128,Напишите функцию для поиска слов длиной более n символов из заданного списка слов.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",[],"['assert long_words(3,""python is a programming language"")==[\'python\',\'programming\',\'language\']', 'assert long_words(2,""writing a program"")==[\'writing\',\'program\']', 'assert long_words(5,""sorting list"")==[\'sorting\']']","def find_long_words(words, n):
    long_words = []
    for word in words:
        if len(word) > n:
            long_words.append(word)
    return long_words"
Mike's Copy of Benchmark Questions Verification V2.ipynb,129,"Напишите функцию, определяющую, является ли матрица магическим квадратом.","def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",[],"['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']","def is_magic_square(square):
    # Check that the square is a matrix (has the same number of rows and columns)
    size = len(square)
    for row in square:
        if len(row) != size:
            return False
    
    # Calculate the sum of the first row (which will be the sum of every row, column, and diagonal)
    target_sum = sum(square[0])
    
    # Check the sum of every row
    for row in square:
        if sum(row) != target_sum:
            return False
    
    # Check the sum of every column
    for i in range(size):
        column_sum = 0
        for row in square:
            column_sum += row[i]
        if column_sum != target_sum:
            return False
    
    # Check the sum of the main diagonal
    diagonal_sum = 0
    for i in range(size):
        diagonal_sum += square[i][i]
    if diagonal_sum != target_sum:
        return False
    
    # Check the sum of the secondary diagonal
    diagonal_sum = 0
    for i in range(size):
        diagonal_sum += square[i][size - i - 1]
    if diagonal_sum != target_sum:
        return False
    
    # If all checks pass, the square is a magic square
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,130,Напишите функцию для поиска элемента с максимальной частотой в заданном списке.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]",[],"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20']","def find_max_frequency_element(lst):
    frequency_map = {}
    for element in lst:
        if element in frequency_map:
            frequency_map[element] += 1
        else:
            frequency_map[element] = 1
    max_frequency = 0
    max_frequency_element = None
    for element, frequency in frequency_map.items():
        if frequency > max_frequency:
            max_frequency = frequency
            max_frequency_element = element
    return max_frequency_element"
Mike's Copy of Benchmark Questions Verification V2.ipynb,131,"Напишите функцию Python, которая переворачивает только гласные в заданной строке (где y не является гласной).","def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",[],"['assert reverse_vowels(""Python"") == ""Python""', 'assert reverse_vowels(""USA"") == ""ASU""', 'assert reverse_vowels(""ab"") == ""ab""']","def reverse_vowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    string = list(string)
    vowels_list = []
    
    # Get all the vowels in the string
    for char in string:
        if char in vowels:
            vowels_list.append(char)
    
    # Reverse the vowels list
    vowels_list.reverse()
    
    # Replace the vowels in the string with the reversed vowels
    index = 0
    for i in range(len(string)):
        if string[i] in vowels:
            string[i] = vowels_list[index]
            index += 1
    
    # Convert the string back to a string and return it
    return ''.join(string)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,132,Напишите функцию для преобразования кортежа в строку.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",[],"['assert tup_string((\'e\', \'x\', \'e\', \'r\', \'c\', \'i\', \'s\', \'e\', \'s\'))==(""exercises"")', 'assert tup_string((\'p\',\'y\',\'t\',\'h\',\'o\',\'n\'))==(""python"")', 'assert tup_string((\'p\',\'r\',\'o\',\'g\',\'r\',\'a\',\'m\'))==(""program"")']","def tuple_to_string(tuple_var):
    return str(tuple_var)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,133,Напишите функцию для вычисления суммы отрицательных чисел заданного списка чисел.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",[],"['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']","def sum_negative_numbers(numbers):
    sum_negative = 0
    for num in numbers:
        if num < 0:
            sum_negative += num
    return sum_negative"
Mike's Copy of Benchmark Questions Verification V2.ipynb,135,Напишите функцию для нахождения n-го шестиугольного числа.,"def hexagonal_num(n): 
	return n*(2*n - 1) ",[],"['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']","def hexagonal_number(n):
    return n * (2 * n - 1)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,137,"Напишите функцию, которая находит отношение нулей к ненулевым числам в массиве целых чисел.","from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return n1/(n-n1)",['import math'],"['assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)']","def ratio_of_zeroes_to_nonzeroes(arr):
    zeroes = 0
    nonzeroes = 0
    for num in arr:
        if num == 0:
            zeroes += 1
        else:
            nonzeroes += 1
    if nonzeroes == 0:
        return ""Cannot divide by zero.""
    else:
        return zeroes / nonzeroes"
Mike's Copy of Benchmark Questions Verification V2.ipynb,138,"Напишите функцию Python, чтобы проверить, может ли данное число быть представлено как сумма ненулевых степеней 2 или нет.","def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",[],"['assert is_Sum_Of_Powers_Of_Two(10) == True', 'assert is_Sum_Of_Powers_Of_Two(7) == False', 'assert is_Sum_Of_Powers_Of_Two(14) == True']","def is_power_of_two_sum(n):
    # Check if n is a power of two
    if n <= 0 or (n & (n - 1)) != 0:
        return False
    
    # Check if n can be represented as the sum of non-zero powers of two
    while n > 1:
        m = n // 2
        if m & (m - 1) != 0:
            m = 1 << (m.bit_length() - 1)
        if m == n:
            return False
        n = n - m
    
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,139,Напишите функцию для нахождения длины окружности.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",['import math'],"['assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)', 'assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)', 'assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)']","def circumference(radius):
    length = 2 * math.pi * radius
    return length"
Mike's Copy of Benchmark Questions Verification V2.ipynb,140,"Напишите функцию, которая объединит список списков в один набор чисел.","def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",[],"['assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])', 'assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])', 'assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])']","def combine_lists(lists):
    combined_set = set()
    for lst in lists:
        for num in lst:
            combined_set.add(num)
    return combined_set"
Mike's Copy of Benchmark Questions Verification V2.ipynb,141,Напишите функцию для сортировки списка элементов.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",[],"['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']","def sort_list(lst):
    lst.sort()
    return lst"
Mike's Copy of Benchmark Questions Verification V2.ipynb,142,"Напишите функцию для подсчета количества элементов, одинаковых в одной и той же позиции в трех заданных списках.","def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",[],"['assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3', 'assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4', 'assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5']","def count_same_position_elements(list1, list2, list3):
    count = 0
    for i in range(len(list1)):
        if list1[i] == list2[i] == list3[i]:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,143,"Напишите функцию для определения количества списков, присутствующих в данном кортеже.","def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",[],"['assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2', 'assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3', 'assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1']","def count_lists(tuple):
    count = 0
    for item in tuple:
        if type(item) is list:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,145,"Напишите функцию Python, чтобы найти максимальную разницу между любыми двумя элементами в заданном массиве.","def max_Abs_Diff(arr): 
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",[],"['assert max_Abs_Diff((2,1,5,3)) == 4', 'assert max_Abs_Diff((9,3,2,5,1)) == 8', 'assert max_Abs_Diff((3,2,1)) == 2']","def max_difference(arr):
    if len(arr) < 2:
        return None"
Benchmark Questions Verification V2.ipynb,160,"Напишите функцию, которая возвращает целые числа x и y, удовлетворяющие условиям ax + by = n, в виде кортежа, или возвращает None, если решения не существует.","def find_solution(a, b, n):
	i = 0
	while i * a <= n:
		if (n - (i * a)) % b == 0: 
			return (i, (n - (i * a)) // b)
		i = i + 1
	return None",[],"['assert find_solution(2, 3, 7) == (2, 1)', 'assert find_solution(4, 2, 7) == None', 'assert find_solution(1, 13, 17) == (4, 1)']","def linear_diophantine(a, b, n):
    # Check if the equation is solvable
    if n % math.gcd(a, b) != 0:
        return None
    
    # Find a particular solution
    x0, y0 = extended_gcd(a, b)
    x0 *= n // math.gcd(a, b)
    y0 *= n // math.gcd(a, b)
    
    return x0, y0"
Benchmark Questions Verification V2.ipynb,161,"Напишите функцию для удаления всех элементов из данного списка, присутствующих в другом списке.","def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",[],"['assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]']","def remove_elements(list1, list2):
    list3 = []
    for element in list1:
        if element not in list2:
            list3.append(element)
    return list3"
Benchmark Questions Verification V2.ipynb,162,"Напишите функцию для вычисления суммы (n - 2*i) от i=0 до n // 2, например n + (n-2) + (n-4)... (пока nx =&lt; 0).","def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",[],"['assert sum_series(6) == 12', 'assert sum_series(10) == 30', 'assert sum_series(9) == 25']","def sum_of_series(n):
    series_sum = 0
    for i in range(n // 2 + 1):
        term = n - 2 * i
        if term <= 0:
            break
        series_sum += term
    return series_sum"
Benchmark Questions Verification V2.ipynb,163,"Напишите функцию, вычисляющую площадь правильного многоугольника по длине и числу его сторон.","from math import tan, pi
def area_polygon(s, l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",['import math'],"['assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)', 'assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)', 'assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)']","def area_of_regular_polygon(length, sides):
    apothem = length / (2 * math.tan(math.pi / sides))
    area = 0.5 * apothem * length * sides
    return area"
Benchmark Questions Verification V2.ipynb,164,"Напишите функцию, определяющую, равна ли сумма делителей двух целых чисел.","import math 
def div_sum(n): 
  total = 1
  i = 2

  while i * i <= n:
    if (n % i == 0):
      total = (total + i + math.floor(n / i))
    i += 1

  return total

def are_equivalent(num1, num2): 
    return div_sum(num1) == div_sum(num2); ",[],"['assert are_equivalent(36, 57) == False', 'assert are_equivalent(2, 4) == False', 'assert are_equivalent(23, 47) == True']","def sum_of_divisors(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)"
Benchmark Questions Verification V2.ipynb,165,"Напишите функцию для подсчета количества символов в строке, которые встречаются в той же позиции в строке, что и в английском алфавите (регистронезависимо).","def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",[],"['assert count_char_position(""xbcefg"") == 2', 'assert count_char_position(""ABcED"") == 3', 'assert count_char_position(""AbgdeF"") == 5']","def count_characters_in_place(string):
    count = 0
    for i in range(len(string)):
        char = string[i]
        if char.isalpha() and char.lower() == chr(ord('a') + i):
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,166,"Напишите функцию, которая подсчитывает количество пар целых чисел в списке, которые выполняют xor до четного числа.","def find_even_pair(A): 
  count = 0
  for i in range(0, len(A)): 
    for j in range(i+1, len(A)): 
        if ((A[i] ^ A[j]) % 2 == 0): 
          count += 1

  return count",[],"['assert find_even_pair([5, 4, 7, 2, 1]) == 4', 'assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9', 'assert find_even_pair([1, 2, 3]) == 1']","def count_even_xor_pairs(numbers):
    count = 0
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if (numbers[i] ^ numbers[j]) % 2 == 0:
                count += 1
    return count"
Benchmark Questions Verification V2.ipynb,167,"Напишите функцию Python, чтобы найти наименьшую степень 2, большую или равную n.","def next_power_of_2(n): 
  if n and not n & (n - 1):
    return n

  count = 0
  while n != 0: 
    n >>= 1
    count += 1

  return 1 << count; ",[],"['assert next_power_of_2(0) == 1', 'assert next_power_of_2(5) == 8', 'assert next_power_of_2(17) == 32']","def find_next_power_of_two(n):
    power = 0
    while 2 ** power < n:
        power += 1
    return 2 ** power"
Benchmark Questions Verification V2.ipynb,168,Напишите функцию для подсчета количества вхождений числа в заданный список.,"def frequency(a,x): 
    count = 0  
    for i in a: 
      if i == x: 
        count += 1

    return count ",[],"['assert frequency([1,2,3], 4) == 0', 'assert frequency([1,2,2,3,3,3,4], 3) == 3', 'assert frequency([0,1,2,3,1,2], 1) == 2']","def count_occurrences(lst, number):
    count = 0
    for num in lst:
        if num == number:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,170,"Напишите функцию для поиска суммы чисел в списке в диапазоне, заданном двумя индексами.","def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",[],"['assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38']","def sum_in_range(numbers, start_index, end_index):
    total = 0
    for i in range(start_index, end_index + 1):
        total += numbers[i]
    return total"
Benchmark Questions Verification V2.ipynb,171,"Напишите функцию, позволяющую найти периметр правильного пятиугольника по длинам его сторон.","import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",[],"['assert perimeter_pentagon(5) == 25', 'assert perimeter_pentagon(10) == 50', 'assert perimeter_pentagon(15) == 75']","def perimeter(side_lengths):
    return sum(side_lengths)"
Benchmark Questions Verification V2.ipynb,172,Напишите функцию для подсчета количества вхождений строки «std» в заданную строку.,"def count_occurance(s):
  count = 0
  for i in range(len(s) - 2):
    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):
      count = count + 1
  return count",[],"['assert count_occurance(""letstdlenstdporstd"") == 3', 'assert count_occurance(""truststdsolensporsd"") == 1', 'assert count_occurance(""makestdsostdworthit"") == 2', 'assert count_occurance(""stds"") == 1', 'assert count_occurance("""") == 0']","def count_std_occurrences(string):
    count = 0
    index = 0
    while index < len(string):
        if string[index:index+3] == 'std':
            count += 1
            index += 3
        else:
            index += 1
    return count"
Benchmark Questions Verification V2.ipynb,222,"Напишите функцию, проверяющую, имеют ли все элементы в кортеже одинаковый тип данных или нет.","def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",[],"['assert check_type((5, 6, 7, 3, 5, 6) ) == True', 'assert check_type((1, 2, ""4"") ) == False', 'assert check_type((3, 2, 1, 4, 5) ) == True']","def have_same_type(tuple):
    type = type(tuple[0])
    for element in tuple:
        if type(element) != type:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,223,"Напишите функцию, которая принимает отсортированный массив, его длину (n) и элемент и возвращает, является ли этот элемент основным элементом в данном отсортированном массиве. (Элемент большинства — это элемент, который встречается более n/2 раз.)","def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",[],"['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True', 'assert is_majority([1, 1, 2, 2], 5, 1) == False']","def is_majority_element(arr, n, element):
    # Find the first occurrence of the element in the array
    first_occurrence = bisect_left(arr, element)
    
    # Check if the element is present more than n/2 times
    if first_occurrence + n // 2 < n and arr[first_occurrence + n // 2] == element:
        return True
    else:
        return False"
Benchmark Questions Verification V2.ipynb,224,Напишите функцию Python для подсчета количества установленных битов (двоичных цифр со значением 1) в заданном числе.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",[],"['assert count_Set_Bits(2) == 1', 'assert count_Set_Bits(4) == 1', 'assert count_Set_Bits(6) == 2']","def count_set_bits(n):
    count = 0
    while n > 0:
        count += n & 1
        n >>= 1
    return count"
Benchmark Questions Verification V2.ipynb,226,"Напишите функцию Python для удаления символов, которые имеют нечетные значения индекса данной строки.","def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",[],"[""assert odd_values_string('abcdef') == 'ace'"", ""assert odd_values_string('python') == 'pto'"", ""assert odd_values_string('data') == 'dt'"", ""assert odd_values_string('lambs') == 'lms'""]","def remove_chars_with_odd_index(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result"
Benchmark Questions Verification V2.ipynb,227,"Напишите функцию, позволяющую найти минимум три числа.","def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",[],"['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']","def find_minimum(a, b, c):
    return min(a, b, c)"
Benchmark Questions Verification V2.ipynb,228,"Напишите функцию Python, чтобы проверить, все ли биты в заданном диапазоне не установлены или нет.","def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",[],"['assert all_Bits_Set_In_The_Given_Range(4,1,2) == True', 'assert all_Bits_Set_In_The_Given_Range(17,2,4) == True', 'assert all_Bits_Set_In_The_Given_Range(39,4,6) == False']","def bits_unset(num, start, end):
    # Create a mask with all bits set in the range
    mask = (1 << (end - start + 1)) - 1 << start
    
    # Check if all bits in the range are unset
    return (num & mask) == 0"
Benchmark Questions Verification V2.ipynb,229,"Напишите функцию, которая принимает массив и целое число n и переупорядочивает первые n элементов данного массива так, чтобы все отрицательные элементы появлялись перед положительными и где относительный порядок среди отрицательных и положительных элементов сохранялся.","def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",[],"['assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]', 'assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]', 'assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]']","def partition_array(array, n):
    negatives = [x for x in array[:n] if x < 0]
    positives = [x for x in array[:n] if x >= 0]
    array[:n] = negatives + positives
    return array"
Benchmark Questions Verification V2.ipynb,230,"Напишите функцию, которая принимает строку и символ, заменяет пробелы в строке символом и возвращает строку.","def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",[],"['assert replace_blank(""hello people"",\'@\')==(""hello@people"")', 'assert replace_blank(""python program language"",\'$\')==(""python$program$language"")', 'assert replace_blank(""blank space"",""-"")==(""blank-space"")']","def replace_spaces(string, character):
    return string.replace(' ', character)"
Benchmark Questions Verification V2.ipynb,232,"Напишите функцию, которая принимает список и целое число n и возвращает список, содержащий n крупнейших элементов из списка.","import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",[],"['assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])']","def get_largest_elements(lst, n):
    largest_elements = sorted(lst, reverse=True)[:n]
    return largest_elements"
Benchmark Questions Verification V2.ipynb,233,Напишите функцию для нахождения площади боковой поверхности цилиндра.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",['import math'],"['assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)']","def lateral_surface_area(radius, height):
    lsa = 2 * math.pi * radius * height
    return lsa"
Benchmark Questions Verification V2.ipynb,234,"Напишите функцию, позволяющую найти объём куба по длине его стороны.","def volume_cube(l):
  volume = l * l * l
  return volume",[],"['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']","def volume_of_cube(side_length):
    volume = side_length ** 3
    return volume"
Benchmark Questions Verification V2.ipynb,235,Напишите функцию Python для установки всех четных бит заданного числа.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",[],"['assert even_bit_set_number(10) == 10', 'assert even_bit_set_number(20) == 30', 'assert even_bit_set_number(30) == 30']","def set_even_bits(num):
    result = 0
    bit_position = 0
    while num > 0:
        if bit_position % 2 == 1:
            result |= 1 << bit_position
        num >>= 1
        bit_position += 1
    return result"
Benchmark Questions Verification V2.ipynb,237,"Напишите функцию, которая принимает список кортежей и возвращает словарь, сопоставляющий каждый уникальный кортеж с количеством раз, когда он встречается в списке.","from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",[],"['assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}', 'assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}', 'assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}']","def count_tuples(tuples):
    tuple_counts = {}
    for tpl in tuples:
        if tpl in tuple_counts:
            tuple_counts[tpl] += 1
        else:
            tuple_counts[tpl] = 1
    return tuple_counts"
Benchmark Questions Verification V2.ipynb,238,Напишите функцию Python для подсчета количества непустых подстрок данной строки.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",[],"['assert number_of_substrings(""abc"") == 6', 'assert number_of_substrings(""abcd"") == 10', 'assert number_of_substrings(""abcde"") == 15']","def count_non_empty_substrings(string):
    count = 0
    length = len(string)
    for i in range(length):
        for j in range(i+1, length+1):
            if string[i:j]:
                count += 1
    return count"
Benchmark Questions Verification V2.ipynb,239,"Напишите функцию, которая принимает целые положительные числа m и n и находит количество возможных последовательностей длины n, таких, что каждый элемент является положительным целым числом и больше или равен удвоенному предыдущему элементу, но меньше или равен m.","def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",[],"['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']","def count_sequences(m, n):
    if n == 1:
        return m
    count = 0
    for i in range(1, m+1):
        count += count_sequences(m, n-1)
    return count"
Benchmark Questions Verification V2.ipynb,240,"Напишите функцию, которая принимает два списка и заменяет последний элемент первого списка элементами второго списка.","def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",[],"['assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]', 'assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]', 'assert replace_list([""red"",""blue"",""green""],[""yellow""])==[""red"",""blue"",""yellow""]']","def replace_last(lst1, lst2):
    lst1[-1] = lst2
    return lst1"
Benchmark Questions Verification V2.ipynb,242,Напишите функцию для подсчета общего количества символов в строке.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",[],"['assert count_charac(""python programming"")==18', 'assert count_charac(""language"")==8', 'assert count_charac(""words"")==5']","def count_characters(string):
    count = 0
    for char in string:
        count += 1
    return count"
Benchmark Questions Verification V2.ipynb,244,"Напишите функцию Python, чтобы найти следующий идеальный квадрат, больший заданного числа.","import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",[],"['assert next_Perfect_Square(35) == 36', 'assert next_Perfect_Square(6) == 9', 'assert next_Perfect_Square(9) == 16']","def find_next_perfect_square(num):
    # Find the next perfect square greater than num
    root = int(num ** 0.5) + 1
    return root ** 2"
Benchmark Questions Verification V2.ipynb,245,"Напишите функцию, которая принимает массив и находит максимальную сумму битонной подпоследовательности для данного массива, где последовательность является битонной, если она сначала увеличивается, а затем убывает.","def max_sum(arr): 
	MSIBS = arr[:] 
	for i in range(len(arr)): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, len(arr) + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",[],"['assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194', 'assert max_sum([80, 60, 30, 40, 20, 10]) == 210', 'assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138']","def max_bitonic_subsequence(arr):
    # Calculate the longest increasing subsequence (LIS) ending at each index
    lis = [1] * len(arr)
    for i in range(1, len(arr)):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    
    # Calculate the longest decreasing subsequence (LDS) starting at each index
    lds = [1] * len(arr)
    for i in range(len(arr) - 2, -1, -1):
        for j in range(len(arr) - 1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1
    
    # Calculate the maximum sum bitonic subsequence
    max_sum = float('-inf')
    for i in range(len(arr)):
        bitonic_sum = lis[i] + lds[i] - 1
        if bitonic_sum > max_sum:
            max_sum = bitonic_sum
    
    return max_sum"
Benchmark Questions Verification V2.ipynb,246,Напишите функцию для вычисления квадратных корней вавилонским методом.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",['import math'],"['assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)']","def babylonian_sqrt(n, guess):
    if n == 0:
        return 0
    else:
        prev_guess = guess
        guess = (guess + n/guess) / 2
        if guess == prev_guess:
            return guess
        else:
            return babylonian_sqrt(n, guess)"
Benchmark Questions Verification V2.ipynb,247,"Напишите функцию, позволяющую найти длину самой длинной палиндромной подпоследовательности в заданной строке.","def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",[],"['assert lps(""TENS FOR TENS"") == 5', 'assert lps(""CARDIO FOR CARDS"") == 7', 'assert lps(""PART OF THE JOURNEY IS PART"") == 9']","def longest_palindrome_subseq(s):
    n = len(s)
    # Create a table to store the lengths of longest palindrome subsequences
    dp = [[0] * n for _ in range(n)]
    
    # All substrings of length 1 are palindromes of length 1
    for i in range(n):
        dp[i][i] = 1
    
    # Check palindromic subsequences of length 2 and more
    for cl in range(2, n+1):
        for i in range(n-cl+1):
            j = i + cl - 1
            if s[i] == s[j] and cl == 2:
                dp[i][j] = 2
            elif s[i] == s[j]:
                dp[i][j] = dp[i+1][j-1] + 2
            else:
                dp[i][j] = max(dp[i+1][j], dp[i][j-1])
    
    # The length of the longest palindrome subsequence is at the top-right corner of the table
    return dp[0][n-1]"
Benchmark Questions Verification V2.ipynb,248,"Напишите функцию, которая принимает целое число n и вычисляет гармоническую сумму n-1.","def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",['import math'],"['assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)']","def harmonic_sum(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum"
Benchmark Questions Verification V2.ipynb,249,Напишите функцию для поиска пересечения двух массивов.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",[],"['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']","def find_intersection(array1, array2):
    intersection = []
    for num in array1:
        if num in array2:
            intersection.append(num)
    return intersection"
Benchmark Questions Verification V2.ipynb,250,"Напишите функцию Python, которая принимает кортеж и элемент и подсчитывает появление элемента в кортеже.","def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",[],"['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']","def count_element(tuple, element):
    count = 0
    for item in tuple:
        if item == element:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,251,"Напишите функцию, которая принимает список и элемент, вставляет элемент перед каждым элементом в списке и возвращает результирующий список.","def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",[],"[""assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"", ""assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']"", ""assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']""]","def insert_before_each(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result"
Benchmark Questions Verification V2.ipynb,252,Напишите функцию Python для преобразования комплексных чисел в полярные координаты.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",[],"['assert convert(1) == (1.0, 0.0)', 'assert convert(4) == (4.0,0.0)', 'assert convert(5) == (5.0,0.0)']","def complex_to_polar(complex_num):
    r = abs(complex_num)
    theta = cmath.phase(complex_num)
    return r, theta"
Benchmark Questions Verification V2.ipynb,253,"Напишите функцию Python, которая возвращает количество целочисленных элементов в заданном списке.","def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",[],"[""assert count_integer([1,2,'abc',1.2]) == 2"", 'assert count_integer([1,2,3]) == 3', 'assert count_integer([1,1.2,4,5.1]) == 2']","def count_integer_elements(lst):
    count = 0
    for element in lst:
        if type(element) == int:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,255,"Напишите функцию, которая принимает список длиной n, генерирует все комбинации (с повторением) элементов списка и возвращает список с кортежем для каждой комбинации.","from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
",[],"['assert combinations_colors( [""Red"",""Green"",""Blue""],1)==[(\'Red\',), (\'Green\',), (\'Blue\',)]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],2)==[(\'Red\', \'Red\'), (\'Red\', \'Green\'), (\'Red\', \'Blue\'), (\'Green\', \'Green\'), (\'Green\', \'Blue\'), (\'Blue\', \'Blue\')]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],3)==[(\'Red\', \'Red\', \'Red\'), (\'Red\', \'Red\', \'Green\'), (\'Red\', \'Red\', \'Blue\'), (\'Red\', \'Green\', \'Green\'), (\'Red\', \'Green\', \'Blue\'), (\'Red\', \'Blue\', \'Blue\'), (\'Green\', \'Green\', \'Green\'), (\'Green\', \'Green\', \'Blue\'), (\'Green\', \'Blue\', \'Blue\'), (\'Blue\', \'Blue\', \'Blue\')]']","def generate_combinations_with_repetition(lst):
    n = len(lst)
    combinations = []
    def backtrack(combination, start_index):
        combinations.append(tuple(combination))
        for i in range(start_index, n):
            combination.append(lst[i])
            backtrack(combination, i)  # Allow repetition by passing i instead of i + 1
            combination.pop()
    backtrack([], 0)
    return combinations"
Benchmark Questions Verification V2.ipynb,256,"Напишите функцию Python, которая принимает неотрицательное число и возвращает количество простых чисел, меньше заданного неотрицательного числа.","def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",[],"['assert count_Primes_nums(5) == 2', 'assert count_Primes_nums(10) == 4', 'assert count_Primes_nums(100) == 25']","def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,257,"Напишите функцию, которая принимает два числа и возвращает кортеж со вторым числом, а затем с первым числом.","def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",[],"['assert swap_numbers(10,20)==(20,10)', 'assert swap_numbers(15,17)==(17,15)', 'assert swap_numbers(100,200)==(200,100)']","def swap_numbers(number1, number2):
    return number2, number1"
Benchmark Questions Verification V2.ipynb,259,"Напишите функцию, максимизирующую данные два кортежа.","def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))', 'assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))', 'assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))']","def maximize_tuples(tuple1, tuple2):
    max_tuple = ()
    for i in range(len(tuple1)):
        if tuple1[i] > tuple2[i]:
            max_tuple += (tuple1[i],)
        else:
            max_tuple += (tuple2[i],)
    return max_tuple"
Benchmark Questions Verification V2.ipynb,260,Напишите функцию для нахождения n-го простого числа Ньюмана–Шенкса–Уильямса.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",[],"['assert newman_prime(3) == 7', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']","def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,261,"Напишите функцию, которая принимает два кортежа и выполняет математическую операцию деления поэлементно для данных кортежей.","def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)', 'assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)', 'assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)']","def tuple_division(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result = result + (tuple1[i] / tuple2[i],)
    return result"
Benchmark Questions Verification V2.ipynb,262,"Напишите функцию, которая принимает список и целое число L и разбивает данный список на две части, где длина первой части списка равна L, и возвращает результирующие списки в кортеже.","def split_two_parts(list1, L):
    return list1[:L], list1[L:]",[],"['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', ""assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])"", ""assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])""]","def split_list(lst, L):
    first_part = lst[:L]
    second_part = lst[L:]
    return (first_part, second_part)"
Benchmark Questions Verification V2.ipynb,264,Напишите функцию для расчета возраста собаки в собачьих годах.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",[],"['assert dog_age(12)==61', 'assert dog_age(15)==73', 'assert dog_age(24)==109']","def calculate_dog_age(human_age):
    if human_age <= 2:
        dog_age = human_age * 10
    else:
        dog_age = 20 + (human_age - 2) * 5
    return dog_age"
Benchmark Questions Verification V2.ipynb,265,"Напишите функцию, которая принимает список и целое число n и разбивает список для каждого n-го элемента, возвращая список полученных списков.","def list_split(S, step):
    return [S[i::step] for i in range(step)]",[],"[""assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]', ""assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]""]","def split_list(lst, n):
    split_lists = []
    for i in range(0, len(lst), n):
        split_lists.append(lst[i:i+n])
    return split_lists"
Benchmark Questions Verification V2.ipynb,266,"Напишите функцию, позволяющую найти площадь боковой поверхности куба по длине его стороны.","def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",[],"['assert lateralsurface_cube(5)==100', 'assert lateralsurface_cube(9)==324', 'assert lateralsurface_cube(10)==400']","def lateral_surface_area(side_length):
    return 4 * side_length ** 2"
Benchmark Questions Verification V2.ipynb,267,"Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n нечетных натуральных чисел.","def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",[],"['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']","def sum_of_squares_of_odd_natural_numbers(n):
    sum = 0
    for i in range(n):
        num = 2 * i + 1
        sum += num ** 2
    return sum"
Benchmark Questions Verification V2.ipynb,268,Напишите функцию для поиска n-го номера звезды.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",[],"['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']","def find_nth_star(n):
    if n == 1:
        return 2
    count = 1
    num = 3
    while count < n:
        is_prime = True
        for i in range(2, int(num**0.5) + 1):
            if num % i == 0:
                is_prime = False
                break
        if is_prime:
            count += 1
        num += 2
    return num - 2"
Benchmark Questions Verification V2.ipynb,269,Напишите функцию для поиска значения ascii символа.,"def ascii_value(k):
  ch=k
  return ord(ch)",[],"[""assert ascii_value('A')==65"", ""assert ascii_value('R')==82"", ""assert ascii_value('S')==83""]","def find_ascii_value(character):
    return ord(character)"
Benchmark Questions Verification V2.ipynb,270,"Напишите функцию Python, чтобы найти сумму четных чисел в четных позициях списка.","def sum_even_and_even_index(arr):  
    i = 0
    sum = 0
    for i in range(0, len(arr),2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",[],"['assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30', 'assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26', 'assert sum_even_and_even_index([5, 6, 12, 1]) == 12']","def sum_even_numbers(numbers):
    sum_even = 0
    for i in range(1, len(numbers), 2):
        if numbers[i] % 2 == 0:
            sum_even += numbers[i]
    return sum_even"
Benchmark Questions Verification V2.ipynb,271,"Напишите функцию Python, которая принимает целое число n и находит сумму первых n четных натуральных чисел, возведенных в пятую степень.","def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",[],"['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']","def sum_of_even_numbers_squared(n):
    sum = 0
    for i in range(2, n*2+1, 2):
        sum += i**5
    return sum"
Benchmark Questions Verification V2.ipynb,272,"Напишите функцию, которая принимает список кортежей и возвращает список, содержащий задний элемент каждого кортежа.","def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",[],"[""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"", ""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"", ""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]""]","def get_last_elements(tuples):
    last_elements = []
    for tpl in tuples:
        last_elements.append(tpl[-1])
    return last_elements"
Benchmark Questions Verification V2.ipynb,273,"Напишите функцию, которая принимает два кортежа и вычитает элементы первого кортежа из элементов второго кортежа с тем же индексом.","def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",[],"['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']","def subtract_tuples(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple2[i] - tuple1[i],)
    return result"
Benchmark Questions Verification V2.ipynb,274,"Напишите функцию Python, которая принимает положительное целое число n и находит сумму четных биномиальных коэффициентов индекса.","import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",[],"['assert even_binomial_Coeff_Sum(4) == 8', 'assert even_binomial_Coeff_Sum(6) == 32', 'assert even_binomial_Coeff_Sum(2) == 2']","def sum_even_binomial_coefficients(n):
    sum_even = 0
    for i in range(0, n+1, 2):
        sum_even += binomial_coefficient(n, i)
    return sum_even"
Benchmark Questions Verification V2.ipynb,276,"Напишите функцию, которая принимает радиус и высоту цилиндра и возвращает объем.","def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",['import math'],"['assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)']","def calculate_volume(radius, height):
    volume = math.pi * radius**2 * height
    return volume"
Benchmark Questions Verification V2.ipynb,277,"Напишите функцию, которая принимает словарь и целое число n и фильтрует словарь, чтобы включать только записи со значениями, большими или равными n.","def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",[],"[""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}""]","def filter_dictionary(dictionary, n):
    filtered_dict = {}
    for key, value in dictionary.items():
        if value >= n:
            filtered_dict[key] = value
    return filtered_dict"
Benchmark Questions Verification V2.ipynb,278,"Напишите функцию, чтобы найти количество элементов, которые встречаются перед элементом кортежа в данном кортеже.","def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",[],"['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']","def count_elements_before(tup, element):
    count = 0
    for item in tup:
        if item == element:
            return count
        count += 1
    return -1"
Benchmark Questions Verification V2.ipynb,279,Напишите функцию для нахождения n-го десятиугольного числа.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",[],"['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']","def decimal_number(n):
    return n * (3*n - 1) // 2"
Benchmark Questions Verification V2.ipynb,280,"Напишите функцию, которая принимает массив и элемент и возвращает кортеж, содержащий логическое значение, указывающее, находится ли элемент в массиве, и позицию индекса элемента (или -1, если элемент не найден).","def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",[],"['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']","def find_element(arr, element):
    if element in arr:
        return (True, arr.index(element))
    else:
        return (False, -1)"
Benchmark Questions Verification V2.ipynb,281,"Напишите функцию Python, чтобы проверить, уникальны или нет элементы данного списка.","def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",[],"['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']","def is_unique(lst):
    return len(lst) == len(set(lst))"
Benchmark Questions Verification V2.ipynb,282,Напишите функцию для поэлементного вычитания двух списков.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",[],"['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']","def subtract_lists(a, b):
    result = []
    for i in range(len(a)):
        result.append(a[i] - b[i])
    return result"
Benchmark Questions Verification V2.ipynb,283,"Напишите функцию Python, которая принимает целое число и проверяет, меньше ли частота каждой цифры в целом числе самой цифры или равна ей.","def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",[],"['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']","def is_digit_frequency_less(number):
    # Count the frequency of each digit in the number
    digit_frequency = [str(number).count(digit) for digit in str(number)]
    
    # Check if the frequency of each digit is less than or equal to the digit itself
    for digit, frequency in zip(str(number), digit_frequency):
        if int(digit) < frequency:
            return False
    
    return True"
Benchmark Questions Verification V2.ipynb,284,"Напишите функцию, которая принимает список и элемент и проверяет, равны ли все элементы в списке заданному элементу.","def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",[],"['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']","def are_all_elements_equal(lst, element):
    for item in lst:
        if item != element:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,285,"Напишите функцию, которая проверяет, содержит ли строка символ «а», за которым следуют два или три символа «b».","import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_two_three(""ac"")==(False)', 'assert text_match_two_three(""dc"")==(False)', 'assert text_match_two_three(""abbbba"")==(True)']","def contains_abb(string):
    for i in range(len(string)-2):
        if string[i] == 'a' and string[i+1] == 'b' and string[i+2] == 'b':
            return True
    return False"
Benchmark Questions Verification V2.ipynb,286,"Напишите функцию, которая находит наибольшую сумму непрерывного массива в модифицированном массиве, который формируется путем повторения заданного массива k раз.","def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",[],"['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']","def max_sum_in_modified_array(arr, k):
    # Modify the array by repeating it k times
    modified_arr = arr * k
    
    # Initialize variables for the maximum sum and current sum
    max_sum = float('-inf')
    current_sum = 0
    
    # Iterate through the modified array
    for num in modified_arr:
        # Add the current number to the current sum
        current_sum += num
        
        # If the current sum becomes negative, reset it to 0
        if current_sum < 0:
            current_sum = 0
        
        # Update the max sum if the current sum is greater
        if current_sum > max_sum:
            max_sum = current_sum
    
    # Return the max sum
    return max_sum"
Benchmark Questions Verification V2.ipynb,287,"Напишите функцию Python, которая принимает целое число n и возвращает сумму квадратов первых n четных натуральных чисел.","def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",[],"['assert square_Sum(2) == 20', 'assert square_Sum(3) == 56', 'assert square_Sum(4) == 120']","def sum_of_squares_of_even_natural_numbers(n):
    sum = 0
    for i in range(2, n*2+1, 2):
        sum += i**2
    return sum"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,290,Напишите функцию для поиска списка максимальной длины в списке списков.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",[],"['assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])', 'assert max_length([[5], [15,20,25]])==(3, [15,20,25])']","def find_longest_list(lists):
    longest = []
    for lst in lists:
        if len(lst) > len(longest):
            longest = lst
    return longest"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,291,"Напишите функцию, определяющую количество способов покрасить забор так, чтобы не более двух соседних столбов имели один и тот же цвет для данного забора с n столбами и k цветами.","def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",[],"['assert count_no_of_ways(2, 4) == 16', 'assert count_no_of_ways(3, 2) == 6', 'assert count_no_of_ways(4, 4) == 228']","def num_ways(n, k):
    if n == 0:
        return 0
    elif n == 1:
        return k
    elif n == 2:
        return k * k
    else:
        prev_prev = k
        prev = k * k
        for i in range(3, n + 1):
            current = (k - 1) * (prev_prev + prev)
            prev_prev = prev
            prev = current
        return prev"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,292,Напишите функцию Python для нахождения частного двух чисел (округленного до ближайшего целого числа).,"def find(n,m):  
    q = n//m 
    return (q)",[],"['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']","def find_quotient(a, b):
    quotient = a / b
    return round(quotient)"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,293,Напишите функцию для нахождения третьей стороны прямоугольного треугольника.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",[],"['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']","def find_hypotenuse(a, b):
    hypotenuse = (a**2 + b**2) ** 0.5
    return hypotenuse"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,294,Напишите функцию для поиска максимального значения в заданном неоднородном списке.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",[],"[""assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"", ""assert max_val(['Python', 15, 20, 25])==25"", ""assert max_val(['Python', 30, 20, 40, 50, 'version'])==50""]","def find_max_value(lst):
    max_value = float('-inf')
    for item in lst:
        if type(item) is list:
            nested_max = find_max_value(item)
            max_value = max(max_value, nested_max)
        else:
            max_value = max(max_value, item)
    return max_value"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,295,"Напишите функцию, возвращающую сумму всех делителей числа.","def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",[],"['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']","def sum_of_divisors(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,296,Напишите функцию Python для подсчета инверсий в массиве.,"def get_Inv_Count(arr): 
    inv_count = 0
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",[],"['assert get_Inv_Count([1,20,6,4,5]) == 5', 'assert get_Inv_Count([1,2,1]) == 1', 'assert get_Inv_Count([1,2,5,6,1]) == 3']","def count_inversions(arr):
    if len(arr) <= 1:
        return 0
    else:
        mid = len(arr) // 2
        left = arr[:mid]
        right = arr[mid:]
        inversions = count_inversions(left) + count_inversions(right) + merge_inversions(arr, left, right)
        return inversions"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,297,Напишите функцию для выравнивания заданной структуры вложенного списка.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",[],"['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']","def align_structure(structure):
    # Get the maximum length of each level
    max_lengths = []
    for level in structure:
        max_length = 0
        for item in level:
            length = len(str(item))
            if length > max_length:
                max_length = length
        max_lengths.append(max_length)
    
    # Adjust the length of each item in each level
    aligned_structure = []
    for i in range(len(structure)):
        aligned_level = []
        for item in structure[i]:
            aligned_item = str(item).ljust(max_lengths[i])
            aligned_level.append(aligned_item)
        aligned_structure.append(aligned_level)
    
    return aligned_structure"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,299,Напишите функцию для вычисления максимального агрегата из списка кортежей.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",[],"[""assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"", ""assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)"", ""assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)""]","def calculate_maximum_aggregate(aggregates):
    maximum_aggregate = float('-inf')
    for aggregate in aggregates:
        if aggregate > maximum_aggregate:
            maximum_aggregate = aggregate
    return maximum_aggregate"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,300,"Напишите функцию, которая находит количество всех двоичных последовательностей длины 2n таких, что сумма первых n бит равна сумме последних n бит.","def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",['import math'],"['assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)']","def count_binary_sequences(n):
    # Base case: for n = 0, there is only one binary sequence []
    if n == 0:
        return 1
    
    # Recursive case: count the binary sequences by considering the first bit
    count = 0
    for i in range(2):
        # Count the binary sequences where the first bit is i
        # The sum of the first n bits is the sum of the remaining n-1 bits plus i
        count += count_binary_sequences(n-1)
    
    return count"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,301,Напишите функцию для определения глубины словаря.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",[],"[""assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"", ""assert dict_depth({'a':1, 'b': {'c':'python'}})==2"", ""assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3""]","def get_depth(dictionary):
    if not isinstance(dictionary, dict):
        return 0
    if not dictionary:
        return 1
    return 1 + max(get_depth(value) for value in dictionary.values())"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,304,Напишите функцию Python для поиска элемента по заданному индексу после количества вращений.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",[],"['assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3', 'assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3', 'assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1']","def find_element(arr, rotations, index):
    # Calculate the effective rotations
    n = len(arr)
    k = rotations % n
    
    # Find the index of the element in the original array
    rotated_index = (index - k) % n
    
    # Return the element at the rotated index
    return arr[rotated_index]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,305,"Напишите функцию, возвращающую два слова из списка слов, начинающихся с буквы «p».","import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",[],"['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']","def get_words_starting_with_p(words):
    words_starting_with_p = []
    for word in words:
        if word.startswith('p'):
            words_starting_with_p.append(word)
    return words_starting_with_p"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,306,"Напишите функцию, которая находит максимальную сумму возрастающей подпоследовательности от префикса до i-го индекса, а также включает заданный k-й элемент, который находится после i, т. е. k &gt; i.","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",[],"['assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11', 'assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7', 'assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71']","def max_sum_with_k(nums, k):
    # Initialize the maximum sum as negative infinity
    max_sum = float('-inf')
    
    # Iterate from the prefix index to the (k-1)th index
    for i in range(len(nums[:k-1])):
        # Initialize the current sum as the value at the prefix index
        current_sum = nums[i]
        
        # Iterate from the (i+1)th index to the kth index
        for j in range(i+1, k):
            # If the current element is greater than the previous element,
            # add it to the current sum
            if nums[j] > nums[j-1]:
                current_sum += nums[j]
            # Otherwise, break the loop as the subsequence is not increasing
            else:
                break
        
        # Update the maximum sum if the current sum is greater
        max_sum = max(max_sum, current_sum)
    
    # Return the maximum sum
    return max_sum"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,307,Напишите функцию для получения двоеточия кортежа.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",[],"['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True)', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']","def get_quadrant(point):
    x, y = point
    if x > 0 and y > 0:
        return 1
    elif x < 0 and y > 0:
        return 2
    elif x < 0 and y < 0:
        return 3
    elif x > 0 and y < 0:
        return 4
    else:
        return 0"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,308,"Напишите функцию, позволяющую находить заданное количество крупнейших продуктов из двух заданных списков, выбирая по одному фактору из каждого списка.","def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",[],"['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']","def get_largest_products(products1, products2, num_largest, factor1, factor2):
    # Calculate the scores for all products using the specified factors
    scores = []
    for p1 in products1:
        for p2 in products2:
            score = p1[factor1] * p2[factor2]
            scores.append(score)
    
    # Get the indices of the largest scores
    largest_indices = sorted(range(len(scores)), key=lambda i: scores[i], reverse=True)[:num_largest]
    
    # Get the largest products using the indices
    largest_products = []
    for i in largest_indices:
        p1_index = i // len(products2)
        p2_index = i % len(products2)
        largest_products.append((products1[p1_index], products2[p2_index]))
    
    return largest_products"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,309,"Напишите функцию Python, чтобы найти максимум два числа.","def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",[],"['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']","def find_maximum(a, b):
    if a > b:
        return a
    else:
        return b"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,310,Напишите функцию для преобразования заданной строки в кортеж символов.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",[],"['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']","def string_to_tuple(string):
    return tuple(string)"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,311,Напишите функцию Python для установки самого левого неустановленного бита.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",[],"['assert set_left_most_unset_bit(10) == 14', 'assert set_left_most_unset_bit(12) == 14', 'assert set_left_most_unset_bit(15) == 15']","def set_leftmost_unset(n):
    # Check if the number is 0
    if n == 0:
        return 1
    
    # Calculate the logarithm base 2 of the number
    log2 = math.floor(math.log2(n))
    
    # Calculate the number with the leftmost unset bit
    result = 2 ** (log2 + 1)
    
    return result"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,312,Напишите функцию для определения объема конуса.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",['import math'],"['assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)', 'assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)', 'assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)']","def calculate_cone_volume(radius, height):
    volume = (1/3) * math.pi * radius**2 * height
    return volume"
Benchmark Questions Verification V2.ipynb,388,"Напишите функцию Python, чтобы найти наибольшую степень 2, которая меньше или равна n.","def highest_Power_of_2(n): 
    res = 0 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i 
            break 
    return res ",[],"['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']","def largest_power_of_two(n):
    power = 0
    while 2 ** power <= n:
        power += 1
    return power - 1"
Benchmark Questions Verification V2.ipynb,389,Напишите функцию для нахождения n-го числа Лукаса.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",[],"['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']","def lucas_number(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return lucas_number(n-2) + lucas_number(n-1)"
Benchmark Questions Verification V2.ipynb,390,"Напишите функцию, которая применяет заданную строку формата ко всем элементам списка.","def add_string(list_, string):
 add_string=[string.format(i) for i in  list_]
 return add_string",[],"[""assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"", ""assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']"", ""assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']""]","def format_string(string_format, string_list):
    formatted_list = []
    for string in string_list:
        formatted_list.append(string_format.format(string))
    return formatted_list"
Benchmark Questions Verification V2.ipynb,391,Напишите функцию для преобразования более одного списка во вложенный словарь.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",[],"['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]', 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]', 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']","def lists_to_nested_dict(*lists):
    nested_dict = {}
    num_lists = len(lists)
    if num_lists == 0:
        return nested_dict
    max_len = len(max(lists, key=len))
    for i in range(max_len):
        nested_dict_level = nested_dict
        for j in range(num_lists):
            if i < len(lists[j]):
                if j < num_lists - 1:
                    nested_dict_level.setdefault(lists[j][i], {})
                    nested_dict_level = nested_dict_level[lists[j][i]]
                else:
                    nested_dict_level.setdefault(lists[j][i], None)
    return nested_dict"
Benchmark Questions Verification V2.ipynb,392,"Напишите функцию, позволяющую найти максимально возможную сумму, используя данное уравнение f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) , н).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",[],"['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']","def max_sum(n):
    # Base case
    if n <= 1:
        return n
    
    # Recursive case
    return max(n, max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5))"
charlessutton@: Benchmark Questions Verification V2.ipynb,393,Напишите функцию для поиска списка максимальной длины.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",[],"['assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])', 'assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])']","def find_max_length_list(lists):
    max_length = 0
    max_length_list = None
    for lst in lists:
        if len(lst) > max_length:
            max_length = len(lst)
            max_length_list = lst
    return max_length_list"
Benchmark Questions Verification V2.ipynb,394,"Напишите функцию, проверяющую, не содержит ли данный кортеж дубликатов.","def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return res ",[],"['assert check_distinct((1, 4, 5, 6, 1, 4)) == False', 'assert check_distinct((1, 4, 5, 6)) == True', 'assert check_distinct((2, 3, 4, 5, 6)) == True']","def has_duplicates(tuple):
    return len(tuple) != len(set(tuple))"
Benchmark Questions Verification V2.ipynb,395,Напишите функцию Python для поиска первого неповторяющегося символа в заданной строке.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",[],"['assert first_non_repeating_character(""abcabc"") == None', 'assert first_non_repeating_character(""abc"") == ""a""', 'assert first_non_repeating_character(""ababc"") == ""c""']","def find_first_non_repeated_char(string):
    char_count = {}
    
    # Count the occurrences of each character in the string
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    # Find the first character with count 1
    for char in string:
        if char_count[char] == 1:
            return char
    
    # If no non-repeated character is found, return None
    return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,396,"Напишите функцию, проверяющую, начинается и заканчивается данная строка одним и тем же символом или нет.","import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",[],"['assert check_char(""abba"") == ""Valid""', 'assert check_char(""a"") == ""Valid""', 'assert check_char(""abcd"") == ""Invalid""']","def starts_ends_with_same_char(string):
    if len(string) == 0:
        return True
    return string[0] == string[-1]"
Benchmark Questions Verification V2.ipynb,397,Напишите функцию для нахождения медианы трех чисел.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",[],"['assert median_numbers(25,55,65)==55.0', 'assert median_numbers(20,10,30)==20.0', 'assert median_numbers(15,45,75)==45.0']","def find_median(a, b, c):
    sorted_nums = sorted([a, b, c])
    return sorted_nums[1]"
Benchmark Questions Verification V2.ipynb,398,Напишите функцию для вычисления суммы цифр каждого числа заданного списка.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",[],"['assert sum_of_digits([10,2,56])==14', ""assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19"", 'assert sum_of_digits([10,20,-4,5,-70])==19']","def sum_of_digits(numbers):
    sum_of_digits = []
    for num in numbers:
        digits = str(num)
        digit_sum = sum(int(digit) for digit in digits)
        sum_of_digits.append(digit_sum)
    return sum_of_digits"
Benchmark Questions Verification V2.ipynb,399,Напишите функцию для выполнения математической побитовой операции xor над заданными кортежами.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)', 'assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)', 'assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)']","def tuple_xor(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] ^ tuple2[i],)
    return result"
Benchmark Questions Verification V2.ipynb,400,Напишите функцию для извлечения количества уникальных кортежей в заданном списке.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",[],"['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']","def count_unique_tuples(tuples):
    count = 0
    unique_tuples = set(tuples)
    for tup in unique_tuples:
        count += 1
    return count"
Benchmark Questions Verification V2.ipynb,401,Напишите функцию для индексного сложения элементов кортежа в заданных двух вложенных кортежах.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']","def indexed_sum(a, b):
    result = ()
    for i in range(len(a)):
        inner_result = ()
        for j in range(len(a[i])):
            inner_result = inner_result + (a[i][j] + b[i][j],)
        result = result + (inner_result,)
    return result"
Benchmark Questions Verification V2.ipynb,404,"Напишите функцию Python, чтобы найти минимум два числа.","def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",[],"['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']","def find_minimum(a, b):
    if a < b:
        return a
    else:
        return b"
Benchmark Questions Verification V2.ipynb,405,"Напишите функцию, проверяющую, существует ли элемент внутри кортежа.","def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",[],"['assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'r\')==True', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'5\')==False', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"",""e""),3)==True']","def check_element(element, tuple):
    if element in tuple:
        return True
    else:
        return False"
Benchmark Questions Verification V2.ipynb,406,"Напишите функцию Python, чтобы определить, является ли четность данного числа нечетной.","def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False",[],"['assert find_Parity(12) == False', 'assert find_Parity(7) == True', 'assert find_Parity(10) == False']","def is_odd(number):
    if number % 2 != 0:
        return True
    else:
        return False"
Benchmark Questions Verification V2.ipynb,407,Напишите функцию для создания следующего большего числа путем перестановки цифр заданного числа.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",[],"['assert rearrange_bigger(12)==21', 'assert rearrange_bigger(10)==False', 'assert rearrange_bigger(102)==120']","def get_next_permutation(n):
    # Convert the number to a list of digits
    digits = list(str(n))
    
    # Find the first decreasing digit from the right
    i = len(digits) - 2
    while i >= 0 and digits[i] >= digits[i + 1]:
        i -= 1
    
    # If no decreasing digit is found, the number is the largest permutation
    if i < 0:
        return -1
    
    # Find the smallest digit to the right of digits[i] that is larger than digits[i]
    j = len(digits) - 1
    while digits[j] <= digits[i]:
        j -= 1
    
    # Swap digits[i] and digits[j]
    digits[i], digits[j] = digits[j], digits[i]
    
    # Reverse the digits to the right of i
    digits[i + 1:] = digits[i + 1:][::-1]
    
    # Convert the list of digits back to a number
    next_permutation = int(''.join(digits))
    
    return next_permutation"
Benchmark Questions Verification V2.ipynb,408,"Напишите функцию, позволяющую найти k наименьших пар, состоящих из одного элемента из первого массива и одного элемента из второго массива.","import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",[],"['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']","def k_smallest_pairs(nums1, nums2, k):
    pairs = []
    for num1 in nums1:
        for num2 in nums2:
            pairs.append((num1, num2))
    
    pairs.sort(key=lambda pair: pair[0] + pair[1])
    return pairs[:k]"
Benchmark Questions Verification V2.ipynb,409,Напишите функцию для поиска минимального произведения пар кортежей в заданном списке.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",[],"['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']","def min_product_pair(tuples):
    if len(tuples) < 2:
        return None"
Benchmark Questions Verification V2.ipynb,410,Напишите функцию для поиска минимального значения в заданном неоднородном списке.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",[],"[""assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"", ""assert min_val(['Python', 15, 20, 25])==15"", ""assert min_val(['Python', 30, 20, 40, 50, 'version'])==20""]","def find_minimum(lst):
    min_value = float('inf')
    for item in lst:
        if type(item) is list:
            nested_min = find_minimum(item)
            min_value = min(min_value, nested_min)
        else:
            min_value = min(min_value, item)
    return min_value"
charlessutton@: Benchmark Questions Verification V2.ipynb,411,Напишите функцию для преобразования данной строки регистра змеи в строку регистра верблюда.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('android_tv') == 'AndroidTv'"", ""assert snake_to_camel('google_pixel') == 'GooglePixel'"", ""assert snake_to_camel('apple_watch') == 'AppleWatch'""]","def snake_case_to_camel_case(snake_case):
    # Split the snake case string into words
    words = snake_case.split('_')
    
    # Capitalize the first letter of each word (except the first word)
    capitalized_words = [words[0]] + [word.capitalize() for word in words[1:]]
    
    # Join the capitalized words into a camel case string
    camel_case = ''.join(capitalized_words)
    
    return camel_case"
charlessutton@: Benchmark Questions Verification V2.ipynb,412,Напишите функцию Python для удаления нечетных чисел из заданного списка.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",[],"['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']","def remove_odd_numbers(numbers):
    even_numbers = []
    for num in numbers:
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers"
charlessutton@: Benchmark Questions Verification V2.ipynb,413,Напишите функцию для извлечения n-го элемента из заданного списка кортежей.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",[],"[""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]""]","def get_nth_element(tuple_list, n):
    result = []
    for tpl in tuple_list:
        if n < len(tpl):
            result.append(tpl[n])
    return result"
charlessutton@: Benchmark Questions Verification V2.ipynb,414,"Напишите функцию Python, чтобы проверить, существует ли какое-либо значение в последовательности или нет.","def overlapping(list1,list2):  
    for i in range(len(list1)): 
        for j in range(len(list2)): 
            if(list1[i]==list2[j]): 
                return True
    return False",[],"['assert overlapping([1,2,3,4,5],[6,7,8,9]) == False', 'assert overlapping([1,2,3],[4,5,6]) == False', 'assert overlapping([1,4,5],[1,4,5]) == True']","def check_existence(sequence):
    for value in sequence:
        if value:
            return True
    return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,415,"Напишите функцию Python, чтобы найти пару с наибольшим произведением из заданного массива целых чисел.","def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",[],"['assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)', 'assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)', 'assert max_Product([1,2,3]) == (2,3)']","def max_product_pair(nums):
    if len(nums) < 2:
        return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,417,Напишите функцию для поиска общего первого элемента в заданном списке кортежей.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",[],"[""assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"", ""assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]"", ""assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]""]","def find_common_first_element(tuples):
    first_elements = [t[0] for t in tuples]
    for element in first_elements:
        if first_elements.count(element) == len(tuples):
            return element
    return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,418,"Напишите функцию Python, чтобы найти элемент списка, имеющий максимальную длину.","def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",[],"[""assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']","def find_longest_element(lst):
    longest = lst[0]
    for element in lst:
        if len(element) > len(longest):
            longest = element
    return longest"
charlessutton@: Benchmark Questions Verification V2.ipynb,419,"Напишите функцию для округления каждого числа в заданном списке чисел и выведите общую сумму, умноженную на длину списка.","def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",[],"['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']","def round_sum_times_length(numbers):
    round_sum = sum([round(num) for num in numbers])
    return round_sum * len(numbers)"
charlessutton@: Benchmark Questions Verification V2.ipynb,420,"Напишите функцию Python, чтобы найти кубическую сумму первых n четных натуральных чисел.","def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",[],"['assert cube_Sum(2) == 72', 'assert cube_Sum(3) == 288', 'assert cube_Sum(4) == 800']","def cubic_sum_of_even_numbers(n):
    sum = 0
    for i in range(2, n*2+1, 2):
        sum += i**3
    return sum"
charlessutton@: Benchmark Questions Verification V2.ipynb,421,Напишите функцию для объединения каждого элемента кортежа по разделителю.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",[],"['assert concatenate_tuple((""ID"", ""is"", 4, ""UTS"") ) == \'ID-is-4-UTS\'', 'assert concatenate_tuple((""QWE"", ""is"", 4, ""RTY"") ) == \'QWE-is-4-RTY\'', 'assert concatenate_tuple((""ZEN"", ""is"", 4, ""OP"") ) == \'ZEN-is-4-OP\'']","def join_tuple_elements(tuple, separator):
    joined_string = """"
    for i in range(len(tuple)):
        joined_string += str(tuple[i])
        if i < len(tuple) - 1:
            joined_string += separator
    return joined_string"
charlessutton@: Benchmark Questions Verification V2.ipynb,422,"Напишите функцию Python, чтобы найти среднее значение кубов первых n натуральных чисел.","def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",[],"['assert find_Average_Of_Cube(2) == 4.5', 'assert find_Average_Of_Cube(3) == 12', 'assert find_Average_Of_Cube(1) == 1']","def average_of_cubes(n):
    sum_of_cubes = 0
    for i in range(1, n+1):
        sum_of_cubes += i**3
    return sum_of_cubes / n"
charlessutton@: Benchmark Questions Verification V2.ipynb,424,Напишите функцию для извлечения только заднего индексного элемента каждой строки в данном кортеже.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",[],"[""assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"", ""assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']"", ""assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']""]","def get_last_index_elements(tuple):
    last_index_elements = []
    for tu in tuple:
        if len(tu) > 0:
            last_index_elements.append(tu[-1])
        else:
            last_index_elements.append(None)
    return last_index_elements"
charlessutton@: Benchmark Questions Verification V2.ipynb,425,"Напишите функцию для подсчета количества подсписков, содержащих определенный элемент.","def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",[],"['assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3', ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3"", ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1""]","def count_sublists(lst, element):
    count = 0
    for sublist in lst:
        if element in sublist:
            count += 1
    return count"
charlessutton@: Benchmark Questions Verification V2.ipynb,426,Напишите функцию для фильтрации нечетных чисел.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",[],"['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']","def filter_odd_numbers(numbers):
    even_numbers = []
    for num in numbers:
        if num % 2 == 0:
            even_numbers.append(num)
    return even_numbers"
charlessutton@: Benchmark Questions Verification V2.ipynb,427,Напишите функцию для преобразования даты из формата гггг-мм-дд в формат дд-мм-гггг.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",[],"['assert change_date_format(""2026-01-02"") == \'02-01-2026\'', 'assert change_date_format(""2020-11-13"") == \'13-11-2020\'', 'assert change_date_format(""2021-04-26"") == \'26-04-2021\'']","def convert_date(date):
    parts = date.split('-')
    return parts[2] + '-' + parts[1] + '-' + parts[0]"
charlessutton@: Benchmark Questions Verification V2.ipynb,428,Напишите функцию для сортировки данного массива с помощью сортировки оболочки.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",[],"['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']","def shell_sort(arr):
    n = len(arr)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            j = i
            while j >= gap and arr[j] < arr[j - gap]:
                arr[j], arr[j - gap] = arr[j - gap], arr[j]
                j -= gap
        gap = gap // 2
    return arr"
charlessutton@: Benchmark Questions Verification V2.ipynb,429,Напишите функцию для извлечения поэлементных кортежей и кортежей из данных двух кортежей.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']","def extract_tuples(tuple1, tuple2):
    element_tuples = ()
    tuple_tuples = ()
    
    # Extract element-wise tuples
    for i in range(len(tuple1)):
        element_tuples += ((tuple1[i], tuple2[i]),)
    
    # Extract tuple-wise tuples
    tuple_tuples = tuple1, tuple2
    
    return element_tuples, tuple_tuples"
charlessutton@: Benchmark Questions Verification V2.ipynb,430,Напишите функцию для нахождения директрисы параболы.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",[],"['assert parabola_directrix(5,3,2)==-198', 'assert parabola_directrix(9,8,4)==-2336', 'assert parabola_directrix(2,4,6)==-130']","def find_directrix(a, b):
    if a == 0:
        return None  # Not a parabola
    else:
        return -b / (2 * a)"
charlessutton@: Benchmark Questions Verification V2.ipynb,431,"Напишите функцию, которая принимает два списка и возвращает true, если у них есть хотя бы один общий элемент.","def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",[],"['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', ""assert common_element(['a','b','c'], ['d','b','e'])==True""]","def has_common_element(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,432,Напишите функцию для нахождения медианной длины трапеции.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",[],"['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']","def median_length(base1, base2, height):
    median_length = (base1 + base2) / 2
    return median_length"
charlessutton@: Benchmark Questions Verification V2.ipynb,433,"Напишите функцию, проверяющую, больше ли введенное число элементов заданного массива.","def check_greater(arr, number):
  arr.sort()
  return number > arr[-1]",[],"['assert check_greater([1, 2, 3, 4, 5], 4) == False', 'assert check_greater([2, 3, 4, 5, 6], 8) == True', 'assert check_greater([9, 7, 4, 8, 6, 1], 11) == True']","def is_greater_than_input(arr):
    return len(arr) > entered_number"
charlessutton@: Benchmark Questions Verification V2.ipynb,434,"Напишите функцию, которая соответствует строке, в которой за буквой «а» следует одна или несколько букв «б».","import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False
",[],"['assert text_match_one(""ac"")==False', 'assert text_match_one(""dc"")==False', 'assert text_match_one(""abba"")==True']","def match_string(string):
    pattern = r'a+b+'
    if re.fullmatch(pattern, string):
        return True
    else:
        return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,435,Напишите функцию Python для поиска последней цифры заданного числа.,"def last_Digit(n) :
    return (n % 10) ",[],"['assert last_Digit(123) == 3', 'assert last_Digit(25) == 5', 'assert last_Digit(30) == 0']","def find_last_digit(number):
    return number % 10"
charlessutton@: Benchmark Questions Verification V2.ipynb,436,Напишите функцию Python для возврата отрицательных чисел в списке.,"def neg_nos(list1):
  out = []
  for num in list1: 
    if num < 0: 
      out.append(num)
  return out ",[],"['assert neg_nos([-1,4,5,-6]) == [-1,-6]', 'assert neg_nos([-1,-2,3,4]) == [-1,-2]', 'assert neg_nos([-7,-6,8,9]) == [-7,-6]']","def get_negative_numbers(numbers):
    negative_numbers = []
    for num in numbers:
        if num < 0:
            negative_numbers.append(num)
    return negative_numbers"
charlessutton@: Benchmark Questions Verification V2.ipynb,437,Напишите функцию для удаления нечетных символов в строке.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",[],"['assert remove_odd(""python"")==(""yhn"")', 'assert remove_odd(""program"")==(""rga"")', 'assert remove_odd(""language"")==(""agae"")']","def remove_odd_characters(string):
    even_characters = """"
    for i in range(len(string)):
        if i % 2 == 0:
            even_characters += string[i]
    return even_characters"
charlessutton@: Benchmark Questions Verification V2.ipynb,438,Напишите функцию для подсчета двунаправленных пар кортежей.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return res",[],"['assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3', 'assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2', 'assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4']","def count_bidirectional_pairs(pairs):
    count = 0
    for pair in pairs:
        reverse_pair = (pair[1], pair[0])
        if reverse_pair in pairs:
            count += 1
    return count"
charlessutton@: Benchmark Questions Verification V2.ipynb,439,Напишите функцию для объединения списка нескольких целых чисел в одно целое число.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",[],"['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']","def combine_integers(integers):
    combined = """"
    for num in integers:
        combined += str(num)
    return int(combined)"
charlessutton@: Benchmark Questions Verification V2.ipynb,440,Напишите функцию для поиска первого наречия и его позиции в предложении.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",[],"['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')', 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')', 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']","def find_adverb(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # List of common adverbs
    adverbs = ['happily', 'quickly', 'very', 'always', 'never']
    
    # Iterate over the words and check if it is an adverb
    for i, word in enumerate(words):
        if word in adverbs:
            return word, i
    
    # If no adverb is found, return None for both the adverb and position
    return None, None"
charlessutton@: Benchmark Questions Verification V2.ipynb,441,Напишите функцию для нахождения площади поверхности куба заданного размера.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",[],"['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']","def surface_area(length):
    return 6 * length**2"
charlessutton@: Benchmark Questions Verification V2.ipynb,442,Напишите функцию для нахождения отношения положительных чисел в массиве целых чисел.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",[],"['assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54', 'assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69', 'assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56']","def find_positive_ratio(numbers):
    positive_numbers = [num for num in numbers if num > 0]
    if len(positive_numbers) < 2:
        return None
    else:
        return positive_numbers[1] / positive_numbers[0]"
charlessutton@: Benchmark Questions Verification V2.ipynb,443,"Напишите функцию Python, чтобы найти наибольшее отрицательное число из заданного списка.","def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",[],"['assert largest_neg([1,2,3,-4,-6]) == -6', 'assert largest_neg([1,2,3,-8,-9]) == -9', 'assert largest_neg([1,2,3,4,-1]) == -1']","def find_largest_negative(numbers):
    largest_negative = None
    for num in numbers:
        if num < 0:
            if largest_negative is None or num > largest_negative:
                largest_negative = num
    return largest_negative"
charlessutton@: Benchmark Questions Verification V2.ipynb,444,"Напишите функцию, которая обрезает каждый кортеж по k в заданном списке кортежей.","def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",[],"[""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"", ""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'"", ""assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'""]","def truncate_tuples(tuples, k):
    truncated_tuples = []
    for tup in tuples:
        if len(tup) > k:
            truncated_tuples.append(tup[:k])
        else:
            truncated_tuples.append(tup)
    return truncated_tuples"
charlessutton@: Benchmark Questions Verification V2.ipynb,445,"Напишите функцию, выполняющую индексное умножение элементов кортежа в данных двух кортежах.","def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']","def index_multiply(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] * tuple2[i],)
    return result"
charlessutton@: Benchmark Questions Verification V2.ipynb,446,Напишите функцию Python для подсчета появления всех элементов списка в кортеже.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",[],"[""assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"", 'assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6', 'assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2']","def count_occurrences(tuple_list,):
    occurrences = {}
    for tuple in tuple_list:
        for element in tuple:
            if element in occurrences:
                occurrences[element] += 1
            else:
                occurrences[element] = 1
    return occurrences"
charlessutton@: Benchmark Questions Verification V2.ipynb,447,Напишите функцию для поиска кубов отдельных элементов в списке.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",[],"['assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'assert cube_nums([10,20,30])==([1000, 8000, 27000])', 'assert cube_nums([12,15])==([1728, 3375])']","def find_cube(numbers):
    cubes = []
    for num in numbers:
        cubes.append(num ** 3)
    return cubes"
charlessutton@: Benchmark Questions Verification V2.ipynb,448,Напишите функцию для вычисления суммы чисел Перрина.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",[],"['assert cal_sum(9) == 49', 'assert cal_sum(10) == 66', 'assert cal_sum(11) == 88']","def peralta_number(n):
    if n == 0:
        return 0
    elif n == 1 or n == 2:
        return 1
    else:
        return peralta_number(n - peralta_number(n-1)) + peralta_number(n - peralta_number(n-2))"
charlessutton@: Benchmark Questions Verification V2.ipynb,450,Напишите функцию для извлечения строк заданного размера из заданного списка строковых значений.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",[],"[""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']""]","def extract_strings(strings, size):
    extracted_strings = []
    for string in strings:
        if len(string) == size:
            extracted_strings.append(string)
    return extracted_strings"
charlessutton@: Benchmark Questions Verification V2.ipynb,451,Напишите функцию для удаления всех пробелов из заданной строки.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",[],"[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]","def remove_spaces(string):
    return string.replace("" "", """")"
charlessutton@: Benchmark Questions Verification V2.ipynb,452,"Напишите функцию, которая выдает сумму убытка при продаже, если данная сумма имеет убыток, иначе возвращает 0.","def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return 0",[],"['assert loss_amount(1500,1200)==0', 'assert loss_amount(100,200)==100', 'assert loss_amount(2000,5000)==3000']","def loss_on_sale(loss):
    if loss < 0:
        return loss
    else:
        return 0"
charlessutton@: Benchmark Questions Verification V2.ipynb,453,"Напишите функцию Python, чтобы найти сумму четных множителей числа.","import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res",[],"['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']","def sum_even_multiples(number, limit):
    sum_even = 0
    for i in range(2, limit+1, 2):
        if i % number == 0:
            sum_even += i
    return sum_even"
charlessutton@: Benchmark Questions Verification V2.ipynb,454,"Напишите функцию, которая соответствует слову, содержащему букву «z».","import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_wordz(""pythonz."")==True', 'assert text_match_wordz(""xyz."")==True', 'assert text_match_wordz(""  lang  ."")==False']","def find_word_with_z(words):
    for word in words:
        if 'z' in word:
            return word
    return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,455,"Напишите функцию, проверяющую, содержит ли данный номер месяца 31 день или нет.","def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",[],"['assert check_monthnumb_number(5)==True', 'assert check_monthnumb_number(2)==False', 'assert check_monthnumb_number(6)==False']","def has31Days(month):
    months_with_31_days = [1, 3, 5, 7, 8, 10, 12]
    if month in months_with_31_days:
        return True
    else:
        return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,456,"Напишите функцию, которая переворачивает каждую строку в заданном списке строковых значений.","def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",[],"[""assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"", ""assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']"", ""assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']""]","def reverse_strings(strings):
    reversed_strings = []
    for string in strings:
        reversed_strings.append(string[::-1])
    return reversed_strings"
charlessutton@: Benchmark Questions Verification V2.ipynb,457,"Напишите функцию Python, чтобы найти подсписок минимальной длины.","def Find_Min(lst): 
    return min(lst, key=len) ",[],"['assert Find_Min([[1],[1,2],[1,2,3]]) == [1]', 'assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]', ""assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']""]","def find_min_length_sublist(lst, target):
    min_length = float('inf')
    min_length_sublist = None
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            sublist = lst[i:j+1]
            if sum(sublist) == target and len(sublist) < min_length:
                min_length = len(sublist)
                min_length_sublist = sublist
    return min_length_sublist"
charlessutton@: Benchmark Questions Verification V2.ipynb,458,Напишите функцию для нахождения площади прямоугольника.,"def rectangle_area(l,b):
  area=l*b
  return area",[],"['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']","def calculate_area(length, width):
    area = length * width
    return area"
charlessutton@: Benchmark Questions Verification V2.ipynb,459,Напишите функцию для удаления подстрок в верхнем регистре из заданной строки.,"import re
def remove_uppercase(str1):
  return re.sub('[A-Z]', '', str1)",[],"[""assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"", ""assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'"", ""assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'""]","def remove_uppercase_substrings(string):
    # Compile a pattern to match uppercase substrings
    pattern = re.compile(r'[A-Z]+')
    
    # Find all uppercase substrings in the string
    uppercase_substrings = pattern.findall(string)
    
    # Remove each uppercase substring from the string
    for substring in uppercase_substrings:
        string = string.replace(substring, '')
    
    return string"
charlessutton@: Benchmark Questions Verification V2.ipynb,460,"Напишите функцию Python, чтобы получить первый элемент каждого подсписка.","def Extract(lst): 
    return [item[0] for item in lst] ",[],"['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']","def get_first_element(sublists):
    first_elements = []
    for sublist in sublists:
        if len(sublist) > 0:
            first_elements.append(sublist[0])
    return first_elements"
charlessutton@: Benchmark Questions Verification V2.ipynb,461,Напишите функцию Python для подсчета символов верхнего регистра в заданной строке.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",[],"[""assert upper_ctr('PYthon') == 1"", ""assert upper_ctr('BigData') == 1"", ""assert upper_ctr('program') == 0""]","def count_uppercase_chars(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count"
charlessutton@: Benchmark Questions Verification V2.ipynb,462,Напишите функцию для поиска всех возможных комбинаций элементов заданного списка.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",[],"[""assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"", ""assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]"", ""assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]""]","def find_combinations(lst):
    combinations = []
    for r in range(1, len(lst) + 1):
        combinations.extend(itertools.combinations(lst, r))
    return combinations"
charlessutton@: Benchmark Questions Verification V2.ipynb,463,Напишите функцию для поиска максимального продукта подмассива данного массива.,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",[],"['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']","def max_product_subarray(nums):
    n = len(nums)
    if n == 0:
        return 0"
charlessutton@: Benchmark Questions Verification V2.ipynb,464,"Напишите функцию, проверяющую, все ли значения в словаре одинаковы.","def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",[],"[""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False""]","def are_values_equal(dictionary):
    values = dictionary.values()
    first_value = next(values)
    return all(value == first_value for value in values)"
charlessutton@: Benchmark Questions Verification V2.ipynb,465,Напишите функцию для удаления пустых элементов из заданного словаря.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",[],"[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"", ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"", ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]","def remove_empty_elements(dictionary):
    keys_to_remove = []
    for key, value in dictionary.items():
        if value is None or value == '':
            keys_to_remove.append(key)
    for key in keys_to_remove:
        del dictionary[key]
    return dictionary"
charlessutton@: Benchmark Questions Verification V2.ipynb,468,"Напишите функцию для нахождения максимального произведения, полученного путем умножения чисел возрастающей подпоследовательности этого массива.","def max_product(arr):   
  n = len(arr)
  mpis = arr[:]
  for i in range(n): 
    current_prod = arr[i]
    j = i + 1
    while j < n:
      if arr[j-1] > arr[j]: 
        break
      current_prod *= arr[j]
      if current_prod > mpis[j]:
        mpis[j] = current_prod 
      j = j + 1
  return max(mpis)",[],"['assert max_product([3, 100, 4, 5, 150, 6]) == 3000', 'assert max_product([4, 42, 55, 68, 80]) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460']","def max_increasing_subsequence_product(nums):
    n = len(nums)
    if n < 2:
        return 0"
charlessutton@: Benchmark Questions Verification V2.ipynb,470,Напишите функцию для поиска попарного сложения соседних элементов данного кортежа.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",[],"['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']","def pairwise_sum(tuple):
    sum_tuple = ()
    for i in range(0, len(tuple)-1, 2):
        sum_tuple += (tuple[i] + tuple[i+1],)
    return sum_tuple"
charlessutton@: Benchmark Questions Verification V2.ipynb,471,"Напишите функцию Python, чтобы найти продукт умножения массива по модулю n.","def find_remainder(arr, n): 
    mul = 1
    for i in range(len(arr)):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",[],"['assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9', 'assert find_remainder([1,1,1],1) == 0', 'assert find_remainder([1,2,1],2) == 0']","def find_product(arr, n):
    product = 1
    for num in arr:
        product = (product * num) % n
    return product"
charlessutton@: Benchmark Questions Verification V2.ipynb,472,"Напишите функцию Python, чтобы проверить, содержит ли данный список последовательные числа или нет.","def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",[],"['assert check_Consecutive([1,2,3,4,5]) == True', 'assert check_Consecutive([1,2,3,5,6]) == False', 'assert check_Consecutive([1,2,1]) == False']","def are_numbers_sequential(numbers):
    for i in range(len(numbers) - 1):
        if numbers[i] != numbers[i+1] - 1:
            return False
    return True"
charlessutton@: Benchmark Questions Verification V2.ipynb,473,"Напишите функцию, которая находит пересечение кортежей элементов в заданном списке кортежей независимо от их порядка.","def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",[],"['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']","def find_intersection(tuples):
    if len(tuples) == 0:
        return set()
    
    # Convert the first tuple to a set
    intersection = set(tuples[0])
    
    # Iterate through the remaining tuples
    for tpl in tuples[1:]:
        # Update the intersection with the common elements
        intersection = intersection.intersection(tpl)
    
    return intersection"
charlessutton@: Benchmark Questions Verification V2.ipynb,474,Напишите функцию для замены символов в строке.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",[],"['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")', 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")', 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']","def replace_characters(string, replacements):
    for char, replace_with in replacements.items():
        string = string.replace(char, replace_with)
    return string"
charlessutton@: Benchmark Questions Verification V2.ipynb,475,Напишите функцию для сортировки словаря по значению.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",[],"[""assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"", ""assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"", ""assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]""]","def sort_dictionary_by_value(dictionary):
    sorted_dictionary = dict(sorted(dictionary.items(), key=lambda item: item[1]))
    return sorted_dictionary"
charlessutton@: Benchmark Questions Verification V2.ipynb,476,"Напишите функцию Python, чтобы найти сумму наибольшего и наименьшего значений в заданном массиве.","def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",[],"['assert big_sum([1,2,3]) == 4', 'assert big_sum([-1,2,3,4]) == 3', 'assert big_sum([2,3,6]) == 8']","def sum_smallest_largest(arr):
    smallest = min(arr)
    largest = max(arr)
    return smallest + largest"
charlessutton@: Benchmark Questions Verification V2.ipynb,477,Напишите функцию Python для преобразования заданной строки в нижний регистр.,"def is_lower(string):
  return (string.lower())",[],"['assert is_lower(""InValid"") == ""invalid""', 'assert is_lower(""TruE"") == ""true""', 'assert is_lower(""SenTenCE"") == ""sentence""']","def convert_to_lower_case(string):
    return string.lower()"
charlessutton@: Benchmark Questions Verification V2.ipynb,478,Напишите функцию для удаления подстрок в нижнем регистре из заданной строки.,"import re
def remove_lowercase(str1):
 return re.sub('[a-z]', '', str1)",[],"['assert remove_lowercase(""PYTHon"")==(\'PYTH\')', 'assert remove_lowercase(""FInD"")==(\'FID\')', 'assert remove_lowercase(""STRinG"")==(\'STRG\')']","def remove_substrings(string, substrings):
    result = string
    for substr in substrings:
        result = result.replace(substr, '')
    return result"
charlessutton@: Benchmark Questions Verification V2.ipynb,479,"Напишите функцию Python, чтобы найти первую цифру заданного числа.","def first_Digit(n) :  
    while n >= 10:  
        n = n / 10 
    return int(n) ",[],"['assert first_Digit(123) == 1', 'assert first_Digit(456) == 4', 'assert first_Digit(12) == 1']","def find_first_digit(number):
    # Convert the number to a string
    number_str = str(number)
    
    # Return the first character converted back to an integer
    return int(number_str[0])"
