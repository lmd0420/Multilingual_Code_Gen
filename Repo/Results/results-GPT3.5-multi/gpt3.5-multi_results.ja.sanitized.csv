source_file,task_id,prompt,code,test_imports,test_list,gpt_result
Benchmark Questions Verification V2.ipynb,11,文字列から指定された文字の最初と最後の出現を削除する Python 関数を作成します。,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",[],"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']","def remove_first_last_char(string, char):
    # Find the first occurrence of the character
    first_index = string.find(char)
    
    # Find the last occurrence of the character
    last_index = string.rfind(char)
    
    if first_index == -1 or last_index == -1 or first_index == last_index:
        # If the character is not found or it appears only once, return the original string
        return string
    else:
        # Remove the first and last occurrence of the character using slicing
        return string[:first_index] + string[first_index+1:last_index] + string[last_index+1:]"
Benchmark Questions Verification V2.ipynb,12,指定された行列を行の合計に従って昇順に並べ替える関数を作成します。,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",[],"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']","def sort_matrix_by_row_sum(matrix):
    row_sums = [sum(row) for row in matrix]
    sorted_indices = sorted(range(len(matrix)), key=lambda x: row_sums[x])
    sorted_matrix = [matrix[i] for i in sorted_indices]
    return sorted_matrix"
Benchmark Questions Verification V2.ipynb,14,三角柱の体積を求める Python 関数を作成します。,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",[],"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']","def calculate_volume(base_area, height):
    volume = (1 / 3) * base_area * height
    return volume"
Benchmark Questions Verification V2.ipynb,16,入力文字列にアンダースコアで結合された一連の小文字が含まれる場合は true を返し、それ以外の場合は false を返す関数を作成します。,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_lowercase_underscore(""aab_cbbbc"")==(True)', 'assert text_lowercase_underscore(""aab_Abbbc"")==(False)', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(False)']","def is_lower_snake_case(string):
    pattern = r'^[a-z]+(_[a-z]+)*$'
    return re.match(pattern, string) is not None"
Benchmark Questions Verification V2.ipynb,17,入力として辺の長さを指定すると、正方形の周囲長を返す関数を作成します。,"def square_perimeter(a):
  perimeter=4*a
  return perimeter",[],"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']","def perimeter_of_square(length_of_side):
    return 4 * length_of_side"
Benchmark Questions Verification V2.ipynb,18,2 番目の文字列に存在する文字を最初の文字列から削除する関数を作成します。,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",[],"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\'']","def remove_characters(string1, string2):
    result = """"
    for char in string1:
        if char not in string2:
            result += char
    return result"
Benchmark Questions Verification V2.ipynb,19,指定された整数の配列に重複する要素が含まれているかどうかを確認する関数を作成します。,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",[],"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']","def contains_duplicate(nums):
    return len(nums) != len(set(nums))"
Benchmark Questions Verification V2.ipynb,20,指定された数字がウッドボールかどうかを確認する関数を作成します。,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",[],"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']","def is_woodall(n):
    if n <= 1:
        return False
    woodall = 1
    k = 1
    while woodall < n:
        woodall = k * (2**k - 1)
        k += 1
    return woodall == n"
Mike's Copy of Benchmark Questions Verification V2.ipynb,56,指定された数値がその逆の 2 倍より 1 小さいかどうかを確認する Python 関数を作成します。,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",[],"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']","def is_smaller_than_double(n):
    return n < (2 * n) - 1"
Mike's Copy of Benchmark Questions Verification V2.ipynb,57,与えられた数字のリストで形成できる最大の数値を見つける Python 関数を作成します。,"def find_Max_Num(arr) : 
    n = len(arr)
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",[],"['assert find_Max_Num([1,2,3]) == 321', 'assert find_Max_Num([4,5,6,1]) == 6541', 'assert find_Max_Num([1,2,3,9]) == 9321']","def find_largest_number(numbers):
    largest_number = numbers[0]
    for number in numbers:
        if number > largest_number:
            largest_number = number
    return largest_number"
Mike's Copy of Benchmark Questions Verification V2.ipynb,58,指定された 2 つの整数の符号が逆かどうかを確認する Python 関数を作成します。,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",[],"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False', 'assert opposite_Signs(-2,2) == True']","def are_signs_opposite(int1, int2):
    if int1 > 0 and int2 < 0:
        return True
    elif int1 < 0 and int2 > 0:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,59,n 番目の八角形の数を見つける関数を作成します。,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",[],"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']","def octagonal_number(n):
    return n * (3 * n - 2)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,61,桁数の合計がその長さに等しい部分文字列の数を数える Python 関数を作成します。,"from collections import defaultdict
def count_Substrings(s):
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",[],"[""assert count_Substrings('112112') == 6"", ""assert count_Substrings('111') == 6"", ""assert count_Substrings('1101112') == 12""]","def count_substrings(string):
    count = 0
    length = len(string)
    for i in range(length):
        for j in range(i, length):
            substring = string[i:j+1]
            digits_sum = sum(int(d) for d in substring)
            if digits_sum == len(substring):
                count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,62,リスト内の最小の数値を見つける Python 関数を作成します。,"def smallest_num(xs):
  return min(xs)
",[],"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']","def find_minimum(numbers):
    minimum = numbers[0]
    for num in numbers:
        if num < minimum:
            minimum = num
    return minimum"
Mike's Copy of Benchmark Questions Verification V2.ipynb,63,指定されたタプル リスト内の利用可能なペア間の最大差を見つける関数を作成します。,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",[],"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']","def max_difference(pairs):
    if len(pairs) < 2:
        return None"
Mike's Copy of Benchmark Questions Verification V2.ipynb,64,各タプルの 2 番目の値を使用してタプルのリストを並べ替える関数を作成します。,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",[],"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]","def sort_tuples(tuples):
    return sorted(tuples, key=lambda x: x[1])"
Mike's Copy of Benchmark Questions Verification V2.ipynb,65,リストをフラット化し、そのすべての要素を合計する関数を作成します。,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",[],"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']","def flatten_and_sum(lst):
    flattened = [item for sublist in lst for item in sublist]
    return sum(flattened)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,66,リスト内の正の数を数える Python 関数を作成します。,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",[],"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']","def count_positive_numbers(numbers):
    count = 0
    for num in numbers:
        if num > 0:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,67,一連のベル番号を分割する方法の数を見つける関数を作成します。,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",[],"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']","def count_partition_methods(n):
    # Base case: If n is 0, there is only one way to partition it (with an empty partition)
    if n == 0:
        return 1
    
    # Initialize the count to 0
    count = 0
    
    # Try partitioning the number using different partition sizes
    for size in range(1, n+1):
        # The next partition size should be smaller or equal to the remaining number
        if size <= n:
            # Recursively count the partition methods for the remaining number
            count += count_partition_methods(n - size)
    
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,68,指定された配列が単調かどうかを確認する Python 関数を作成します。,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",[],"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']","def is_monotonic(arr):
    # Check if the array is non-decreasing
    non_decreasing = all(arr[i] <= arr[i+1] for i in range(len(arr)-1))
    if non_decreasing:
        return True
    
    # Check if the array is non-increasing
    non_increasing = all(arr[i] >= arr[i+1] for i in range(len(arr)-1))
    if non_increasing:
        return True
    
    # If neither non-decreasing nor non-increasing, the array is not monotonic
    return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,69,リストに指定されたサブリストが含まれているかどうかを確認する関数を作成します。,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",[],"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']","def check_sublist(main_list, sublist):
    return sublist in main_list"
Mike's Copy of Benchmark Questions Verification V2.ipynb,70,指定されたすべてのタプルの長さが等しいかどうかを確認する関数を作成します。,"def find_equal_tuple(Input):
  k = 0 if not Input else len(Input[0])
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input):
  return find_equal_tuple(Input) == 1",[],"['assert get_equal([(11, 22, 33), (44, 55, 66)]) == True', 'assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False', 'assert get_equal([(1, 2), (3, 4)]) == True']","def are_tuples_of_equal_length(tuples):
    if not tuples:
        return True
    length = len(tuples[0])
    return all(len(t) == length for t in tuples)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,71,要素のリストを並べ替える関数を作成します。,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",[],"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']","def sort_list(lst):
    return sorted(lst)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,72,指定された数値が 2 つの平方の差として表現できるかどうかを確認する Python 関数を作成します。,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",[],"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']","def is_difference_of_squares(n):
    for i in range(1, int(n**0.5) + 1):
        diff = n - i**2
        if int(diff**0.5) ** 2 == diff:
            return True
    return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,74,パターン配列で指定されたシーケンスに従っているかどうかを確認する関数を作成します。,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",[],"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False']","def sequence_follows_pattern(sequence, pattern):
    if len(sequence) != len(pattern):
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,75,指定されたタプルのリストから、k で割り切れるすべての要素を持つタプルを見つける関数を作成します。,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return res",[],"['assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]', 'assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]', 'assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]']","def find_divisible_tuples(tuples, k):
    divisible_tuples = []
    for tpl in tuples:
        if tpl[0] % k == 0 and tpl[1] % k == 0:
            divisible_tuples.append(tpl)
    return divisible_tuples"
Mike's Copy of Benchmark Questions Verification V2.ipynb,77,数値が 11 で割り切れるかどうかを調べる Python 関数を作成します。,"def is_Diff(n): 
    return (n % 11 == 0) ",[],"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']","def is_divisible_by_11(number):
    if number % 11 == 0:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,79,単語の長さが奇数かどうかを確認する Python 関数を作成します。,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",[],"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']","def is_word_length_odd(word):
    if len(word) % 2 == 1:
        return True
    else:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,80,n番目の四面体数を求める関数を作成します。,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",[],"['assert tetrahedral_number(5) == 35', 'assert tetrahedral_number(6) == 56', 'assert tetrahedral_number(7) == 84']","def tetrahedral_number(n):
    return (n * (n + 1) * (n + 2)) // 6"
Mike's Copy of Benchmark Questions Verification V2.ipynb,82,球の体積を求める関数を作成します。,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",['import math'],"['assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)', 'assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)', 'assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)']","def calculate_volume(radius):
    volume = (4/3) * math.pi * radius**3
    return volume"
Mike's Copy of Benchmark Questions Verification V2.ipynb,83,指定された文字列のすべての文字の ASCII 値を 26 で割って加算した文字を見つける Python 関数を作成します。,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",[],"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']","def find_character(string):
    sum = 0
    for char in string:
        sum += ord(char) % 26
    return chr(sum % 26 + 97)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,84,ニューマン コンウェイ数列の n 番目の数値を見つける関数を作成します。,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",[],"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']","def conway_sequence(n):
    if n == 1:
        return [1]
    else:
        sequence = conway_sequence(n-1)
        next_sequence = []
        count = 1
        for i in range(1, len(sequence)):
            if sequence[i] == sequence[i-1]:
                count += 1
            else:
                next_sequence.append(count)
                next_sequence.append(sequence[i-1])
                count = 1
        next_sequence.append(count)
        next_sequence.append(sequence[-1])
        return next_sequence"
Mike's Copy of Benchmark Questions Verification V2.ipynb,85,球の表面積を求める関数を作成します。,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",['import math'],"['assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)']","def calculate_surface_area(radius):
    surface_area = 4 * math.pi * radius**2
    return surface_area"
Mike's Copy of Benchmark Questions Verification V2.ipynb,86,n 番目の中心六角形の数を見つける関数を作成します。,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",[],"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']","def central_hexagonal_number(n):
    if n == 1:
        return 1
    else:
        return 3 * (n - 1) * (n - 2) + 2"
Mike's Copy of Benchmark Questions Verification V2.ipynb,87,3 つの辞書を 1 つの辞書にマージする関数を作成します。,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",[],"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']","def merge_dictionaries(dict1, dict2, dict3):
    merged_dict = {}
    merged_dict.update(dict1)
    merged_dict.update(dict2)
    merged_dict.update(dict3)
    return merged_dict"
Mike's Copy of Benchmark Questions Verification V2.ipynb,88,リスト内のすべての要素の頻度を取得し、辞書として返される関数を作成します。,"import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",[],"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})']","def get_frequency(lst):
    frequency = {}
    for element in lst:
        if element in frequency:
            frequency[element] += 1
        else:
            frequency[element] = 1
    return frequency"
Mike's Copy of Benchmark Questions Verification V2.ipynb,89,n より小さい最も近い数値を見つける関数を作成します。,"def closest_num(N):
  return (N - 1)",[],"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']","def find_nearest_smaller_number(n):
    # Start from n-1 and keep decreasing until we find a number that is smaller than n
    for i in range(n-1, 0, -1):
        if i < n:
            return i
    # If no smaller number is found, return None
    return None"
Mike's Copy of Benchmark Questions Verification V2.ipynb,90,最長の単語の長さを見つけるための Python 関数を作成します。,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",[],"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']","def find_longest_word_length(words):
    longest_word_length = 0
    for word in words:
        if len(word) > longest_word_length:
            longest_word_length = len(word)
    return longest_word_length"
Mike's Copy of Benchmark Questions Verification V2.ipynb,91,指定された文字列値のリストに文字列が部分文字列として存在するかどうかを確認する関数を作成します。,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",[],"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']","def is_substring_present(strings, substring):
    for string in strings:
        if substring in string:
            return True
    return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,92,指定された数値が波状であるかどうかをチェックする関数を作成します。,"def is_undulating(n): 
	n = str(n)
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",[],"['assert is_undulating(1212121) == True', 'assert is_undulating(1991) == False', 'assert is_undulating(121) == True']","def is_wave_number(number):
    # Convert the number to a string
    number_str = str(number)
    
    # Check if the number has alternating digits
    for i in range(len(number_str) - 1):
        if i % 2 == 0:
            if number_str[i] == number_str[i+1]:
                return False
        else:
            if number_str[i] != number_str[i+1]:
                return False
    
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,93,「a」の「b」乗の値を計算する関数を作成します。,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",[],"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']","def calculate_power(a, b):
    return a ** b"
Mike's Copy of Benchmark Questions Verification V2.ipynb,94,タプルのリストが与えられた場合、タプルの最初の値と最小の 2 番目の値を返す関数を作成します。,"from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",[],"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]","def get_first_smallest(tuples):
    smallest = float('inf')
    smallest2 = float('inf')
    first = None
    for tpl in tuples:
        if tpl[0] < smallest:
            smallest2 = smallest
            smallest = tpl[0]
            first = tpl[0]
        elif tpl[0] < smallest2 and tpl[0] != smallest:
            smallest2 = tpl[0]
    return first, smallest2"
Mike's Copy of Benchmark Questions Verification V2.ipynb,95,リストのリスト内の最小のリストの長さを見つける Python 関数を作成します。,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",[],"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']","def find_min_list_length(list_of_lists):
    min_length = float('inf')
    for lst in list_of_lists:
        length = len(lst)
        if length < min_length:
            min_length = length
    return min_length"
Mike's Copy of Benchmark Questions Verification V2.ipynb,96,指定された整数の約数の数を求める Python 関数を作成します。,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",[],"['assert divisor(15) == 4', 'assert divisor(12) == 6', 'assert divisor(9) == 3']","def count_divisors(n):
    count = 0
    for i in range(1, n+1):
        if n % i == 0:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,97,辞書で返される、リストのフラット化されたリスト内の各要素の頻度を見つける関数を作成します。,"def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",[],"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']","def count_element_frequency(flat_list):
    element_frequency = {}
    for element in flat_list:
        if element in element_frequency:
            element_frequency[element] += 1
        else:
            element_frequency[element] = 1
    return element_frequency"
Mike's Copy of Benchmark Questions Verification V2.ipynb,98,リスト内のすべての数値を乗算し、リストの長さで除算する関数を作成します。,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",['import math'],"['assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)', 'assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)', 'assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)']","def multiply_and_divide(numbers):
    result = 1
    for num in numbers:
        result *= num
    return result / len(numbers)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,99,指定された 10 進数を、先行ゼロのない文字列として表される同等の 2 進数に変換する関数を作成します。,"def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",[],"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111'""]","def decimal_to_binary(decimal):
    binary = bin(decimal)[2:]
    return binary"
Mike's Copy of Benchmark Questions Verification V2.ipynb,100,整数として返される、指定された整数の次に小さい回文を見つける関数を作成します。,"import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",[],"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']","def is_palindrome(n):
    # Convert the number to a string
    n_str = str(n)
    
    # Check if the string is equal to its reverse
    return n_str == n_str[::-1]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,101,1 から始まるインデックスを使用して、指定された配列内の k 番目の要素を検索する関数を作成します。,"def kth_element(arr, k):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",[],"['assert kth_element([12,3,5,7,19], 2) == 3', 'assert kth_element([17,24,8,23], 3) == 8', 'assert kth_element([16,21,25,36,4], 4) == 36']","def find_kth_element(array, k):
    return array[k]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,102,スネークケース文字列をキャメルケース文字列に変換する関数を作成します。,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]","def snake_to_camel(snake_case):
    words = snake_case.split('_')
    camel_case = words[0]
    for i in range(1, len(words)):
        camel_case += words[i].capitalize()
    return camel_case"
Mike's Copy of Benchmark Questions Verification V2.ipynb,103,"オイラー数 a(n, m) を求める関数を作成します。","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",[],"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']","def euler_number(n, m):
    if n == 0:
        return 1 if m == 0 else 0
    elif n == 1:
        return 0 if m == 0 else 1
    else:
        return (n-1) * euler_number(n-1, m) + (m+1) * euler_number(n-2, m)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,104,指定されたリストのリスト内の文字列の各サブリストを並べ替える関数を作成します。,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
",[],"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']","def sort_sublists(lst):
    for sublist in lst:
        sublist.sort()
    return lst"
Mike's Copy of Benchmark Questions Verification V2.ipynb,105,指定されたリスト内の真のブール値を数える Python 関数を作成します。,"def count(lst):   
    return sum(lst) ",[],"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']","def count_true_bools(lst):
    count = 0
    for bool in lst:
        if bool == True:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,106,指定されたリストを指定されたタプルに追加する関数を作成します。,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",[],"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']","def add_list_to_tuple(lst, tpl):
    return tpl + (lst,)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,108,3 つのリストを 1 つの並べ替えられたリストにマージする関数を作成します。,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",[],"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']","def merge_sorted_lists(list1, list2, list3):
    merged_list = list1 + list2 + list3
    merged_list.sort()
    return merged_list"
Mike's Copy of Benchmark Questions Verification V2.ipynb,109,バイナリ文字列を指定された回数だけ回転させたときに、奇数の値を持つ数値の数を見つける Python 関数を作成します。,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",[],"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']","def count_numbers_with_odd_value(binary_string, rotations):
    # Convert the binary string to a list of integers
    numbers = [int(char) for char in binary_string]
    
    # Rotate the numbers the specified number of times
    rotated_numbers = numbers[rotations:] + numbers[:rotations]
    
    # Count the numbers with odd values
    count = 0
    for num in rotated_numbers:
        if num % 2 != 0:
            count += 1
    
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,111,指定されたネストされたリスト内の共通要素を検索する関数を作成します。,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",[],"['assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])', 'assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])', 'assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])']","def find_common_elements(nested_list):
    if not nested_list:
        return []
    
    common_elements = nested_list[0]
    for lst in nested_list[1:]:
        common_elements = list(set(common_elements) & set(lst))
    
    return common_elements"
Mike's Copy of Benchmark Questions Verification V2.ipynb,113,文字列が整数を表すかどうかをチェックする関数を作成します。,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",[],"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']","def is_integer(string):
    try:
        int(string)
        return True
    except ValueError:
        return False"
Mike's Copy of Benchmark Questions Verification V2.ipynb,115,リスト内のすべての辞書が空かどうかを確認する関数を作成します。,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",[],"['assert empty_dit([{},{},{}])==True', 'assert empty_dit([{1,2},{},{}])==False', 'assert empty_dit({})==True']","def dictionaries_are_empty(dictionaries):
    for d in dictionaries:
        if d:
            return False
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,116,指定された正の整数のタプルを 1 つの整数に変換する関数を作成します。,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",[],"['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']","def tuple_to_integer(tuple):
    integer = 0
    for digit in tuple:
        integer = integer * 10 + digit
    return integer"
Mike's Copy of Benchmark Questions Verification V2.ipynb,117,リストのリスト内のすべての変換可能な要素を浮動小数点数に変換する関数を作成します。,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return res",[],"['assert list_to_float( [(""3"", ""4""), (""1"", ""26.45""), (""7.32"", ""8""), (""4"", ""8"")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]', 'assert list_to_float( [(""4"", ""4""), (""2"", ""27""), (""4.12"", ""9""), (""7"", ""11"")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]', 'assert list_to_float( [(""6"", ""78""), (""5"", ""26.45""), (""1.33"", ""4""), (""82"", ""13"")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]']","def convert_to_floats(matrix):
    converted_matrix = []
    for row in matrix:
        converted_row = []
        for item in row:
            try:
                converted_row.append(float(item))
            except ValueError:
                converted_row.append(item)
        converted_matrix.append(converted_row)
    return converted_matrix"
Mike's Copy of Benchmark Questions Verification V2.ipynb,118,文字列をスペース文字で分割された文字列のリストに変換する関数を作成します。,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",[],"['assert string_to_list(""python programming"")==[\'python\',\'programming\']', 'assert string_to_list(""lists tuples strings"")==[\'lists\',\'tuples\',\'strings\']', 'assert string_to_list(""write a program"")==[\'write\',\'a\',\'program\']']","def split_string(string):
    return string.split()"
Mike's Copy of Benchmark Questions Verification V2.ipynb,119,ソートされた配列内で 1 回だけ出現する要素を検索する Python 関数を作成します。,"def search(arr):
    n = len(arr)
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",[],"['assert search([1,1,2,2,3]) == 3', 'assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8', 'assert search([1,2,2,3,3,4,4]) == 1']","def find_unique_element(sorted_array):
    n = len(sorted_array)
    if n == 0 or sorted_array[0] != sorted_array[1]:
        return sorted_array[0]
    elif sorted_array[n-1] != sorted_array[n-2]:
        return sorted_array[n-1]
    else:
        for i in range(1, n-1):
            if sorted_array[i] != sorted_array[i-1] and sorted_array[i] != sorted_array[i+1]:
                return sorted_array[i]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,120,指定されたリスト内のタプルのペアの数値間の最大絶対積を見つける関数を作成します。,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",[],"['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']","def max_absolute_product(nums):
    max_product = float('-inf')
    for i in range(len(nums)):
        for j in range(i+1, len(nums)):
            product = abs(nums[i][0] - nums[j][0]) * abs(nums[i][1] - nums[j][1])
            max_product = max(max_product, product)
    return max_product"
Mike's Copy of Benchmark Questions Verification V2.ipynb,123,1 から指定された数値までのすべての友好的な数値を合計する関数を作成します。,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",[],"['assert amicable_numbers_sum(999)==504', 'assert amicable_numbers_sum(9999)==31626', 'assert amicable_numbers_sum(99)==0']","def sum_of_friendly_numbers(n):
    friendly_numbers = []
    for num in range(1, n+1):
        if is_friendly_number(num):
            friendly_numbers.append(num)
    return sum(friendly_numbers)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,124,複素数の角度を取得する関数を作成します。,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",['import math'],"['assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)', 'assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)', 'assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)']","def get_angle(complex_number):
    return cmath.phase(complex_number)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,125,指定されたバイナリ文字列の部分文字列内の 0 の数と 1 の数の最大差を見つける関数を作成します。,"def find_length(string): 
	n = len(string)
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",[],"['assert find_length(""11000010001"") == 6', 'assert find_length(""10111"") == 1', 'assert find_length(""11011101100101"") == 2']","def max_diff(binary_string):
    max_diff = 0
    for i in range(len(binary_string)):
        for j in range(i+1, len(binary_string)+1):
            substring = binary_string[i:j]
            count_0 = substring.count('0')
            count_1 = substring.count('1')
            diff = abs(count_0 - count_1)
            if diff > max_diff:
                max_diff = diff
    return max_diff"
Mike's Copy of Benchmark Questions Verification V2.ipynb,126,与えられた 2 つの数値の公約数の合計を求める Python 関数を作成します。,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",[],"['assert sum(10,15) == 6', 'assert sum(100,150) == 93', 'assert sum(4,6) == 3']","def sum_common_divisors(a, b):
    # Find the divisors of both numbers
    divisors_a = []
    for i in range(1, a+1):
        if a % i == 0:
            divisors_a.append(i)
    
    divisors_b = []
    for i in range(1, b+1):
        if b % i == 0:
            divisors_b.append(i)
    
    # Find the common divisors
    common_divisors = []
    for divisor in divisors_a:
        if divisor in divisors_b:
            common_divisors.append(divisor)
    
    # Calculate the sum of common divisors
    sum_divisors = sum(common_divisors)
    
    return sum_divisors"
Mike's Copy of Benchmark Questions Verification V2.ipynb,127,2 つの整数を乗算する関数を作成します。,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",[],"['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']","def multiply(a, b):
    return a * b"
Mike's Copy of Benchmark Questions Verification V2.ipynb,128,指定された単語のリストから n 文字より長い単語を検索する関数を作成します。,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",[],"['assert long_words(3,""python is a programming language"")==[\'python\',\'programming\',\'language\']', 'assert long_words(2,""writing a program"")==[\'writing\',\'program\']', 'assert long_words(5,""sorting list"")==[\'sorting\']']","def find_long_words(words, n):
    long_words = []
    for word in words:
        if len(word) > n:
            long_words.append(word)
    return long_words"
Mike's Copy of Benchmark Questions Verification V2.ipynb,129,行列が魔方陣であるかどうかを計算する関数を作成します。,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",[],"['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']","def is_magic_square(square):
    # Get the size of the square
    n = len(square)
    
    # Calculate the magic constant
    magic_const = n * (n**2 + 1) // 2
    
    # Check the sum of each row
    for row in square:
        if sum(row) != magic_const:
            return False
    
    # Check the sum of each column
    for i in range(n):
        column_sum = 0
        for j in range(n):
            column_sum += square[j][i]
        if column_sum != magic_const:
            return False
    
    # Check the sum of the main diagonal
    diagonal_sum = 0
    for i in range(n):
        diagonal_sum += square[i][i]
    if diagonal_sum != magic_const:
        return False
    
    # Check the sum of the secondary diagonal
    diagonal_sum = 0
    for i in range(n):
        diagonal_sum += square[i][n-i-1]
    if diagonal_sum != magic_const:
        return False
    
    # If all checks pass, the square is a magic square
    return True"
Mike's Copy of Benchmark Questions Verification V2.ipynb,130,指定されたリスト内で最大頻度の項目を見つける関数を作成します。,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]",[],"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20']","def find_mode(lst):
    count = {}
    for num in lst:
        if num in count:
            count[num] += 1
        else:
            count[num] = 1
    mode = []
    max_count = max(count.values())
    for num, freq in count.items():
        if freq == max_count:
            mode.append(num)
    return mode"
Mike's Copy of Benchmark Questions Verification V2.ipynb,131,指定された文字列の母音のみを反転する Python 関数を作成します (y は母音ではありません)。,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",[],"['assert reverse_vowels(""Python"") == ""Python""', 'assert reverse_vowels(""USA"") == ""ASU""', 'assert reverse_vowels(""ab"") == ""ab""']","def reverse_vowels(string):
    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']
    string = list(string)
    vowels_list = []
    for i in range(len(string)):
        if string[i] in vowels:
            vowels_list.append(string[i])
    vowels_list = vowels_list[::-1]
    vowel_index = 0
    for i in range(len(string)):
        if string[i] in vowels:
            string[i] = vowels_list[vowel_index]
            vowel_index += 1
    return ''.join(string)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,132,タプルを文字列に変換する関数を作成します。,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",[],"['assert tup_string((\'e\', \'x\', \'e\', \'r\', \'c\', \'i\', \'s\', \'e\', \'s\'))==(""exercises"")', 'assert tup_string((\'p\',\'y\',\'t\',\'h\',\'o\',\'n\'))==(""python"")', 'assert tup_string((\'p\',\'r\',\'o\',\'g\',\'r\',\'a\',\'m\'))==(""program"")']","def tuple_to_string(tuple_val):
    return str(tuple_val)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,133,指定された数値リストの負の数値の合計を計算する関数を作成します。,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",[],"['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']","def sum_negative_numbers(numbers):
    sum_negative = 0
    for num in numbers:
        if num < 0:
            sum_negative += num
    return sum_negative"
Mike's Copy of Benchmark Questions Verification V2.ipynb,135,n 番目の 16 進数を求める関数を作成します。,"def hexagonal_num(n): 
	return n*(2*n - 1) ",[],"['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']","def get_hexadecimal(n):
    return hex(n)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,137,整数の配列内のゼロと非ゼロの比率を見つける関数を作成します。,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return n1/(n-n1)",['import math'],"['assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)']","def find_zero_nonzero_ratio(numbers):
    count_zero = 0
    count_nonzero = 0
    for num in numbers:
        if num == 0:
            count_zero += 1
        else:
            count_nonzero += 1
    if count_nonzero == 0:
        return ""Cannot divide by zero.""
    else:
        return count_zero / count_nonzero"
Mike's Copy of Benchmark Questions Verification V2.ipynb,138,指定された数値が 2 の非ゼロ乗の合計として表現できるかどうかを確認する Python 関数を作成します。,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",[],"['assert is_Sum_Of_Powers_Of_Two(10) == True', 'assert is_Sum_Of_Powers_Of_Two(7) == False', 'assert is_Sum_Of_Powers_Of_Two(14) == True']","def is_power_of_two(n):
    if n <= 0:
        return False
    return (n & (n - 1)) == 0"
Mike's Copy of Benchmark Questions Verification V2.ipynb,139,円の円周を求める関数を作成します。,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",['import math'],"['assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)', 'assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)', 'assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)']","def calculate_circumference(radius):
    circumference = 2 * math.pi * radius
    return circumference"
Mike's Copy of Benchmark Questions Verification V2.ipynb,140,リストのリストを単一の数値セットに平坦化する関数を作成します。,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",[],"['assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])', 'assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])', 'assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])']","def flatten(lst):
    flat_lst = []
    for sublist in lst:
        for item in sublist:
            flat_lst.append(item)
    return flat_lst"
Mike's Copy of Benchmark Questions Verification V2.ipynb,141,要素のリストを並べ替える関数を作成します。,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",[],"['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']","def sort_list(lst):
    return sorted(lst)"
Mike's Copy of Benchmark Questions Verification V2.ipynb,142,指定された 3 つのリストの同じ位置にある同じ項目の数を数える関数を作成します。,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",[],"['assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3', 'assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4', 'assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5']","def count_matching_items(list1, list2, list3):
    count = 0
    for item1, item2, item3 in zip(list1, list2, list3):
        if item1 == item2 == item3:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,143,指定されたタプルに存在するリストの数を見つける関数を作成します。,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",[],"['assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2', 'assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3', 'assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1']","def count_lists(tuple):
    count = 0
    for item in tuple:
        if type(item) is list:
            count += 1
    return count"
Mike's Copy of Benchmark Questions Verification V2.ipynb,145,指定された配列内の 2 つの要素間の最大差を見つける Python 関数を作成します。,"def max_Abs_Diff(arr): 
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",[],"['assert max_Abs_Diff((2,1,5,3)) == 4', 'assert max_Abs_Diff((9,3,2,5,1)) == 8', 'assert max_Abs_Diff((3,2,1)) == 2']","def max_difference(arr):
    if len(arr) < 2:
        return None"
Benchmark Questions Verification V2.ipynb,160,ax + by = n を満たす整数 x と y をタプルとして返すか、解が存在しない場合は None を返す関数を作成します。,"def find_solution(a, b, n):
	i = 0
	while i * a <= n:
		if (n - (i * a)) % b == 0: 
			return (i, (n - (i * a)) // b)
		i = i + 1
	return None",[],"['assert find_solution(2, 3, 7) == (2, 1)', 'assert find_solution(4, 2, 7) == None', 'assert find_solution(1, 13, 17) == (4, 1)']","def diophantine(a, b, n):
    g = math.gcd(a, b)
    if n % g != 0:
        return None
    a //= g
    b //= g
    n //= g
    for x in range(n+1):
        if (n - a*x) % b == 0:
            y = (n - a*x) // b
            return (x, y)
    return None"
Benchmark Questions Verification V2.ipynb,161,別のリストに存在する特定のリストからすべての要素を削除する関数を作成します。,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",[],"['assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]']","def remove_elements_from_list(lst, elements_to_remove):
    lst = [elem for elem in lst if elem not in elements_to_remove]
    return lst"
Benchmark Questions Verification V2.ipynb,162,i=0 から n // 2 までの合計 (n - 2*i) を計算する関数を作成します。たとえば、n + (n-2) + (n-4)... (nx =&lt; 0 まで)。,"def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",[],"['assert sum_series(6) == 12', 'assert sum_series(10) == 30', 'assert sum_series(9) == 25']","def sum_of_series(n):
    series_sum = 0
    for i in range(n // 2 + 1):
        series_sum += n - 2 * i
    return series_sum"
Benchmark Questions Verification V2.ipynb,163,正多角形の辺の長さと数を指定して、その面積を計算する関数を作成します。,"from math import tan, pi
def area_polygon(s, l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",['import math'],"['assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)', 'assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)', 'assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)']","def calculate_area(side_length, num_sides):
    apothem = side_length / (2 * math.tan(math.pi / num_sides))
    area = (1 / 2) * apothem * side_length * num_sides
    return area"
Benchmark Questions Verification V2.ipynb,164,2 つの整数の約数の合計が同じかどうかを判断する関数を作成します。,"import math 
def div_sum(n): 
  total = 1
  i = 2

  while i * i <= n:
    if (n % i == 0):
      total = (total + i + math.floor(n / i))
    i += 1

  return total

def are_equivalent(num1, num2): 
    return div_sum(num1) == div_sum(num2); ",[],"['assert are_equivalent(36, 57) == False', 'assert are_equivalent(2, 4) == False', 'assert are_equivalent(23, 47) == True']","def sum_of_divisors(n):
    divisors = []
    for i in range(1, n):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)"
Benchmark Questions Verification V2.ipynb,165,文字列内の英語のアルファベットと同じ位置に出現する文字の数をカウントする関数を作成します (大文字と小文字は区別されません)。,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",[],"['assert count_char_position(""xbcefg"") == 2', 'assert count_char_position(""ABcED"") == 3', 'assert count_char_position(""AbgdeF"") == 5']","def count_characters(string):
    count = 0
    for char in string:
        if char.isalpha() and ord(char.lower()) - ord('a') == count:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,166,偶数に XOR するリスト内の整数のペアの数をカウントする関数を作成します。,"def find_even_pair(A): 
  count = 0
  for i in range(0, len(A)): 
    for j in range(i+1, len(A)): 
        if ((A[i] ^ A[j]) % 2 == 0): 
          count += 1

  return count",[],"['assert find_even_pair([5, 4, 7, 2, 1]) == 4', 'assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9', 'assert find_even_pair([1, 2, 3]) == 1']","def count_pairs(numbers, target):
    count = 0
    for i in range(len(numbers)):
        for j in range(i+1, len(numbers)):
            if (numbers[i] ^ numbers[j]) == target:
                count += 1
    return count"
Benchmark Questions Verification V2.ipynb,167,n 以上の最小の 2 のべき乗を見つける Python 関数を作成します。,"def next_power_of_2(n): 
  if n and not n & (n - 1):
    return n

  count = 0
  while n != 0: 
    n >>= 1
    count += 1

  return 1 << count; ",[],"['assert next_power_of_2(0) == 1', 'assert next_power_of_2(5) == 8', 'assert next_power_of_2(17) == 32']","def smallest_power_of_2(n):
    power = 0
    while True:
        if 2 ** power >= n:
            return 2 ** power
        power += 1"
Benchmark Questions Verification V2.ipynb,168,指定されたリスト内の数値の出現数をカウントする関数を作成します。,"def frequency(a,x): 
    count = 0  
    for i in a: 
      if i == x: 
        count += 1

    return count ",[],"['assert frequency([1,2,3], 4) == 0', 'assert frequency([1,2,2,3,3,3,4], 3) == 3', 'assert frequency([0,1,2,3,1,2], 1) == 2']","def count_occurrences(lst, number):
    count = 0
    for elem in lst:
        if elem == number:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,170,2 つのインデックスで指定された範囲内のリスト内の数値の合計を求める関数を作成します。,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",[],"['assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38']","def sum_range(lst, start_index, end_index):
    return sum(lst[start_index:end_index + 1])"
Benchmark Questions Verification V2.ipynb,171,正五角形の辺の長さから周囲の長さを求める関数を作成します。,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",[],"['assert perimeter_pentagon(5) == 25', 'assert perimeter_pentagon(10) == 50', 'assert perimeter_pentagon(15) == 75']","def perimeter_from_side_length(side_length):
    return 5 * side_length"
Benchmark Questions Verification V2.ipynb,172,指定された文字列内の文字列 &#39;std&#39; の出現数をカウントする関数を作成します。,"def count_occurance(s):
  count = 0
  for i in range(len(s) - 2):
    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):
      count = count + 1
  return count",[],"['assert count_occurance(""letstdlenstdporstd"") == 3', 'assert count_occurance(""truststdsolensporsd"") == 1', 'assert count_occurance(""makestdsostdworthit"") == 2', 'assert count_occurance(""stds"") == 1', 'assert count_occurance("""") == 0']","def count_occurrences(string, substring):
    count = 0
    index = 0
    while index < len(string):
        if string[index:index+len(substring)] == substring:
            count += 1
            index += len(substring)
        else:
            index += 1
    return count"
Benchmark Questions Verification V2.ipynb,222,タプル内のすべての要素が同じデータ型であるかどうかを確認する関数を作成します。,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",[],"['assert check_type((5, 6, 7, 3, 5, 6) ) == True', 'assert check_type((1, 2, ""4"") ) == False', 'assert check_type((3, 2, 1, 4, 5) ) == True']","def are_elements_of_same_type(tuple):
    if len(tuple) == 0:
        return True
    type = type(tuple[0])
    for element in tuple:
        if type(element) is not type:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,223,ソートされた配列、その長さ (n)、および要素を受け取り、その要素が指定されたソートされた配列内の多数の要素であるかどうかを返す関数を作成します。 (多数要素とは、n/2 回以上出現する要素です。),"def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",[],"['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True', 'assert is_majority([1, 1, 2, 2], 5, 1) == False']","def is_majority_element(sorted_arr, n, element):
    # Count the occurrences of the element in the sorted array
    count = 0
    for i in range(n):
        if sorted_arr[i] == element:
            count += 1
        elif sorted_arr[i] > element:
            break  # Stop searching if we have passed the element
    
    # Check if the count is greater than n/2
    if count > n / 2:
        return True
    else:
        return False"
Benchmark Questions Verification V2.ipynb,224,指定された数値内の設定ビット (値 1 の 2 進数) の数をカウントする Python 関数を作成します。,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",[],"['assert count_Set_Bits(2) == 1', 'assert count_Set_Bits(4) == 1', 'assert count_Set_Bits(6) == 2']","def count_set_bits(num):
    count = 0
    while num > 0:
        count += num & 1
        num = num >> 1
    return count"
Benchmark Questions Verification V2.ipynb,226,指定された文字列の奇数のインデックス値を持つ文字を削除する Python 関数を作成します。,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",[],"[""assert odd_values_string('abcdef') == 'ace'"", ""assert odd_values_string('python') == 'pto'"", ""assert odd_values_string('data') == 'dt'"", ""assert odd_values_string('lambs') == 'lms'""]","def remove_characters_with_odd_index(string):
    result = """"
    for i in range(len(string)):
        if i % 2 == 0:
            result += string[i]
    return result"
Benchmark Questions Verification V2.ipynb,227,最小 3 つの数値を見つける関数を作成します。,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",[],"['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']","def find_minimum3(numbers):
    if len(numbers) < 3:
        return ""Need at least 3 numbers.""
    
    minimum3 = sorted(numbers)[:3]
    return minimum3"
Benchmark Questions Verification V2.ipynb,228,指定された範囲内のすべてのビットが設定解除されているかどうかを確認する Python 関数を作成します。,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",[],"['assert all_Bits_Set_In_The_Given_Range(4,1,2) == True', 'assert all_Bits_Set_In_The_Given_Range(17,2,4) == True', 'assert all_Bits_Set_In_The_Given_Range(39,4,6) == False']","def are_bits_cleared(n, start, end):
    # Create a mask with bits set in the specified range
    mask = ((1 << (end - start + 1)) - 1) << start
    
    # Check if any bits are set in the range
    return (n & mask) == 0"
Benchmark Questions Verification V2.ipynb,229,配列と整数 n を受け取り、指定された配列の最初の n 要素を再配置して、すべての負の要素が正の要素の前に表示され、負の要素と正の要素の間の相対的な順序が保持される関数を作成します。,"def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",[],"['assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]', 'assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]', 'assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]']","def rearrange_array(arr, n):
    # Partition the array into negative and non-negative numbers
    partition_index = 0
    for i in range(n):
        if arr[i] < 0:
            arr[i], arr[partition_index] = arr[partition_index], arr[i]
            partition_index += 1
    
    return arr"
Benchmark Questions Verification V2.ipynb,230,文字列と文字を受け取り、文字列内の空白を文字に置き換えて、文字列を返す関数を作成します。,"def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",[],"['assert replace_blank(""hello people"",\'@\')==(""hello@people"")', 'assert replace_blank(""python program language"",\'$\')==(""python$program$language"")', 'assert replace_blank(""blank space"",""-"")==(""blank-space"")']","def replace_spaces(string, character):
    return string.replace("" "", character)"
Benchmark Questions Verification V2.ipynb,232,リストと整数 n を受け取り、リストから最大 n 個の項目を含むリストを返す関数を作成します。,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",[],"['assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])']","def get_largest_n_items(lst, n):
    return sorted(lst, reverse=True)[:n]"
Benchmark Questions Verification V2.ipynb,233,円柱の側表面積を求める関数を作成します。,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",['import math'],"['assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)']","def calculate_cylinder_lateral_area(radius, height):
    lateral_area = 2 * math.pi * radius * height
    return lateral_area"
Benchmark Questions Verification V2.ipynb,234,辺の長さを指定して立方体の体積を求める関数を作成します。,"def volume_cube(l):
  volume = l * l * l
  return volume",[],"['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']","def calculate_volume(length, width, height):
    volume = length * width * height
    return volume"
Benchmark Questions Verification V2.ipynb,235,指定された数値のすべての偶数ビットを設定する Python 関数を作成します。,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",[],"['assert even_bit_set_number(10) == 10', 'assert even_bit_set_number(20) == 30', 'assert even_bit_set_number(30) == 30']","def set_even_bits(n):
    result = 0
    bit_position = 0
    while n > 0:
        if bit_position % 2 == 0:
            result = result | (1 << bit_position)
        bit_position += 1
        n = n >> 1
    return result"
Benchmark Questions Verification V2.ipynb,237,タプルのリストを受け取り、一意の各タプルをリスト内での出現回数にマッピングする辞書を返す関数を作成します。,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",[],"['assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}', 'assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}', 'assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}']","def count_occurrences(tuples):
    occurrences = {}
    for tuple in tuples:
        if tuple in occurrences:
            occurrences[tuple] += 1
        else:
            occurrences[tuple] = 1
    return occurrences"
Benchmark Questions Verification V2.ipynb,238,指定された文字列の空ではない部分文字列の数をカウントする Python 関数を作成します。,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",[],"['assert number_of_substrings(""abc"") == 6', 'assert number_of_substrings(""abcd"") == 10', 'assert number_of_substrings(""abcde"") == 15']","def count_non_empty_substrings(string):
    count = 0
    length = len(string)
    for i in range(length):
        for j in range(i+1, length+1):
            substring = string[i:j]
            if substring != '':
                count += 1
    return count"
Benchmark Questions Verification V2.ipynb,239,正の整数 m と n を受け取り、各要素が正の整数で、前の要素の 2 倍以上で m 以下となる、長さ n の可能なシーケンスの数を見つける関数を作成します。,"def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",[],"['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']","def count_sequences(m, n):
    # Base case: if n is 0, there are no sequences
    if n == 0:
        return 0
    
    # Base case: if n is 1, there is only one sequence [1]
    if n == 1:
        return 1
    
    # Recursive case: count sequences by considering different values for the first element
    count = 0
    for first in range(1, m+1):
        # Check if the remaining sequence is valid
        if first >= 2 * count_sequences(m, n-1):
            count += count_sequences(m, n-1)
    
    return count"
Benchmark Questions Verification V2.ipynb,240,2 つのリストを受け取り、最初のリストの最後の要素を 2 番目のリストの要素で置き換える関数を作成します。,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",[],"['assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]', 'assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]', 'assert replace_list([""red"",""blue"",""green""],[""yellow""])==[""red"",""blue"",""yellow""]']","def replace_last(first_list, second_list):
    if first_list:
        first_list[-1] = second_list"
Benchmark Questions Verification V2.ipynb,242,文字列内の合計文字数をカウントする関数を作成します。,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",[],"['assert count_charac(""python programming"")==18', 'assert count_charac(""language"")==8', 'assert count_charac(""words"")==5']","def count_characters(string):
    count = 0
    for char in string:
        count += 1
    return count"
Benchmark Questions Verification V2.ipynb,244,指定された数値より大きい次の完全な正方形を見つける Python 関数を作成します。,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",[],"['assert next_Perfect_Square(35) == 36', 'assert next_Perfect_Square(6) == 9', 'assert next_Perfect_Square(9) == 16']","def find_next_square(sq):
    # Check if the square root is an integer
    if math.sqrt(sq).is_integer():
        # Find the next square by incrementing the square root by 1 and squaring it
        next_sq = int(math.sqrt(sq)) + 1) ** 2
        return next_sq
    else:
        # If the input is not a square, return None
        return None"
Benchmark Questions Verification V2.ipynb,245,配列を受け取り、指定された配列のビットニック部分列の最大合計を求める関数を作成します。シーケンスが最初に増加し、次に減少する場合、そのシーケンスはビットニックです。,"def max_sum(arr): 
	MSIBS = arr[:] 
	for i in range(len(arr)): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, len(arr) + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",[],"['assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194', 'assert max_sum([80, 60, 30, 40, 20, 10]) == 210', 'assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138']","def max_sum_bitonic_subsequence(arr):
    n = len(arr)
    
    # Calculate the longest increasing subsequence ending at each index
    lis = [1] * n
    for i in range(1, n):
        for j in range(i):
            if arr[i] > arr[j] and lis[i] < lis[j] + 1:
                lis[i] = lis[j] + 1
    
    # Calculate the longest decreasing subsequence starting at each index
    lds = [1] * n
    for i in range(n-2, -1, -1):
        for j in range(n-1, i, -1):
            if arr[i] > arr[j] and lds[i] < lds[j] + 1:
                lds[i] = lds[j] + 1
    
    # Calculate the maximum sum bitonic subsequence
    max_sum = float('-inf')
    for i in range(n):
        max_sum = max(max_sum, lis[i] + lds[i] - 1)
    
    return max_sum"
Benchmark Questions Verification V2.ipynb,246,バビロニアン法を使用して平方根を計算する関数を作成します。,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",['import math'],"['assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)']","def babylonian_sqrt(n, guess):
    if n == 0:
        return 0
    else:
        next_guess = (guess + n/guess) / 2
        if next_guess == guess:
            return next_guess
        else:
            return babylonian_sqrt(n, next_guess)"
Benchmark Questions Verification V2.ipynb,247,指定された文字列内の最長の回文部分列の長さを見つける関数を作成します。,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",[],"['assert lps(""TENS FOR TENS"") == 5', 'assert lps(""CARDIO FOR CARDS"") == 7', 'assert lps(""PART OF THE JOURNEY IS PART"") == 9']","def is_palindrome(s):
    return s == s[::-1]"
Benchmark Questions Verification V2.ipynb,248,整数 n を受け取り、n-1 の高調波和を計算する関数を作成します。,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",['import math'],"['assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)']","def harmonic_sum(n):
    sum = 0
    for i in range(1, n):
        sum += 1/i
    return sum"
Benchmark Questions Verification V2.ipynb,249,2 つの配列の共通部分を見つける関数を作成します。,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",[],"['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']","def find_common_elements(array1, array2):
    common_elements = []
    for element in array1:
        if element in array2:
            common_elements.append(element)
    return common_elements"
Benchmark Questions Verification V2.ipynb,250,タプルと要素を受け取り、タプル内の要素の出現回数をカウントする Python 関数を作成します。,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",[],"['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']","def count_occurrences(tuple, element):
    count = 0
    for item in tuple:
        if item == element:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,251,リストと要素を受け取り、その要素をリスト内の各要素の前に挿入し、結果のリストを返す関数を作成します。,"def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",[],"[""assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"", ""assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']"", ""assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']""]","def insert_element_before_each(lst, element):
    result = []
    for item in lst:
        result.append(element)
        result.append(item)
    return result"
Benchmark Questions Verification V2.ipynb,252,複素数を極座標に変換する Python 関数を作成します。,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",[],"['assert convert(1) == (1.0, 0.0)', 'assert convert(4) == (4.0,0.0)', 'assert convert(5) == (5.0,0.0)']","def complex_to_polar(complex_num):
    # Extract the real and imaginary parts
    real_part = complex_num.real
    imag_part = complex_num.imag
    
    # Calculate the magnitude (absolute value)
    magnitude = abs(complex_num)
    
    # Calculate the phase (argument)
    phase = cmath.phase(complex_num)
    
    # Return the magnitude and phase as a tuple
    return magnitude, phase"
Benchmark Questions Verification V2.ipynb,253,指定されたリスト内の整数要素の数を返す Python 関数を作成します。,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",[],"[""assert count_integer([1,2,'abc',1.2]) == 2"", 'assert count_integer([1,2,3]) == 3', 'assert count_integer([1,1.2,4,5.1]) == 2']","def count_integer_elements(lst):
    count = 0
    for elem in lst:
        if type(elem) == int:
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,255,長さ n のリストを受け取り、リストの要素のすべての組み合わせを (繰り返して) 生成し、各組み合わせのタプルを含むリストを返す関数を作成します。,"from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
",[],"['assert combinations_colors( [""Red"",""Green"",""Blue""],1)==[(\'Red\',), (\'Green\',), (\'Blue\',)]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],2)==[(\'Red\', \'Red\'), (\'Red\', \'Green\'), (\'Red\', \'Blue\'), (\'Green\', \'Green\'), (\'Green\', \'Blue\'), (\'Blue\', \'Blue\')]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],3)==[(\'Red\', \'Red\', \'Red\'), (\'Red\', \'Red\', \'Green\'), (\'Red\', \'Red\', \'Blue\'), (\'Red\', \'Green\', \'Green\'), (\'Red\', \'Green\', \'Blue\'), (\'Red\', \'Blue\', \'Blue\'), (\'Green\', \'Green\', \'Green\'), (\'Green\', \'Green\', \'Blue\'), (\'Green\', \'Blue\', \'Blue\'), (\'Blue\', \'Blue\', \'Blue\')]']","def generate_combinations(lst):
    combinations = []
    n = len(lst)
    for i in range(n):
        for j in range(n):
            combinations.append((lst[i], lst[j]))
    return combinations"
Benchmark Questions Verification V2.ipynb,256,非負の数を受け取り、指定された非負の数より小さい素数の数を返す Python 関数を作成します。,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",[],"['assert count_Primes_nums(5) == 2', 'assert count_Primes_nums(10) == 4', 'assert count_Primes_nums(100) == 25']","def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,257,2 つの数値を受け取り、2 番目の数値、次に最初の数値を含むタプルを返す関数を作成します。,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",[],"['assert swap_numbers(10,20)==(20,10)', 'assert swap_numbers(15,17)==(17,15)', 'assert swap_numbers(100,200)==(200,100)']","def swap_numbers(num1, num2):
    return num2, num1"
Benchmark Questions Verification V2.ipynb,259,指定された 2 つのタプルを最大化する関数を作成します。,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))', 'assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))', 'assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))']","def maximize_tuples(tuple1, tuple2):
    max_tuple = ()
    for i in range(len(tuple1)):
        max_tuple += (max(tuple1[i], tuple2[i]),)
    return max_tuple"
Benchmark Questions Verification V2.ipynb,260,n 番目のニューマン・シャンクス・ウィリアムズ素数を見つける関数を作成します。,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",[],"['assert newman_prime(3) == 7', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']","def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5) + 1):
        if n % i == 0:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,261,2 つのタプルを受け取り、指定されたタプルに対して要素ごとに数学的な除算演算を実行する関数を作成します。,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)', 'assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)', 'assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)']","def divide_tuples(tuple1, tuple2):
    divided_tuple = ()
    for i in range(len(tuple1)):
        divided_tuple += (tuple1[i] / tuple2[i],)
    return divided_tuple"
Benchmark Questions Verification V2.ipynb,262,リストと整数 L を受け取り、指定されたリストをリストの最初の部分の長さが L となる 2 つの部分に分割し、結果のリストをタプルで返す関数を作成します。,"def split_two_parts(list1, L):
    return list1[:L], list1[L:]",[],"['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', ""assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])"", ""assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])""]","def split_list(lst, L):
    first_part = lst[:L]
    second_part = lst[L:]
    return (first_part, second_part)"
Benchmark Questions Verification V2.ipynb,264,犬の年齢を犬の年齢で計算する関数を作成します。,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",[],"['assert dog_age(12)==61', 'assert dog_age(15)==73', 'assert dog_age(24)==109']","def calculate_dog_age(human_age):
    if human_age <= 2:
        dog_age = human_age * 10
    else:
        dog_age = 20 + (human_age - 2) * 4
    return dog_age"
Benchmark Questions Verification V2.ipynb,265,リストと整数 n を受け取り、リストを n 番目の要素ごとに分割し、結果のリストのリストを返す関数を作成します。,"def list_split(S, step):
    return [S[i::step] for i in range(step)]",[],"[""assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]', ""assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]""]","def split_list_by_n(lst, n):
    split_lst = []
    for i in range(0, len(lst), n):
        split_lst.append(lst[i:i+n])
    return split_lst"
Benchmark Questions Verification V2.ipynb,266,立方体の辺の長さを指定して、その側表面積を求める関数を作成します。,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",[],"['assert lateralsurface_cube(5)==100', 'assert lateralsurface_cube(9)==324', 'assert lateralsurface_cube(10)==400']","def surface_area_of_cube(edge_length):
    surface_area = 6 * edge_length ** 2
    return surface_area"
Benchmark Questions Verification V2.ipynb,267,整数 n を受け取り、最初の n 個の奇数自然数の二乗和を返す Python 関数を作成します。,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",[],"['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']","def sum_of_squared_odd_numbers(n):
    sum = 0
    count = 0
    i = 1 while count < n:
        if i % 2 == 1:
            sum += i**2
            count += 1
        i += 1
    return sum"
Benchmark Questions Verification V2.ipynb,268,n 番目の星の番号を見つける関数を作成します。,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",[],"['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']","def find_star_number(n):
    star_numbers = [2, 5, 9, 17, 23]  # Example list of star numbers
    if n < 1 or n > len(star_numbers):
        return None
    return star_numbers[n - 1]"
Benchmark Questions Verification V2.ipynb,269,文字の ASCII 値を見つける関数を作成します。,"def ascii_value(k):
  ch=k
  return ord(ch)",[],"[""assert ascii_value('A')==65"", ""assert ascii_value('R')==82"", ""assert ascii_value('S')==83""]","def find_ascii_value(character):
    return ord(character)"
Benchmark Questions Verification V2.ipynb,270,リストの偶数位置にある偶数の合計を求める Python 関数を作成します。,"def sum_even_and_even_index(arr):  
    i = 0
    sum = 0
    for i in range(0, len(arr),2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",[],"['assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30', 'assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26', 'assert sum_even_and_even_index([5, 6, 12, 1]) == 12']","def sum_even_numbers_at_even_index(numbers):
    sum = 0
    for i in range(0, len(numbers), 2):
        if numbers[i] % 2 == 0:
            sum += numbers[i]
    return sum"
Benchmark Questions Verification V2.ipynb,271,整数 n を受け取り、最初の n 個の偶数自然数の 5 乗の合計を求める Python 関数を作成します。,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",[],"['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']","def sum_of_even_powers(n):
    sum = 0
    count = 0
    power = 5
    while count < n:
        even_power = (2 * count) ** power
        sum += even_power
        count += 1
    return sum"
Benchmark Questions Verification V2.ipynb,272,タプルのリストを受け取り、各タプルの後部要素を含むリストを返す関数を作成します。,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",[],"[""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"", ""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"", ""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]""]","def get_last_elements(tuples):
    last_elements = []
    for tpl in tuples:
        last_elements.append(tpl[-1])
    return last_elements"
Benchmark Questions Verification V2.ipynb,273,2 つのタプルを受け取り、最初のタプルの要素から同じインデックスを持つ 2 番目のタプルの要素を減算する関数を作成します。,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",[],"['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']","def subtract_tuples(tuple1, tuple2):
    subtracted_tuple = ()
    for i in range(len(tuple1)):
        subtracted_tuple += (tuple1[i] - tuple2[i],)
    return subtracted_tuple"
Benchmark Questions Verification V2.ipynb,274,正の整数 n を受け取り、偶数のインデックス二項係数の合計を求める Python 関数を作成します。,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",[],"['assert even_binomial_Coeff_Sum(4) == 8', 'assert even_binomial_Coeff_Sum(6) == 32', 'assert even_binomial_Coeff_Sum(2) == 2']","def sum_even_indexed_binomials(n):
    sum_even = 0
    for k in range(n + 1):
        if k % 2 == 0:
            binomial_coefficient = math.comb(n, k)
            sum_even += binomial_coefficient
    return sum_even"
Benchmark Questions Verification V2.ipynb,276,円柱の半径と高さを受け取り、その体積を返す関数を作成します。,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",['import math'],"['assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)']","def calculate_cylinder_volume(radius, height):
    volume = math.pi * radius**2 * height
    return volume"
Benchmark Questions Verification V2.ipynb,277,辞書と整数 n を受け取り、値が n 以上のエントリのみを含むように辞書をフィルタリングする関数を作成します。,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",[],"[""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}""]","def filter_dictionary(dictionary, n):
    filtered_dictionary = {}
    for key, value in dictionary.items():
        if value >= n:
            filtered_dictionary[key] = value
    return filtered_dictionary"
Benchmark Questions Verification V2.ipynb,278,指定されたタプル内のタプル要素の前に出現する要素の数を見つける関数を作成します。,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",[],"['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']","def count_occurrences(tup, element1, element2):
    count = 0
    for sub_tup in tup:
        if sub_tup.index(element1) < sub_tup.index(element2):
            count += 1
    return count"
Benchmark Questions Verification V2.ipynb,279,n番目の10角数を見つける関数を作成します。,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",[],"['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']","def nth_10gonal_number(n):
    return n * (9 * n - 7)"
Benchmark Questions Verification V2.ipynb,280,配列と要素を受け取り、要素が配列内にあるかどうかを示すブール値と要素のインデックス位置 (要素が見つからない場合は -1) を含むタプルを返す関数を作成します。,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",[],"['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']","def find_element(arr, element):
    if element in arr:
        return True, arr.index(element)
    else:
        return False, -1"
Benchmark Questions Verification V2.ipynb,281,指定されたリストの要素が一意であるかどうかを確認する Python 関数を作成します。,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",[],"['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']","def is_unique(lst):
    return len(lst) == len(set(lst))"
Benchmark Questions Verification V2.ipynb,282,2 つのリストを要素ごとに減算する関数を作成します。,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",[],"['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']","def subtract_lists(list1, list2):
    subtracted = []
    for num1, num2 in zip(list1, list2):
        subtracted.append(num1 - num2)
    return subtracted"
Benchmark Questions Verification V2.ipynb,283,整数を受け取る Python 関数を作成し、整数内の各桁の頻度がその桁自体以下であるかどうかを確認します。,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",[],"['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']","def is_frequency_followed(num):
    # Convert the number to a string
    num_str = str(num)
    
    # Iterate through each digit in the number
    for i in range(len(num_str)):
        # Get the frequency of the current digit
        frequency = num_str.count(num_str[i])
        
        # Check if the frequency is greater than the current digit
        if frequency > int(num_str[i]):
            return False
    
    # If all frequencies are valid, return True
    return True"
Benchmark Questions Verification V2.ipynb,284,リストと要素を受け取り、リスト内のすべての項目が指定された要素と等しいかどうかを確認する関数を作成します。,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",[],"['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']","def all_elements_equal(lst, element):
    for item in lst:
        if item != element:
            return False
    return True"
Benchmark Questions Verification V2.ipynb,285,文字列に「a」文字とそれに続く 2 つまたは 3 つの「b」文字が含まれているかどうかを確認する関数を作成します。,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_two_three(""ac"")==(False)', 'assert text_match_two_three(""dc"")==(False)', 'assert text_match_two_three(""abbbba"")==(True)']","def contains_a2b3b(string):
    pattern = r'a(b{2}b{3})'
    match = re.search(pattern, string)
    return match is not None"
Benchmark Questions Verification V2.ipynb,286,指定された配列を k 回繰り返すことによって形成される、変更された配列内の連続する配列の最大合計を見つける関数を作成します。,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",[],"['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']","def max_sum_after_rotation(arr, k):
    n = len(arr)
    total_sum = sum(arr)
    current_sum = sum(i * arr[i] for i in range(n))
    max_sum = current_sum
    
    for i in range(1, n):
        current_sum += total_sum - n * arr[n - i]
        max_sum = max(max_sum, current_sum)
    
    return max_sum"
Benchmark Questions Verification V2.ipynb,287,整数 n を受け取り、最初の n 個の偶数自然数の二乗和を返す Python 関数を作成します。,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",[],"['assert square_Sum(2) == 20', 'assert square_Sum(3) == 56', 'assert square_Sum(4) == 120']","def sum_of_squared_even_numbers(n):
    sum = 0
    count = 0
    i = 2
    while count < n:
        if i % 2 == 0:
            sum += i**2
            count += 1
        i += 1
    return sum"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,290,リストのリストから最大長のリストを見つける関数を作成します。,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",[],"['assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])', 'assert max_length([[5], [15,20,25]])==(3, [15,20,25])']","def find_longest_list(list_of_lists):
    longest_list = None
    max_length = float('-inf')
    for lst in list_of_lists:
        if len(lst) > max_length:
            longest_list = lst
            max_length = len(lst)
    return longest_list"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,291,n 個の柱と k 色の指定されたフェンスについて、最大 2 つの隣接する柱が同じ色になるようにフェンスをペイントする方法の数を調べる関数を作成します。,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",[],"['assert count_no_of_ways(2, 4) == 16', 'assert count_no_of_ways(3, 2) == 6', 'assert count_no_of_ways(4, 4) == 228']","def count_painted_fences(n, k):
    if n == 1:
        return k
    if n == 2:
        return k * k
        
    same_color = k  # Number of ways to paint the first two fences the same color
    diff_color = k * (k - 1)  # Number of ways to paint the first two fences different colors
    
    for i in range(3, n + 1):
        same_color, diff_color = diff_color, (same_color + diff_color) * (k - 1)
    
    return same_color + diff_color"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,292,2 つの数値の商 (最も近い整数に切り捨てられる) を求める Python 関数を作成します。,"def find(n,m):  
    q = n//m 
    return (q)",[],"['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']","def floor_division(a, b):
    return a // b"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,293,直角三角形の 3 番目の辺を求める関数を作成します。,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",[],"['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']","def calculate_third_side(a, b):
    third_side = math.sqrt(a**2 + b**2)
    return third_side"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,294,指定された異種リストの最大値を見つける関数を作成します。,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",[],"[""assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"", ""assert max_val(['Python', 15, 20, 25])==25"", ""assert max_val(['Python', 30, 20, 40, 50, 'version'])==50""]","def find_maximum_value(heterogeneous_list):
    maximum_value = float('-inf')
    for value in heterogeneous_list:
        if value > maximum_value:
            maximum_value = value
    return maximum_value"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,295,数値のすべての約数の合計を返す関数を作成します。,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",[],"['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']","def sum_of_divisors(n):
    divisors = []
    for i in range(1, n+1):
        if n % i == 0:
            divisors.append(i)
    return sum(divisors)"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,296,配列内の反転をカウントする Python 関数を作成します。,"def get_Inv_Count(arr): 
    inv_count = 0
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",[],"['assert get_Inv_Count([1,20,6,4,5]) == 5', 'assert get_Inv_Count([1,2,1]) == 1', 'assert get_Inv_Count([1,2,5,6,1]) == 3']","def count_reversals(array):
    count = 0
    stack = []
    for num in array:
        if stack and num == stack[-1]:
            stack.pop()
            count += 1
        else:
            stack.append(num)
    if len(stack) % 2 == 1:
        return -1
    count += len(stack) // 2
    return count"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,297,指定されたネストされたリスト構造を平坦化する関数を作成します。,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",[],"['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']","def flatten_list(nested_list):
    flattened_list = []
    for inner_list in nested_list:
        if isinstance(inner_list, list):
            flattened_list.extend(flatten_list(inner_list))
        else:
            flattened_list.append(inner_list)
    return flattened_list"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,299,タプルのリストから最大の集計を計算する関数を作成します。,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",[],"[""assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"", ""assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)"", ""assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)""]","def calculate_largest_aggregate(data):
    largest_aggregate = float('-inf')
    for aggregate in data:
        largest_aggregate = max(largest_aggregate, aggregate)
    return largest_aggregate"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,300,最初の n ビットの合計が最後の n ビットの合計と同じになるように、長さ 2n のすべてのバイナリ シーケンスのカウントを見つける関数を作成します。,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",['import math'],"['assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)']","def count_sequences(n):
    count = 0
    for num in range(2**(2*n)):
        sequence = format(num, '0' + str(2*n) + 'b')
        first_n_bits = sequence[:n]
        last_n_bits = sequence[n:]
        if sum(map(int, first_n_bits)) == sum(map(int, last_n_bits)):
            count += 1
    return count"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,301,辞書の深さを調べる関数を作成します。,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",[],"[""assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"", ""assert dict_depth({'a':1, 'b': {'c':'python'}})==2"", ""assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3""]","def get_dictionary_depth(dictionary):
    if not isinstance(dictionary, dict):
        return 0
    depth = 1
    for key, value in dictionary.items():
        if isinstance(value, dict):
            value_depth = get_dictionary_depth(value) + 1
            depth = max(depth, value_depth)
    return depth"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,304,回転数後に指定されたインデックスで要素を検索する Python 関数を作成します。,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",[],"['assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3', 'assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3', 'assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1']","def find_element_after_rotations(arr, rotations, index):
    # Rotate the array
    rotated_arr = arr[rotations:] + arr[:rotations]
    
    # Find the element at the specified index
    return rotated_arr[index]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,305,文字「p」で始まる単語のリストから 2 つの単語を返す関数を作成します。,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",[],"['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']","def get_two_words(words):
    result = []
    count = 0
    for word in words:
        if word.startswith('p'):
            result.append(word)
            count += 1
            if count == 2:
                break
    return result"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,306,接頭辞から i 番目のインデックスまで増加する部分列の最大合計を見つける関数を作成します。また、 i の後の指定された k 番目の要素も含みます (つまり、 k &gt; i )。,"def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",[],"['assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11', 'assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7', 'assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71']","def max_sum_subsequence(arr, i, k):
    # Calculate the prefix sum of the array
    prefix_sum = [0] * (len(arr) + 1)
    for j in range(1, len(arr) + 1):
        prefix_sum[j] = prefix_sum[j-1] + arr[j-1]
    
    # Initialize the maximum sum to negative infinity
    max_sum = float('-inf')
    
    # Iterate over all possible subsequence lengths
    for length in range(i+1, k+1):
        # Iterate over all possible starting indices
        for start in range(len(arr) - length + 1):
            # Calculate the sum of the current subsequence
            sum = prefix_sum[start+length] - prefix_sum[start]
            
            # Update the maximum sum if necessary
            max_sum = max(max_sum, sum)
    
    # Return the maximum sum
    return max_sum"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,307,タプルのコロンを取得する関数を作成します。,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",[],"['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True)', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']","def get_tuple_colon(tuple_representation):
    # Split the tuple representation at the colon
    parts = tuple_representation.split(':')
    
    # Return the part before the colon
    return parts[0]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,308,各リストから 1 つの因子を選択して、指定された 2 つのリストから指定された数の最大の積を見つける関数を作成します。,"def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",[],"['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']","def max_product(nums1, nums2, k):
    # Get all possible products
    products = [a * b for a in nums1 for b in nums2]
    
    # Sort the products in descending order
    products.sort(reverse=True)
    
    # Return the maximum k products
    return products[:k]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,309,最大 2 つの数値を見つける Python 関数を作成します。,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",[],"['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']","def find_maximum(a, b):
    if a > b:
        return a
    else:
        return b"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,310,指定された文字列を文字のタプルに変換する関数を作成します。,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",[],"['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']","def string_to_tuple(string):
    return tuple(string)"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,311,左端の未設定ビットを設定する Python 関数を作成します。,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",[],"['assert set_left_most_unset_bit(10) == 14', 'assert set_left_most_unset_bit(12) == 14', 'assert set_left_most_unset_bit(15) == 15']","def set_leftmost_unset_bit(n):
    m = 1
    while m & n:
        m = m << 1
    return n | m"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,312,円錐の体積を求める関数を作成します。,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",['import math'],"['assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)', 'assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)', 'assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)']","def calculate_cone_volume(radius, height):
    volume = (1 / 3) * math.pi * radius**2 * height
    return volume"
Benchmark Questions Verification V2.ipynb,388,n 以下の最大の 2 のべき乗を見つける Python 関数を作成します。,"def highest_Power_of_2(n): 
    res = 0 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i 
            break 
    return res ",[],"['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']","def largest_power_of_two(n):
    power = 0
    while pow(2, power) <= n:
        power += 1
    return pow(2, power-1)"
Benchmark Questions Verification V2.ipynb,389,n 番目のルーカス番号を見つける関数を作成します。,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",[],"['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']","def lucas_number(n):
    if n == 0:
        return 2
    elif n == 1:
        return 1
    else:
        return lucas_number(n-1) + lucas_number(n-2)"
Benchmark Questions Verification V2.ipynb,390,指定された書式文字列をリスト内のすべての要素に適用する関数を作成します。,"def add_string(list_, string):
 add_string=[string.format(i) for i in  list_]
 return add_string",[],"[""assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"", ""assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']"", ""assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']""]","def format_all_elements(lst, format_string):
    formatted_lst = []
    for element in lst:
        formatted_lst.append(format_string.format(element))
    return formatted_lst"
Benchmark Questions Verification V2.ipynb,391,複数のリストをネストされた辞書に変換する関数を作成します。,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",[],"['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]', 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]', 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']","def lists_to_nested_dict(lists):
    nested_dict = {}
    for i in range(len(lists)):
        current_dict = nested_dict
        for j in range(len(lists[i])):
            if lists[i][j] not in current_dict:
                current_dict[lists[i][j]] = {}
            current_dict = current_dict[lists[i][j]]
    return nested_dict"
Benchmark Questions Verification V2.ipynb,392,指定された方程式 f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)) を使用して、可能な最大合計を見つける関数を作成します。 、n）。,"def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",[],"['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']","def max_sum(n):
    # Base case
    if n == 0:
        return 0
    
    # Recursive case
    return max(n, max_sum(n//2) + max_sum(n//3) + max_sum(n//4) + max_sum(n//5))"
charlessutton@: Benchmark Questions Verification V2.ipynb,393,最大長のリストを見つける関数を作成します。,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",[],"['assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])', 'assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])']","def find_largest_list(lists):
    largest_list = []
    for lst in lists:
        if len(lst) > len(largest_list):
            largest_list = lst
    return largest_list"
Benchmark Questions Verification V2.ipynb,394,指定されたタプルに重複が含まれていないことを確認する関数を作成します。,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return res ",[],"['assert check_distinct((1, 4, 5, 6, 1, 4)) == False', 'assert check_distinct((1, 4, 5, 6)) == True', 'assert check_distinct((2, 3, 4, 5, 6)) == True']","def is_tuple_distinct(tuple):
    return len(tuple) == len(set(tuple))"
Benchmark Questions Verification V2.ipynb,395,指定された文字列内の最初の非反復文字を検索する Python 関数を作成します。,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",[],"['assert first_non_repeating_character(""abcabc"") == None', 'assert first_non_repeating_character(""abc"") == ""a""', 'assert first_non_repeating_character(""ababc"") == ""c""']","def find_first_non_repeating_char(string):
    char_count = {}
    
    # Count the occurrences of each character in the string
    for char in string:
        if char in char_count:
            char_count[char] += 1
        else:
            char_count[char] = 1
    
    # Find the first character with count 1
    for char in string:
        if char_count[char] == 1:
            return char
    
    # If no non-repeating character is found, return None
    return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,396,指定された文字列が同じ文字で始まり同じ文字で終わるかどうかを確認する関数を作成します。,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",[],"['assert check_char(""abba"") == ""Valid""', 'assert check_char(""a"") == ""Valid""', 'assert check_char(""abcd"") == ""Invalid""']","def starts_ends_with_same_char(string):
    if len(string) == 0:
        return False
    return string[0] == string[-1]"
Benchmark Questions Verification V2.ipynb,397,3 つの数値の中央値を求める関数を作成します。,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",[],"['assert median_numbers(25,55,65)==55.0', 'assert median_numbers(20,10,30)==20.0', 'assert median_numbers(15,45,75)==45.0']","def find_median(num1, num2, num3):
    sorted_nums = sorted([num1, num2, num3])
    return sorted_nums[1]"
Benchmark Questions Verification V2.ipynb,398,指定されたリストの各数値の桁の合計を計算する関数を作成します。,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",[],"['assert sum_of_digits([10,2,56])==14', ""assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19"", 'assert sum_of_digits([10,20,-4,5,-70])==19']","def sum_of_digit_gradients(numbers):
    gradients = []
    for num in numbers:
        gradient = sum(int(digit) for digit in str(num))
        gradients.append(gradient)
    return gradients"
Benchmark Questions Verification V2.ipynb,399,指定されたタプルに対して数学的なビットごとの XOR 演算を実行する関数を作成します。,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)', 'assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)', 'assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)']","def bitwise_xor(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        result += (tuple1[i] ^ tuple2[i],)
    return result"
Benchmark Questions Verification V2.ipynb,400,指定されたリスト内の一意のタプルの数を抽出する関数を作成します。,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",[],"['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']","def count_unique_tuples(lst):
    unique_tuples = set(lst)
    return len(unique_tuples)"
Benchmark Questions Verification V2.ipynb,401,指定された 2 つのネストされたタプル内のタプル要素のインデックスごとの加算を実行する関数を作成します。,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']","def sum_nested_tuples(tuple1, tuple2):
    summed_tuple = ()
    for i in range(len(tuple1)):
        summed_tuple += (tuple1[i] + tuple2[i],)
    return summed_tuple"
Benchmark Questions Verification V2.ipynb,404,2 つの数値の最小値を見つける Python 関数を作成します。,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",[],"['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']","def find_minimum(a, b):
    if a < b:
        return a
    else:
        return b"
Benchmark Questions Verification V2.ipynb,405,タプル内に要素が存在するかどうかを確認する関数を作成します。,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",[],"['assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'r\')==True', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'5\')==False', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"",""e""),3)==True']","def check_element_in_tuple(element, tuple):
    return element in tuple"
Benchmark Questions Verification V2.ipynb,406,指定された数値のパリティが奇数かどうかを確認する Python 関数を作成します。,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False",[],"['assert find_Parity(12) == False', 'assert find_Parity(7) == True', 'assert find_Parity(10) == False']","def is_odd(n):
    if n % 2 == 1:
        return True
    else:
        return False"
Benchmark Questions Verification V2.ipynb,407,指定された数値の桁を並べ替えて、次に大きな数値を作成する関数を作成します。,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",[],"['assert rearrange_bigger(12)==21', 'assert rearrange_bigger(10)==False', 'assert rearrange_bigger(102)==120']","def next_largest_number(number):
    # Convert the number to a list of digits
    digits = list(str(number))
    
    # Find the first digit that is smaller than the digit next to it
    pivot_index = -1
    for i in range(len(digits) - 2, -1, -1):
        if digits[i] < digits[i+1]:
            pivot_index = i
            break
    
    # If no such digit is found, the number is already the largest possible
    if pivot_index == -1:
        return -1"
Benchmark Questions Verification V2.ipynb,408,最初の配列の 1 つの要素と 2 番目の配列の 1 つの要素で構成される最小のペアを k 個見つける関数を作成します。,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",[],"['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']","def find_min_pairs(array1, array2, k):
    # Combine all pairs of elements from array1 and array2
    pairs = [(x, y) for x in array1 for y in array2]
    
    # Sort the pairs by their sum in ascending order
    sorted_pairs = sorted(pairs, key=lambda pair: pair[0] + pair[1])
    
    # Return the first k pairs
    return sorted_pairs[:k]"
Benchmark Questions Verification V2.ipynb,409,指定されたリスト内のタプルのペアから最小の積を見つける関数を作成します。,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",[],"['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']","def min_product_pair(lst):
    if len(lst) < 2:
        return None"
Benchmark Questions Verification V2.ipynb,410,指定された異種リストの最小値を見つける関数を作成します。,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",[],"[""assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"", ""assert min_val(['Python', 15, 20, 25])==15"", ""assert min_val(['Python', 30, 20, 40, 50, 'version'])==20""]","def find_minimum_value(heterogeneous_list):
    minimum_value = float('inf')
    for element in heterogeneous_list:
        if element < minimum_value:
            minimum_value = element
    return minimum_value"
charlessutton@: Benchmark Questions Verification V2.ipynb,411,指定されたスネークケース文字列をキャメルケース文字列に変換する関数を作成します。,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('android_tv') == 'AndroidTv'"", ""assert snake_to_camel('google_pixel') == 'GooglePixel'"", ""assert snake_to_camel('apple_watch') == 'AppleWatch'""]","def snake_to_camel(snake_case):
    # Split the snake case string into words
    words = snake_case.split('_')
    
    # Capitalize the first letter of each word (except the first word)
    camel_case_words = [words[0]] + [word.capitalize() for word in words[1:]]
    
    # Join the words back together
    camel_case = ''.join(camel_case_words)
    
    return camel_case"
charlessutton@: Benchmark Questions Verification V2.ipynb,412,指定されたリストから奇数を削除する Python 関数を作成します。,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",[],"['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']","def remove_odd_numbers(numbers):
    removed_numbers = []
    for num in numbers:
        if num % 2 == 0:
            removed_numbers.append(num)
    return removed_numbers"
charlessutton@: Benchmark Questions Verification V2.ipynb,413,指定されたタプルのリストから n 番目の要素を抽出する関数を作成します。,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",[],"[""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]""]","def extract_nth_element(tuples_list, n):
    extracted_elements = []
    for tpl in tuples_list:
        if n < len(tpl):
            extracted_elements.append(tpl[n])
    return extracted_elements"
charlessutton@: Benchmark Questions Verification V2.ipynb,414,シーケンス内の値がシーケンス内に存在するかどうかを確認する Python 関数を作成します。,"def overlapping(list1,list2):  
    for i in range(len(list1)): 
        for j in range(len(list2)): 
            if(list1[i]==list2[j]): 
                return True
    return False",[],"['assert overlapping([1,2,3,4,5],[6,7,8,9]) == False', 'assert overlapping([1,2,3],[4,5,6]) == False', 'assert overlapping([1,4,5],[1,4,5]) == True']","def value_exists(sequence, value):
    return value in sequence"
charlessutton@: Benchmark Questions Verification V2.ipynb,415,与えられた整数の配列から最大の積を持つペアを見つける Python 関数を作成します。,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",[],"['assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)', 'assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)', 'assert max_Product([1,2,3]) == (2,3)']","def max_product_pair(nums):
    if len(nums) < 2:
        return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,417,指定されたタプルのリスト内の共通の最初の要素を見つける関数を作成します。,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",[],"[""assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"", ""assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]"", ""assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]""]","def find_common_first_element(tuples):
    if not tuples:
        return None"
charlessutton@: Benchmark Questions Verification V2.ipynb,418,最大長を持つリストの要素を見つけるための Python 関数を作成します。,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",[],"[""assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']","def find_longest_list(lists):
    longest = []
    for lst in lists:
        if len(lst) > len(longest):
            longest = lst
    return longest"
charlessutton@: Benchmark Questions Verification V2.ipynb,419,指定された数値リストのすべての数値を四捨五入し、リストの長さを乗算した合計を出力する関数を作成します。,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",[],"['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']","def sum_rounded_numbers(numbers):
    rounded_numbers = [round(num) for num in numbers]
    sum_rounded = sum(rounded_numbers) * len(numbers)
    return sum_rounded"
charlessutton@: Benchmark Questions Verification V2.ipynb,420,最初の n 個の偶数自然数の 3 乗和を求める Python 関数を作成します。,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",[],"['assert cube_Sum(2) == 72', 'assert cube_Sum(3) == 288', 'assert cube_Sum(4) == 800']","def sum_of_cubes_of_even_numbers(n):
    sum = 0
    count = 0
    num = 2
    while count < n:
        sum += num ** 3
        num += 2
        count += 1
    return sum"
charlessutton@: Benchmark Questions Verification V2.ipynb,421,タプルの各要素を区切り文字で連結する関数を書きます。,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",[],"['assert concatenate_tuple((""ID"", ""is"", 4, ""UTS"") ) == \'ID-is-4-UTS\'', 'assert concatenate_tuple((""QWE"", ""is"", 4, ""RTY"") ) == \'QWE-is-4-RTY\'', 'assert concatenate_tuple((""ZEN"", ""is"", 4, ""OP"") ) == \'ZEN-is-4-OP\'']","def join_tuple(tuple, delimiter):
    return delimiter.join(tuple)"
charlessutton@: Benchmark Questions Verification V2.ipynb,422,最初の n 個の自然数の 3 乗の平均を求める Python 関数を作成します。,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",[],"['assert find_Average_Of_Cube(2) == 4.5', 'assert find_Average_Of_Cube(3) == 12', 'assert find_Average_Of_Cube(1) == 1']","def average_cube(n):
    sum_cube = 0
    for i in range(1, n+1):
        sum_cube += i**3
    return sum_cube / n"
charlessutton@: Benchmark Questions Verification V2.ipynb,424,指定されたタプル内の各文字列の後部インデックス要素のみを抽出する関数を作成します。,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",[],"[""assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"", ""assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']"", ""assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']""]","def get_last_indices(strings):
    last_indices = []
    for tup in strings:
        if len(tup) > 0:
            last_indices.append(tup[-1])
    return last_indices"
charlessutton@: Benchmark Questions Verification V2.ipynb,425,特定の要素を含むサブリストの数をカウントする関数を作成します。,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",[],"['assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3', ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3"", ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1""]","def count_sublists(lst, element):
    count = 0
    for sublist in lst:
        if element in sublist:
            count += 1
    return count"
charlessutton@: Benchmark Questions Verification V2.ipynb,426,奇数をフィルタリングする関数を作成します。,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",[],"['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']","def filter_odd_numbers(numbers):
    filtered_numbers = []
    for num in numbers:
        if num % 2 != 0:
            filtered_numbers.append(num)
    return filtered_numbers"
charlessutton@: Benchmark Questions Verification V2.ipynb,427,yyyy-mm-dd 形式の日付を dd-mm-yyyy 形式に変換する関数を作成します。,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",[],"['assert change_date_format(""2026-01-02"") == \'02-01-2026\'', 'assert change_date_format(""2020-11-13"") == \'13-11-2020\'', 'assert change_date_format(""2021-04-26"") == \'26-04-2021\'']","def convert_dateformat(date):
    parts = date.split('-')
    return parts[2] + '-' + parts[1] + '-' + parts[0]"
charlessutton@: Benchmark Questions Verification V2.ipynb,428,シェル ソートを使用して、指定された配列をソートする関数を作成します。,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",[],"['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']","def shell_sort(array):
    n = len(array)
    gap = n // 2
    while gap > 0:
        for i in range(gap, n):
            temp = array[i]
            j = i
            while j >= gap and array[j - gap] > temp:
                array[j] = array[j - gap]
                j -= gap
            array[j] = temp
        gap //= 2
    return array"
charlessutton@: Benchmark Questions Verification V2.ipynb,429,指定された 2 つのタプルから要素ごとにタプルを抽出する関数を作成します。,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']","def extract_tuples(tuple1, tuple2):
    extracted_tuples = ()
    for i in range(len(tuple1)):
        extracted_tuples += ((tuple1[i], tuple2[i]),)
    return extracted_tuples"
charlessutton@: Benchmark Questions Verification V2.ipynb,430,放物線の準線を見つける関数を作成します。,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",[],"['assert parabola_directrix(5,3,2)==-198', 'assert parabola_directrix(9,8,4)==-2336', 'assert parabola_directrix(2,4,6)==-130']","def find_directrix(a, b, c):
    # The equation of a parabola in standard form is y^2 = 4ax
    
    # The equation of the directrix is x = -a/2
    directrix = -a / 2
    
    return directrix"
charlessutton@: Benchmark Questions Verification V2.ipynb,431,2 つのリストを受け取り、それらに少なくとも 1 つの共通要素がある場合に true を返す関数を作成します。,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",[],"['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', ""assert common_element(['a','b','c'], ['d','b','e'])==True""]","def has_common_element(list1, list2):
    for element in list1:
        if element in list2:
            return True
    return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,432,台形の長さの中央値を求める関数を作成します。,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",[],"['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']","def length_of_trapezoid(midsegment_length, top_base_length, bottom_base_length):
    return midsegment_length * 2 - top_base_length - bottom_base_length"
charlessutton@: Benchmark Questions Verification V2.ipynb,433,入力された数値が指定された配列の要素より大きいかどうかを確認する関数を作成します。,"def check_greater(arr, number):
  arr.sort()
  return number > arr[-1]",[],"['assert check_greater([1, 2, 3, 4, 5], 4) == False', 'assert check_greater([2, 3, 4, 5, 6], 8) == True', 'assert check_greater([9, 7, 4, 8, 6, 1], 11) == True']","def is_greater_than(arr, num):
    for val in arr:
        if val <= num:
            return False
    return True"
charlessutton@: Benchmark Questions Verification V2.ipynb,434,a の後に 1 つ以上の b が続く文字列と一致する関数を作成します。,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False
",[],"['assert text_match_one(""ac"")==False', 'assert text_match_one(""dc"")==False', 'assert text_match_one(""abba"")==True']","def match_ab(string):
    pattern = r'a+b+'
    if re.fullmatch(pattern, string):
        return True
    else:
        return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,435,指定された数値の最後の桁を検索する Python 関数を作成します。,"def last_Digit(n) :
    return (n % 10) ",[],"['assert last_Digit(123) == 3', 'assert last_Digit(25) == 5', 'assert last_Digit(30) == 0']","def get_last_digit(number):
    return number % 10"
charlessutton@: Benchmark Questions Verification V2.ipynb,436,リスト内の負の数値を返す Python 関数を作成します。,"def neg_nos(list1):
  out = []
  for num in list1: 
    if num < 0: 
      out.append(num)
  return out ",[],"['assert neg_nos([-1,4,5,-6]) == [-1,-6]', 'assert neg_nos([-1,-2,3,4]) == [-1,-2]', 'assert neg_nos([-7,-6,8,9]) == [-7,-6]']","def get_negative_numbers(numbers):
    negative_numbers = []
    for num in numbers:
        if num < 0:
            negative_numbers.append(num)
    return negative_numbers"
charlessutton@: Benchmark Questions Verification V2.ipynb,437,文字列内の奇数文字を削除する関数を作成します。,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",[],"['assert remove_odd(""python"")==(""yhn"")', 'assert remove_odd(""program"")==(""rga"")', 'assert remove_odd(""language"")==(""agae"")']","def remove_odd_characters(string):
    removed = """"
    for i in range(len(string)):
        if i % 2 == 0:
            removed += string[i]
    return removed"
charlessutton@: Benchmark Questions Verification V2.ipynb,438,双方向タプル ペアをカウントする関数を作成します。,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return res",[],"['assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3', 'assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2', 'assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4']","def count_tuple_pairs(tuples):
    count = 0
    for tup in tuples:
        if len(tup) == 2 and tup[::-1] in tuples:
            count += 1
    return count"
charlessutton@: Benchmark Questions Verification V2.ipynb,439,複数の整数のリストを 1 つの整数に結合する関数を作成します。,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",[],"['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']","def combine_integers(integers):
    combined = """"
    for num in integers:
        combined += str(num)
    return int(combined)"
charlessutton@: Benchmark Questions Verification V2.ipynb,440,与えられた文内の最初の副詞とその位置を検索する関数を作成します。,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",[],"['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')', 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')', 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']","def find_first_adverb(sentence):
    # Split the sentence into words
    words = sentence.split()
    
    # List of common adverbs
    common_adverbs = ['quickly', 'quietly', 'happily', 'sadly', 'slowly', 'loudly']
    
    # Iterate over the words and find the first adverb
    for i, word in enumerate(words):
        # Remove any punctuation from the word
        word = word.strip("",.?!"")
        
        # Check if the word is an adverb
        if word in common_adverbs:
            return word, i"
charlessutton@: Benchmark Questions Verification V2.ipynb,441,指定されたサイズの立方体の表面積を求める関数を作成します。,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",[],"['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']","def calculate_surface_area(length):
    surface_area = 6 * length**2
    return surface_area"
charlessutton@: Benchmark Questions Verification V2.ipynb,442,整数の配列内の正の数の比率を求める関数を作成します。,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",[],"['assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54', 'assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69', 'assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56']","def ratio_of_positive_numbers(numbers):
    positive_numbers = [num for num in numbers if num > 0]
    return len(positive_numbers) / len(numbers)"
charlessutton@: Benchmark Questions Verification V2.ipynb,443,指定されたリストから最大の負の数を見つける Python 関数を作成します。,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",[],"['assert largest_neg([1,2,3,-4,-6]) == -6', 'assert largest_neg([1,2,3,-8,-9]) == -9', 'assert largest_neg([1,2,3,4,-1]) == -1']","def find_largest_negative(numbers):
    largest_negative = None
    for num in numbers:
        if num < 0 and (largest_negative is None or num > largest_negative):
            largest_negative = num
    return largest_negative"
charlessutton@: Benchmark Questions Verification V2.ipynb,444,指定されたタプル リスト内の各タプルを k でトリミングする関数を作成します。,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",[],"[""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"", ""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'"", ""assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'""]","def trim_tuples(tuple_list, k):
    trimmed_tuples = []
    for tpl in tuple_list:
        if len(tpl) > k:
            trimmed_tuples.append(tpl[:k])
        else:
            trimmed_tuples.append(tpl)
    return trimmed_tuples"
charlessutton@: Benchmark Questions Verification V2.ipynb,445,指定された 2 つのタプル内のタプル要素のインデックスごとの乗算を実行する関数を作成します。,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']","def multiply_tuples(tuple1, tuple2):
    result = ()
    for i in range(len(tuple1)):
        multiplied = tuple1[i] * tuple2[i]
        result += (multiplied,)
    return result"
charlessutton@: Benchmark Questions Verification V2.ipynb,446,タプル内のリストのすべての要素の出現をカウントする Python 関数を作成します。,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",[],"[""assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"", 'assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6', 'assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2']","def count_occurrences(tuple_list):
    occurrences = {}
    for lst in tuple_list:
        for element in lst:
            if element in occurrences:
                occurrences[element] += 1
            else:
                occurrences[element] = 1
    return occurrences"
charlessutton@: Benchmark Questions Verification V2.ipynb,447,リスト内の個々の要素の立方体を検索する関数を作成します。,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",[],"['assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'assert cube_nums([10,20,30])==([1000, 8000, 27000])', 'assert cube_nums([12,15])==([1728, 3375])']","def cube_of_elements(lst):
    cube_lst = []
    for num in lst:
        cube_lst.append(num ** 3)
    return cube_lst"
charlessutton@: Benchmark Questions Verification V2.ipynb,448,ペリン数の合計を計算する関数を作成します。,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",[],"['assert cal_sum(9) == 49', 'assert cal_sum(10) == 66', 'assert cal_sum(11) == 88']","def calculate_sum(n):
    if n == 0 or n == 1:
        return n
    else:
        perinacci = [0, 1]
        total = 1
        for i in range(2, n+1):
            perinacci.append(perinacci[i-1] + perinacci[i-2])
            total += perinacci[i]
        return total"
charlessutton@: Benchmark Questions Verification V2.ipynb,450,指定された文字列値のリストから指定されたサイズの文字列を抽出する関数を作成します。,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",[],"[""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']""]","def extract_string(string_list, size):
    extracted_string = []
    for string in string_list:
        if len(string) == size:
            extracted_string.append(string)
    return extracted_string"
charlessutton@: Benchmark Questions Verification V2.ipynb,451,指定された文字列からすべての空白を削除する関数を作成します。,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",[],"[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]","def remove_whitespaces(string):
    return string.replace("" "", """")"
charlessutton@: Benchmark Questions Verification V2.ipynb,452,指定された金額に損失がある場合は損失金額を返し、それ以外の場合は 0 を返す関数を作成します。,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return 0",[],"['assert loss_amount(1500,1200)==0', 'assert loss_amount(100,200)==100', 'assert loss_amount(2000,5000)==3000']","def calculate_loss(amount):
    if amount < 0:
        return amount
    else:
        return 0"
charlessutton@: Benchmark Questions Verification V2.ipynb,453,数値の偶数因数の合計を求める Python 関数を作成します。,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res",[],"['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']","def sum_of_even_factors(n):
    sum = 0
    for i in range(2, n+1, 2):
        if n % i == 0:
            sum += i
    return sum"
charlessutton@: Benchmark Questions Verification V2.ipynb,454,「z」を含む単語に一致する関数を作成します。,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_wordz(""pythonz."")==True', 'assert text_match_wordz(""xyz."")==True', 'assert text_match_wordz(""  lang  ."")==False']","def match_word_with_z(word):
    return 'z' in word"
charlessutton@: Benchmark Questions Verification V2.ipynb,455,指定された月番号に 31 日が含まれているかどうかを確認する関数を作成します。,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",[],"['assert check_monthnumb_number(5)==True', 'assert check_monthnumb_number(2)==False', 'assert check_monthnumb_number(6)==False']","def is_month_long(month):
    long_months = [1, 3, 5, 7, 8, 10, 12]
    if month in long_months:
        return True
    else:
        return False"
charlessutton@: Benchmark Questions Verification V2.ipynb,456,指定された文字列値のリスト内の各文字列を反転する関数を作成します。,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",[],"[""assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"", ""assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']"", ""assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']""]","def reverse_strings(strings):
    reversed_strings = []
    for string in strings:
        reversed_strings.append(string[::-1])
    return reversed_strings"
charlessutton@: Benchmark Questions Verification V2.ipynb,457,最小の長さのサブリストを見つけるための Python 関数を作成します。,"def Find_Min(lst): 
    return min(lst, key=len) ",[],"['assert Find_Min([[1],[1,2],[1,2,3]]) == [1]', 'assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]', ""assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']""]","def find_min_length_sublist(lst):
    min_length = float('inf')
    min_length_sublist = []
    
    for i in range(len(lst)):
        for j in range(i, len(lst)):
            sublist = lst[i:j+1]
            if len(sublist) < min_length:
                min_length = len(sublist)
                min_length_sublist = sublist
    
    return min_length_sublist"
charlessutton@: Benchmark Questions Verification V2.ipynb,458,長方形の面積を求める関数を作成します。,"def rectangle_area(l,b):
  area=l*b
  return area",[],"['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']","def calculate_area(length, width):
    area = length * width
    return area"
charlessutton@: Benchmark Questions Verification V2.ipynb,459,指定された文字列から大文字の部分文字列を削除する関数を作成します。,"import re
def remove_uppercase(str1):
  return re.sub('[A-Z]', '', str1)",[],"[""assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"", ""assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'"", ""assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'""]","def remove_uppercase_substrings(string):
    result = """"
    in_uppercase = False
    uppercase_start = 0
    for i in range(len(string)):
        if string[i].isupper():
            if not in_uppercase:
                in_uppercase = True
                uppercase_start = i
        else:
            if in_uppercase:
                in_uppercase = False
                result += string[uppercase_start:i]
    if in_uppercase:
        result += string[uppercase_start:]
    return result"
charlessutton@: Benchmark Questions Verification V2.ipynb,460,各サブリストの最初の要素を取得する Python 関数を作成します。,"def Extract(lst): 
    return [item[0] for item in lst] ",[],"['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']","def get_first_element(sublists):
    first_elements = []
    for sublist in sublists:
        if len(sublist) > 0:
            first_elements.append(sublist[0])
        else:
            first_elements.append(None)
    return first_elements"
charlessutton@: Benchmark Questions Verification V2.ipynb,461,指定された文字列内の大文字を数える Python 関数を作成します。,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",[],"[""assert upper_ctr('PYthon') == 1"", ""assert upper_ctr('BigData') == 1"", ""assert upper_ctr('program') == 0""]","def count_uppercase_characters(string):
    count = 0
    for char in string:
        if char.isupper():
            count += 1
    return count"
charlessutton@: Benchmark Questions Verification V2.ipynb,462,指定されたリストの要素の可能な組み合わせをすべて検索する関数を作成します。,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",[],"[""assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"", ""assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]"", ""assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]""]","def find_combinations(lst):
    combinations = []
    for i in range(len(lst)):
        for j in range(i+1, len(lst)):
            combinations.append((lst[i], lst[j]))
    return combinations"
charlessutton@: Benchmark Questions Verification V2.ipynb,463,指定された配列の最大積部分配列を見つける関数を作成します。,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",[],"['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']","def max_product_subarray(nums):
    if len(nums) == 0:
        return 0"
charlessutton@: Benchmark Questions Verification V2.ipynb,464,辞書内のすべての値が同じかどうかを確認する関数を作成します。,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",[],"[""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False""]","def are_values_equal(dictionary):
    values = list(dictionary.values())
    return all(val == values[0] for val in values)"
charlessutton@: Benchmark Questions Verification V2.ipynb,465,指定された辞書から空の項目を削除する関数を作成します。,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",[],"[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"", ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"", ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]","def remove_empty_items(dictionary):
    removed_items = []
    for key, value in dictionary.items():
        if value is None or value == '':
            removed_items.append(key)
    for key in removed_items:
        del dictionary[key]
    return dictionary"
charlessutton@: Benchmark Questions Verification V2.ipynb,468,配列の増加する部分列の数値を乗算して形成される最大の積を見つける関数を作成します。,"def max_product(arr):   
  n = len(arr)
  mpis = arr[:]
  for i in range(n): 
    current_prod = arr[i]
    j = i + 1
    while j < n:
      if arr[j-1] > arr[j]: 
        break
      current_prod *= arr[j]
      if current_prod > mpis[j]:
        mpis[j] = current_prod 
      j = j + 1
  return max(mpis)",[],"['assert max_product([3, 100, 4, 5, 150, 6]) == 3000', 'assert max_product([4, 42, 55, 68, 80]) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460']","def max_product(nums):
    if len(nums) == 0:
        return 0"
charlessutton@: Benchmark Questions Verification V2.ipynb,470,指定されたタプルの隣接する要素のペアごとの加算を求める関数を作成します。,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",[],"['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']","def sum_of_adjacent_pairs(tuple):
    sums = []
    for i in range(len(tuple)-1):
        sum = tuple[i] + tuple[i+1]
        sums.append(sum)
    return sums"
charlessutton@: Benchmark Questions Verification V2.ipynb,471,n を法とする配列乗算の積を求める Python 関数を作成します。,"def find_remainder(arr, n): 
    mul = 1
    for i in range(len(arr)):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",[],"['assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9', 'assert find_remainder([1,1,1],1) == 0', 'assert find_remainder([1,2,1],2) == 0']","def array_product_mod_n(array, n):
    product = 1
    for num in array:
        product = (product * num) % n
    return product"
charlessutton@: Benchmark Questions Verification V2.ipynb,472,指定されたリストに連続した数字が含まれているかどうかを確認する Python 関数を作成します。,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",[],"['assert check_Consecutive([1,2,3,4,5]) == True', 'assert check_Consecutive([1,2,3,5,6]) == False', 'assert check_Consecutive([1,2,1]) == False']","def has_continuous_numbers(numbers):
    sorted_numbers = sorted(numbers)
    for i in range(len(sorted_numbers)-1):
        if sorted_numbers[i] != sorted_numbers[i+1] - 1:
            return False
    return True"
charlessutton@: Benchmark Questions Verification V2.ipynb,473,順序に関係なく、指定されたタプル リスト内の要素のタプル共通部分を見つける関数を作成します。,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",[],"['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']","def find_common_elements(tuples):
    if not tuples:
        return ()
    
    common_elements = tuples[0]
    for tpl in tuples:
        common_elements = tuple(element for element in common_elements if element in tpl)
    
    return common_elements"
charlessutton@: Benchmark Questions Verification V2.ipynb,474,文字列内の文字を置換する関数を作成します。,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",[],"['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")', 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")', 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']","def replace_characters(string, replacements):
    for char, replacement in replacements.items():
        string = string.replace(char, replacement)
    return string"
charlessutton@: Benchmark Questions Verification V2.ipynb,475,辞書を値でソートする関数を作成します。,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",[],"[""assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"", ""assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"", ""assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]""]","def sort_dictionary_by_value(dictionary):
    sorted_dict = dict(sorted(dictionary.items(), key=lambda item: item[1]))
    return sorted_dict"
charlessutton@: Benchmark Questions Verification V2.ipynb,476,指定された配列内の最大値と最小値の合計を求める Python 関数を作成します。,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",[],"['assert big_sum([1,2,3]) == 4', 'assert big_sum([-1,2,3,4]) == 3', 'assert big_sum([2,3,6]) == 8']","def sum_of_min_and_max(arr):
    min_val = min(arr)
    max_val = max(arr)
    return min_val + max_val"
charlessutton@: Benchmark Questions Verification V2.ipynb,477,指定された文字列を小文字に変換する Python 関数を作成します。,"def is_lower(string):
  return (string.lower())",[],"['assert is_lower(""InValid"") == ""invalid""', 'assert is_lower(""TruE"") == ""true""', 'assert is_lower(""SenTenCE"") == ""sentence""']","def convert_to_lowercase(string):
    return string.lower()"
charlessutton@: Benchmark Questions Verification V2.ipynb,478,指定された文字列から小文字の部分文字列を削除する関数を作成します。,"import re
def remove_lowercase(str1):
 return re.sub('[a-z]', '', str1)",[],"['assert remove_lowercase(""PYTHon"")==(\'PYTH\')', 'assert remove_lowercase(""FInD"")==(\'FID\')', 'assert remove_lowercase(""STRinG"")==(\'STRG\')']","def remove_lowercase_substrings(string):
    result = """"
    substrings = string.split()
    for substr in substrings:
        if not substr.islower():
            result += substr + "" ""
    return result.strip()"
charlessutton@: Benchmark Questions Verification V2.ipynb,479,指定された数値の最初の桁を見つける Python 関数を作成します。,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10 
    return int(n) ",[],"['assert first_Digit(123) == 1', 'assert first_Digit(456) == 4', 'assert first_Digit(12) == 1']","def find_first_digit(number):
    # Convert the number to a string
    number_str = str(number)
    
    # Return the first character, which is the first digit
    return int(number_str[0])"
