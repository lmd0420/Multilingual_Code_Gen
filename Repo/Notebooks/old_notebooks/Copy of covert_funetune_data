{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOiwhydPQNVAuODeX9Uzllv"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WS6bgzF_q_Hv","executionInfo":{"status":"ok","timestamp":1697698547760,"user_tz":300,"elapsed":21669,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"acc2abf9-90a9-4e27-84d0-4d20a63b5bd0"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","import csv\n","import json\n","import os\n","\n","\n","# Mount Google Drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["# Path to the CSV file\n","csv_file_path = '/content/drive/MyDrive/EACL/MultilingualLLMBias/GPT3.5-finetune-data/stacked_combined.csv'\n","\n","# Path to the output JSONL file\n","jsonl_file_path = '/content/drive/MyDrive/EACL/MultilingualLLMBias/GPT3.5-finetune-data/stacked_combined.jsonl'\n","\n","# Check if the file exists\n","if not os.path.exists(csv_file_path):\n","    print(f\"The file {csv_file_path} does not exist.\")\n","else:\n","    # Read the CSV and write to JSONL\n","    with open(csv_file_path, mode='r', encoding='utf-8') as file, open(jsonl_file_path, mode='w', encoding='utf-8') as jsonl_file:\n","        # CSV Reader\n","        csv_reader = csv.DictReader(file)\n","\n","        # Process each row\n","        for row in csv_reader:\n","            # Create a formatted dictionary\n","            formatted_data = {\n","                \"messages\": [\n","                    {\"role\": \"system\", \"content\": \"Provide answers in Python.\"},\n","                    {\"role\": \"user\", \"content\": row['questions']},\n","                    {\"role\": \"assistant\", \"content\": row['code_answers']}\n","                ]\n","            }\n","\n","            # Write the dictionary as a JSON string to the JSONL file\n","            jsonl_file.write(json.dumps(formatted_data) + '\\n')\n","\n","    print(f\"Data has been written to {jsonl_file_path}\")\n","\n","# Print the first few records from the JSONL file\n","num_records_to_print = 5  # You can change this value to print more or fewer records\n","with open(jsonl_file_path, 'r') as file:\n","    for i, line in enumerate(file):\n","        if i >= num_records_to_print:\n","            break\n","        print(json.loads(line))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oNjB1YRwt9S4","executionInfo":{"status":"ok","timestamp":1697698724448,"user_tz":300,"elapsed":2,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"2868180a-b2ef-4f96-f446-a7e05afe78c8"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Data has been written to /content/drive/MyDrive/EACL/MultilingualLLMBias/GPT3.5-finetune-data/stacked_combined.jsonl\n","{'messages': [{'role': 'system', 'content': 'Provide answers in Python.'}, {'role': 'user', 'content': 'Write a program to check if a given string is a valid palindrome or not ignoring case.'}, {'role': 'assistant', 'content': \"def is_palindrome(s):\\n    # Convert the string to lowercase\\n    s = s.lower()\\n    \\n    # Remove all non-alphanumeric characters from the string\\n    s = ''.join(c for c in s if c.isalnum())\\n    \\n    # Check if the string is equal to its reverse\\n    return s == s[::-1]\"}]}\n","{'messages': [{'role': 'system', 'content': 'Provide answers in Python.'}, {'role': 'user', 'content': 'Write a Python program to reverse a given string.'}, {'role': 'assistant', 'content': 'def reverse_string(string):\\n    return string[::-1]'}]}\n","{'messages': [{'role': 'system', 'content': 'Provide answers in Python.'}, {'role': 'user', 'content': '编写一个Python程序来反转给定的字符串。'}, {'role': 'assistant', 'content': 'def reverse_string(string):\\n    return string[::-1]'}]}\n","{'messages': [{'role': 'system', 'content': 'Provide answers in Python.'}, {'role': 'user', 'content': 'एक दिए गए स्ट्रिंग को उलटा करने के लिए एक पायथन प्रोग्राम लिखें।'}, {'role': 'assistant', 'content': 'def reverse_string(string):\\n    return string[::-1]'}]}\n","{'messages': [{'role': 'system', 'content': 'Provide answers in Python.'}, {'role': 'user', 'content': 'Escribe un programa en Python para invertir una cadena dada.'}, {'role': 'assistant', 'content': 'def reverse_string(string):\\n    return string[::-1]'}]}\n"]}]},{"cell_type":"markdown","source":["# check the format of finetune data\n"],"metadata":{"id":"LKtYbITmuaGR"}},{"cell_type":"code","source":["!pip install openai"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tlRtXiyUug_O","executionInfo":{"status":"ok","timestamp":1697698693644,"user_tz":300,"elapsed":7276,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"fdf0ba1a-e9d2-454a-ee2f-95e1b3506c96"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting openai\n","  Downloading openai-0.28.1-py3-none-any.whl (76 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/77.0 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[90m╺\u001b[0m\u001b[90m━━\u001b[0m \u001b[32m71.7/77.0 kB\u001b[0m \u001b[31m2.3 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m77.0/77.0 kB\u001b[0m \u001b[31m1.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests>=2.20 in /usr/local/lib/python3.10/dist-packages (from openai) (2.31.0)\n","Requirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (from openai) (4.66.1)\n","Requirement already satisfied: aiohttp in /usr/local/lib/python3.10/dist-packages (from openai) (3.8.6)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai) (3.3.0)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai) (3.4)\n","Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai) (2.0.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.20->openai) (2023.7.22)\n","Requirement already satisfied: attrs>=17.3.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai) (23.1.0)\n","Requirement already satisfied: multidict<7.0,>=4.5 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai) (6.0.4)\n","Requirement already satisfied: async-timeout<5.0,>=4.0.0a3 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai) (4.0.3)\n","Requirement already satisfied: yarl<2.0,>=1.0 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai) (1.9.2)\n","Requirement already satisfied: frozenlist>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai) (1.4.0)\n","Requirement already satisfied: aiosignal>=1.1.2 in /usr/local/lib/python3.10/dist-packages (from aiohttp->openai) (1.3.1)\n","Installing collected packages: openai\n","\u001b[31mERROR: pip's dependency resolver does not currently take into account all the packages that are installed. This behaviour is the source of the following dependency conflicts.\n","llmx 0.0.15a0 requires cohere, which is not installed.\n","llmx 0.0.15a0 requires tiktoken, which is not installed.\u001b[0m\u001b[31m\n","\u001b[0mSuccessfully installed openai-0.28.1\n"]}]},{"cell_type":"code","source":["data_path = '/content/drive/MyDrive/EACL/MultilingualLLMBias/GPT3.5-finetune-data/stacked_combined.jsonl'\n","\n","# Load the dataset\n","with open(data_path, 'r', encoding='utf-8') as f:\n","    dataset = [json.loads(line) for line in f]\n","\n","# Initial dataset stats\n","print(\"Num examples:\", len(dataset))\n","print(\"First example:\")\n","for message in dataset[0][\"messages\"]:\n","    print(message)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5ny4MIE_uZuT","executionInfo":{"status":"ok","timestamp":1697698792344,"user_tz":300,"elapsed":305,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"063ee8b1-0914-4e12-91bf-81d80a13e84c"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Num examples: 934\n","First example:\n","{'role': 'system', 'content': 'Provide answers in Python.'}\n","{'role': 'user', 'content': 'Write a program to check if a given string is a valid palindrome or not ignoring case.'}\n","{'role': 'assistant', 'content': \"def is_palindrome(s):\\n    # Convert the string to lowercase\\n    s = s.lower()\\n    \\n    # Remove all non-alphanumeric characters from the string\\n    s = ''.join(c for c in s if c.isalnum())\\n    \\n    # Check if the string is equal to its reverse\\n    return s == s[::-1]\"}\n"]}]},{"cell_type":"code","source":["from collections import defaultdict  # Make sure to include this import\n","\n","# Format error checks\n","format_errors = defaultdict(int)\n","\n","for ex in dataset:\n","    if not isinstance(ex, dict):\n","        format_errors[\"data_type\"] += 1\n","        continue\n","\n","    messages = ex.get(\"messages\", None)\n","    if not messages:\n","        format_errors[\"missing_messages_list\"] += 1\n","        continue\n","\n","    for message in messages:\n","        if \"role\" not in message or \"content\" not in message:\n","            format_errors[\"message_missing_key\"] += 1\n","\n","        if any(k not in (\"role\", \"content\", \"name\", \"function_call\") for k in message):\n","            format_errors[\"message_unrecognized_key\"] += 1\n","\n","        if message.get(\"role\", None) not in (\"system\", \"user\", \"assistant\", \"function\"):\n","            format_errors[\"unrecognized_role\"] += 1\n","\n","        content = message.get(\"content\", None)\n","        function_call = message.get(\"function_call\", None)\n","\n","        if (not content and not function_call) or not isinstance(content, str):\n","            format_errors[\"missing_content\"] += 1\n","\n","    if not any(message.get(\"role\", None) == \"assistant\" for message in messages):\n","        format_errors[\"example_missing_assistant_message\"] += 1\n","\n","if format_errors:\n","    print(\"\\nFound errors:\")\n","    for k, v in format_errors.items():\n","        print(f\"{k}: {v}\")\n","else:\n","    print(\"\\nNo errors found\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"9qtn-R73vICj","executionInfo":{"status":"ok","timestamp":1697698887244,"user_tz":300,"elapsed":283,"user":{"displayName":"Mingda Li","userId":"10577302496462889642"}},"outputId":"3123810d-490d-4aee-fb7d-ba6784fea0be"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","No errors found\n"]}]}]}